{"version":3,"sources":["enums/index.tsx","components/shared/Select.tsx","components/config/method/Method.tsx","components/data/graphql/GraphQL.tsx","components/shared/Button.tsx","components/config/headers/type/Types.tsx","components/shared/Input.tsx","components/config/headers/value/Value.tsx","components/config/headers/Headers.tsx","components/config/destination/domain/Domain.tsx","components/config/destination/endpoint/Endpoint.tsx","components/config/destination/Destination.tsx","components/config/Config.tsx","components/shared/Copy.tsx","components/shared/Saving.tsx","components/shared/TextArea.tsx","components/data/graphql/type/Type.tsx","components/data/json/Json.tsx","components/data/selector/Selector.tsx","components/data/Data.tsx","components/heading/Heading.tsx","components/output/selector/Selector.tsx","utils/index.ts","components/output/curl/Curl.tsx","components/output/Output.tsx","components/shared/Checkbox.tsx","components/shared/Toggler.tsx","components/shared/Notice.tsx","components/test/request/proxy/Proxy.tsx","components/shared/Confirm.tsx","components/test/request/Request.tsx","components/shared/Table.tsx","components/test/fetchresponse/responseheaders/ResponseHeaders.tsx","components/test/fetchresponse/responsejson/ResponseJson.tsx","components/test/fetchresponse/responseraw/ResponseRaw.tsx","components/test/fetchresponse/FetchResponse.tsx","components/shared/Loading.tsx","components/test/Test.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["HTTPMethods","HTTPHeaders","DataType","OutputType","InputTypes","ColumnCount","JsonValueTypes","Select","props","selected","react_default","a","createElement","Fragment","label","className","name","size","style","disabled","isDisabled","multiple","isMultiple","onChange","value","values","map","i","key","concat","GraphQLType","Method","width","shared_Select","e","target","onUpdate","Object","Button","isPrimary","id","onClick","onClickRaw","preventDefault","children","Types","isFullWidth","index","Input","type","TEXT","checked","isChecked","Value","shared_Input","Headers","updateType","header","updateValue","addHeader","length","removeHeader","currentTarget","split","pop","undefined","parseInt","filter","includes","shared_Button","index_es","icon","faMinus","type_Types","toConsumableArray","value_Value","faPlus","Domain","URL","Endpoint","Destination","domain","endpoint","domain_Domain","endpoint_Endpoint","Config","headers_Headers","data","headers","push","updateConfig","TWELVE","method_Method","method","TWO","destination_Destination","TEN","Copy","copy","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","navigator","clipboard","writeText","content","stop","apply","this","arguments","faCopy","Saving","react_transition_group","transitionName","transitionLeave","transitionEnter","transitionEnterTimeout","isSaved","faSave","TextArea","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChangeDirect","state","React","Component","Type","GraphQL","updateGraphQL","draft","getDocAndTypeFromGQLString","gql","onUpdateData","query","setState","_","replace","pretty","PrettyMe","shared_Saving","type_Type","faMagic","shared_Copy","TextArea_TextArea","ref","background","process","backgroundAttachment","backgroundRepeat","backgroundColor","color","doc","parse","definitions","operation","print","newProps","PureComponent","Json","updateJson","hasDraft","object","JSON","stringify","Selector","Data","Json_Json","json","updateData","GQL","GraphQL_GraphQL","graphQL","selector_Selector","Heading","src","imageSrc","alt","methodHasPayload","GET","HEAD","PROXY","regEx","url","curlHeader","curlMethod","curlData","dateTimeZoneChars","jsonData","newLine","newLineAndTab","multipleSpaces","quotes","singleEscapedNewLine","isValidMethod","string","isValidURL","charAt","possUrl","match","isValidHeaders","types","reduce","curr","isValidGraphQLString","isStringANumber","isNaN","isStringADate","Date","isStringBooleanOrNull","toLowerCase","isStringAURL","Curl","serializerCurl","config","hasNewConfig","hasNewData","getMethod","getHeaders","newData","getData","domainAndEndpoint","getDomainAndEndpoint","FORM","updateCurl","curl","getValue","regex","utils","exec","payload","join","keys","parsePayloadString","Output","output","CURL","Curl_Curl","output_selector_Selector","Checkbox","isCheckedLabel","isNotCheckedLabel","CHECKBOX","Toggler","isToggled","onToggle","Notice","lines","heading","line","Proxy","toggleProxySettings","prevState","showProxySettings","onUpdateProxyUrl","onUpdateProxy","isEnabled","proxy","onUpdateProxyEnabled","isExpanded","shared_Toggler","shared_Notice","placeholder","shared_Checkbox","Confirm","window","confirm","message","onConfirm","onCancel","Request","onRequest","Proxy_Proxy","hasRun","shouldConfirm","shared_Confirm","Table","row","j","data-label","ResponseHeaders","href","toggleHeaders","showHeaders","_this2","shared_Table","Array","from","Header","get","ResponseJson","toggleJson","showJson","replacer","p1","p2","p3","p4","part","indent","end","valueClass","STRING","NUMBER","DATE","BOOLEAN","ReactDOMServer","renderToString","repeat","dangerouslySetInnerHTML","__html","ResponseRaw","toggleRaw","showRaw","FetchResponse","ResponseHeaders_ResponseHeaders","ResponseRaw_ResponseRaw","ResponseJson_ResponseJson","Loading","Test","baseState","getDestination","destination","getFetchData","fetchData","body","onTest","_callee2","_context2","isLoading","response","dest","fetch","sent","text","t0","prevProps","prevProxy","newProxy","validation","success","idx","shared_Loading","proxyMessage","request_Request","updateProxy","fetchresponse_FetchResponse","App","onConfigChange","validatePayload","onDataChange","result","test","form","showData","heading_Heading","config_Config","data_Data","output_Output","test_Test","Boolean","location","hostname","ReactDOM","render","App_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"osBAAYA,EASAC,EAuCAC,EAMAC,EAIAC,EAyBAC,EAeAC,8ECxDGC,EA3BsC,SAACC,GACpD,IAAMC,EAAWD,EAAMC,UAAY,GACnC,OACEC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEL,EAAMM,OAAUJ,EAAAC,EAAAC,cAAA,aAAQJ,EAAMM,OAChCJ,EAAAC,EAAAC,cAAA,UACEG,UAAWP,EAAMO,WAAa,GAC9BC,KAAMR,EAAMQ,MAAQ,GACpBC,KAAMT,EAAMS,MAAQ,EACpBC,MAAOV,EAAMU,OAAS,GACtBC,SAAUX,EAAMY,aAAc,EAC9BC,SAAUb,EAAMc,aAAc,EAC9BC,SAAUf,EAAMe,UAAY,KAC5BC,MAAOf,GACPC,EAAAC,EAAAC,cAAA,UAAQY,MAAM,GAAGL,UAAQ,GAAzB,iBACCX,EAAMiB,OAAOC,IAAI,SAACF,EAAeG,GAAhB,OAChBjB,EAAAC,EAAAC,cAAA,UACEY,MAAOA,EACPI,IAAG,GAAAC,OAAKL,EAAL,KAAAK,OAAcF,IAChBH,wBDlCCxB,8GASAC,kkCAuCAC,oEAMAC,sCAIAC,8YAyBAC,qSAeAC,iGEjFZ,ICFYwB,EDuBGC,EArBsC,SAACvB,GASpD,OACEE,EAAAC,EAAAC,cAAA,OAAKG,UAAWP,EAAMwB,OACpBtB,EAAAC,EAAAC,cAACqB,EAAD,CACElB,UAAU,sBACVD,MAAM,cACNS,SAZiB,SACrBW,GAEA,IAAMV,EAAqBU,EAAEC,OAAOX,MACpChB,EAAM4B,SAASZ,IASXf,SAAUD,EAAMC,SAChBgB,OAAQY,OAAOZ,OAAOzB,6BEJfsC,EAjBsC,SAAC9B,GAMpD,OACEE,EAAAC,EAAAC,cAAA,UACEG,WAAYP,EAAM+B,UAAY,kBAAoB,KAAO/B,EAAMO,WAAa,IAC5EI,SAAUX,EAAMY,WAChBoB,GAAIhC,EAAMgC,GACVC,QAASjC,EAAMkC,YAVE,SAACR,GACpBA,EAAES,iBACFnC,EAAMiC,YASHjC,EAAMoC,UAAYpC,EAAMM,OAAS,KCSzB+B,SAjBmC,SAACrC,GAQjD,OACEE,EAAAC,EAAAC,cAACqB,EAAD,CACElB,WAAYP,EAAMsC,YAAc,eAAiB,IAAM,SACvDvB,SAVmB,SACrBW,GAEA,IAAMV,EAAqBU,EAAEC,OAAOX,MACpChB,EAAM4B,SAASZ,EAAOhB,EAAMuC,QAO1BtC,SAAUD,EAAMC,SAChBgB,OAAQjB,EAAMiB,WCQLuB,EAhBoC,SAACxC,GAAD,OACjDE,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEL,EAAMM,OAAUJ,EAAAC,EAAAC,cAAA,aAAQJ,EAAMM,OAChCJ,EAAAC,EAAAC,cAAA,SACEqC,KAAMzC,EAAMyC,MAAQ7C,EAAW8C,KAC/BC,QAAS3C,EAAM4C,UACfrC,UAAWP,EAAMO,WAAa,GAC9BC,KAAMR,EAAMQ,MAAQ,GACpBwB,GAAIhC,EAAMgC,IAAM,GAChBhB,MAAOhB,EAAMgB,OAAS,GACtBL,SAAUX,EAAMY,WAChBG,SAAUf,EAAMe,aCNL8B,SAboC,SAAC7C,GAKlD,OACEE,EAAAC,EAAAC,cAAC0C,EAAD,CACEvC,WAAYP,EAAMsC,YAAc,eAAiB,IAAM,SACvDvB,SAPgB,SAACW,GACnB1B,EAAM4B,SAASF,EAAEC,OAAOX,MAAOhB,EAAMuC,QAOnCvB,MAAOhB,EAAMgB,UCyHJ+B,SAnHwC,SAAC/C,GAEtD,IAAMgD,EAAa,SAACP,EAAmBF,GACrC,IAAMU,EAASjD,EAAMC,SAASsC,GAC9BU,EAAOR,KAAOA,EACdzC,EAAM4B,SAASqB,EAAQV,IAGnBW,EAAc,SAAClC,EAAeuB,GAClC,IAAMU,EAASjD,EAAMC,SAASsC,GAC9BU,EAAOjC,MAAQA,EACfhB,EAAM4B,SAASqB,EAAQV,IAGnBY,EAAY,SAACzB,GACjBA,EAAES,iBAEFnC,EAAM4B,SACJ,CACEa,KAAM,GACNzB,MAAO,IAEThB,EAAMC,SAASmD,SAIbC,EAAe,SAAC3B,GACpBA,EAAES,iBACF,IAAMI,EAAQb,EAAE4B,cAActB,GAAGuB,MAAM,KAAKC,WAE9BC,IAAVlB,GAIJvC,EAAM4B,SAAS,KAAM8B,SAASnB,KAI1BtC,EAAWD,EAAMC,SAASiB,IAAI,SAAA+B,GAAM,OAAIA,EAAOR,OAC/CxB,EAASY,OAAOZ,OAAOxB,GAAakE,OAAO,SAAAV,GAAM,OAAKhD,EAAS2D,SAASX,KAE9E,OAEE/C,EAAAC,EAAAC,cAAA,OAAKG,UAAWP,EAAMwB,MAAQ,YAC5BtB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAAA,iCAKAJ,EACGC,SACAiB,IACC,SAAC+B,EAAgBV,GAAjB,OAEErC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,MAAMa,IAAG,GAAAC,OAAK4B,EAAOR,KAAZ,KAAApB,OAAoBkB,IAI1CrC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAACyD,EAAD,CACE7B,GAAE,UAAAX,OAAYkB,GACdR,WAAW,EACXxB,UAAU,eACV0B,QAAS,aACTC,WAAYmB,GACZnD,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CAAiBC,KAAMC,IAASvD,KAAK,SAGzCP,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACbL,EAAAC,EAAAC,cAAC6D,EAAD,CACE1B,MAAOA,EACPD,aAAa,EACbrB,OAAM,GAAAI,OAAAQ,OAAAqC,EAAA,EAAArC,CAAMZ,GAAN,CAAcgC,EAAOR,OAC3BxC,SAAUgD,EAAOR,KACjBb,SAAUoB,KAEd9C,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACbL,EAAAC,EAAAC,cAAC+D,EAAD,CACE5B,MAAOA,EACPD,aAAa,EACbtB,MAAOiC,EAAOjC,OAAS,GACvBY,SAAUsB,KAEdhD,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAACyD,EAAD,CACE9B,WAAW,EACXxB,UAAU,eACV0B,QAAS,aACTC,WAAYiB,GACZjD,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CAAiBC,KAAMK,IAAQ3D,KAAK,YAQtB,IAA1BT,EAAMC,SAASmD,QACblD,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACyD,EAAD,CACE9B,WAAW,EACXxB,UAAU,eACV0B,QAAS,aACTC,WAAYiB,GACZjD,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CAAiBC,KAAMK,IAAQ3D,KAAK,YC1GrC4D,SAdsC,SAACrE,GAKpD,OACEE,EAAAC,EAAAC,cAAC0C,EAAD,CACEvC,WAAYP,EAAMsC,YAAc,eAAiB,IAAM,UACvDvB,SAPgB,SAACW,GACnB1B,EAAM4B,SAASF,EAAEC,OAAOX,QAOtByB,KAAM7C,EAAW0E,IACjBtD,MAAOhB,EAAMgB,UCGJuD,SAf0C,SAACvE,GAOxD,OACEE,EAAAC,EAAAC,cAAC0C,EAAD,CACEvC,WAAYP,EAAMsC,YAAc,eAAiB,IAAM,YACvDvB,SATgB,SAACW,GAEnB1B,EAAM4B,SAASF,EAAEC,OAAOX,QAQtBA,MAAOhB,EAAMgB,UCqCJwD,SA1CgD,SAACxE,GAE9D,IAAM4B,EAAW,SAACZ,EAAeyB,GAC/BzC,EAAM4B,SACM,WAATa,EAAqBzB,EAAQhB,EAAMyE,OAC1B,aAAThC,EAAuBzB,EAAQhB,EAAM0E,WAY1C,OACExE,EAAAC,EAAAC,cAAA,OAAKG,UAAWP,EAAMwB,MAAQ,gBAC5BtB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACfL,EAAAC,EAAAC,cAAA,gCAGFF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAACuE,EAAD,CACErC,aAAa,EACbV,SAfW,SAAC6C,GACtB7C,EAAS6C,EAAQ,WAePzD,MAAOhB,EAAMyE,UAEjBvE,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAACwE,EAAD,CACEtC,aAAa,EACbV,SAzBa,SAAC8C,GACxB9C,EAAS8C,EAAU,aAyBT1D,MAAOhB,EAAM0E,gBCqBZG,EAnDsC,SAAC7E,GA6BpD,OACEE,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAC0E,EAAD,CACElD,SA1Bc,SAACZ,EAAsBuB,GAC3C,IAAMwC,EAAO/E,EAAM+E,MACdA,EAAKC,QAAQzC,IAAUvB,EAC1B+D,EAAKC,QAAQC,KAAKjE,GAEbA,EAIH+D,EAAKC,QAAQzC,GAASvB,UAHf+D,EAAKC,QAAQzC,GACpBwC,EAAKC,QAAUD,EAAKC,QAAQrB,OAAO,SAAAV,GAAM,OAAIA,KAKjDjD,EAAMkF,aAAaH,IAeb9E,SAAUD,EAAM+E,KAAKC,QACrBxD,MAAO3B,EAAYsF,UAEvBjF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACfL,EAAAC,EAAAC,cAACgF,EAAD,CACEnF,SAAUD,EAAM+E,KAAKM,OACrB7D,MAAO3B,EAAYyF,IACnB1D,SAxCe,SAACZ,GACpB,IAAM+D,EAAO/E,EAAM+E,KACnBA,EAAKM,OAASrE,EACdhB,EAAMkF,aAAaH,MAsCjB7E,EAAAC,EAAAC,cAACmF,EAAD,CACE3D,SArBoB,SAAC6C,EAAgBC,GACzC,IAAMK,EAAO/E,EAAM+E,KACnBA,EAAKN,OAASA,EACdM,EAAKL,SAAWA,EAChB1E,EAAMkF,aAAaH,IAkBfN,OAAQzE,EAAM+E,KAAKN,OACnBC,SAAU1E,EAAM+E,KAAKL,SACrBlD,MAAO3B,EAAY2F,iDCzCZC,EAhBkC,SAACzF,GAEhD,IAAM0F,EAAI,eAAAC,EAAA9D,OAAA+D,EAAA,EAAA/D,CAAAgE,EAAA1F,EAAA2F,KAAG,SAAAC,IAAA,OAAAF,EAAA1F,EAAA6F,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACLC,UAAUC,UAAUC,UAAUtG,EAAMuG,SAD/B,wBAAAN,EAAAO,SAAAT,MAAH,yBAAAJ,EAAAc,MAAAC,KAAAC,YAAA,GAIV,OACEzG,EAAAC,EAAAC,cAACyD,EAAD,CACEtD,UAAWP,EAAMO,WAAa,GAC9BwB,WAAW,EACXE,QAASyD,GACTxF,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CAAiBC,KAAM6C,IAAQnG,KAAK,iBCS3BoG,SApBsC,SAAC7G,GACpD,OACEE,EAAAC,EAAAC,cAAC0G,EAAA,mBAAD,CACEC,eAAe,cACfC,iBAAiB,EACjBC,iBAAiB,EACjBC,uBAAwB,KACxBhH,EAAAC,EAAAC,cAAA,OACEG,WACIP,EAAMmH,QAAW,QAAU,YAC1B,kBACAnH,EAAMO,WAAa,IAExBa,IAAK,UAAYpB,EAAMmH,SACvBjH,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CAAiBC,KAAMqD,IAAQ3G,KAAK,WCXvB4G,cAEnB,SAAAA,EAAYrH,GAAsB,IAAAsH,EAAA,OAAAzF,OAAA0F,EAAA,EAAA1F,CAAA6E,KAAAW,IAChCC,EAAAzF,OAAA2F,EAAA,EAAA3F,CAAA6E,KAAA7E,OAAA4F,EAAA,EAAA5F,CAAAwF,GAAAK,KAAAhB,KAAM1G,KAIR4B,SAAW,SAACF,GACN4F,EAAKtH,MAAM2H,eACbL,EAAKtH,MAAM2H,eAAejG,GACjB4F,EAAKtH,MAAM4B,UACpB0F,EAAKtH,MAAM4B,SAASF,EAAEC,OAAOX,QAP/BsG,EAAKM,MAAQ,GAFmBN,wEAchC,OACEpH,EAAAC,EAAAC,cAAA,YACEG,WAAamG,KAAK1G,MAAMsC,YAAe,gBAAkB,KAAOoE,KAAK1G,MAAMO,WAAa,GACxFQ,SAAU2F,KAAK9E,SACflB,MAAOgG,KAAK1G,MAAMU,OAAS,GAC3BM,MAAO0F,KAAK1G,MAAMgB,eArBY6G,IAAMC,WCgB7BC,SAjBkC,SAAC/H,GAQhD,OACEE,EAAAC,EAAAC,cAACqB,EAAD,CACElB,WAAYP,EAAMO,WAAa,IAAM,QACrCQ,SAVmB,SACrBW,GAEA,IAAMV,EAAqBU,EAAEC,OAAOX,MACpChB,EAAM4B,SAASZ,IAObf,SAAUD,EAAMC,SAChBgB,OAAQY,OAAOZ,OAAOK,uBbZhBA,yDAqBS0G,cAEnB,SAAAA,EAAYhI,GAAqB,IAAAsH,EAAAzF,OAAA0F,EAAA,EAAA1F,CAAA6E,KAAAsB,IAC/BV,EAAAzF,OAAA2F,EAAA,EAAA3F,CAAA6E,KAAA7E,OAAA4F,EAAA,EAAA5F,CAAAmG,GAAAN,KAAAhB,KAAM1G,KAsCRiI,cAAgB,SAACvG,GACf,IAAMwG,EAAQxG,EAAEC,OAAOX,MACvB,IACcgH,EAAQG,2BAA2BD,GACvCE,MAAQd,EAAKM,MAAMM,OACzBZ,EAAKtH,MAAMqI,aAET,CAACC,MAAOJ,IAEVZ,EAAKiB,SAAS,CAACpB,SAAS,KAExBG,EAAKiB,SAAS,CACZL,QACAf,SAAQ,IAGZ,MAAOqB,GACPlB,EAAKiB,SAAS,CACZL,QACAf,SAAS,MA1DkBG,EAiEjCtE,WAAa,SAACP,GACZ6E,EAAKtH,MAAMqI,aACT,CAACC,MAAO7F,EAAQ,IAAM6E,EAAKM,MAAMM,MAAMO,QAAQnB,EAAKM,MAAMnF,KAAM,OAnEnC6E,EAuEjCoB,OAAS,WACPpB,EAAKtH,MAAMqI,aACT,CAACC,MAAOhB,EAAKM,MAAMnF,KAAO,IAAMuF,EAAQW,SAASrB,EAAKM,MAAMM,OAAOO,QAAQnB,EAAKM,MAAMnF,KAAM,OAvE9F,IAAM2F,EAAMJ,EAAQG,2BAA2BnI,EAAM+E,KAAKuD,OAF3B,OAG/BhB,EAAKM,MAAQ,CACXM,MAAOE,EAAIA,IACXjB,SAAS,EACT1E,KAAM2F,EAAI3F,MANmB6E,wEAsF/B,OACEpH,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAACwI,EAAD,CAAQzB,QAAST,KAAKkB,MAAMT,WAE9BjH,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAACyI,EAAD,CACEtI,UAAU,eACVN,SAAUyG,KAAKkB,MAAMnF,KACrBb,SAAU8E,KAAK1D,cAEnB9C,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAACyD,EAAD,CACEtD,UAAU,eACV0B,QAASyE,KAAKgC,OACd9H,YAAa8F,KAAKkB,MAAMT,QACxBpF,WAAW,GACX7B,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CAAiBC,KAAM+E,IAASrI,KAAK,SAGzCP,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAAC2I,EAAD,CACExI,UAAU,eACVgG,QAASyB,EAAQW,SAASjC,KAAKkB,MAAMM,WAG3ChI,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAC4I,EAAD,CACE1G,aAAa,EACbqF,eAAgBjB,KAAKuB,cACrBgB,IAAI,YACJvI,MAAO,CACLwI,WAAU,QAAA7H,OAAU8H,WAAV,0BACVC,qBAAsB,QACtBC,iBAAkB,YAClBC,gBAAiB,UACjBC,MAAO,WAETvI,MAAO0F,KAAKkB,MAAMM,+DAlH1BE,GAEA,IAAMoB,EAAMC,YAAMrB,GAEZ3F,EAD+B+G,EAAIE,YAAY,GACpCC,UACjB,MAAO,CACLvB,IAAKwB,YAAMJ,GACX/G,yDAI4BoH,EAAwBjC,GACtD,GAAIiC,EAAS9E,KAAKuD,QAAUV,EAAMM,QAAUN,EAAMT,QAChD,OAAOS,EAET,IACE,IAAMQ,EAAMJ,EAAQG,2BAA2B0B,EAAS9E,KAAKuD,OAC7D,MAAO,CACLJ,MAAO2B,EAAS9E,KAAKuD,MACrBnB,SAAS,EACT1E,KAAM2F,EAAI3F,MAGZ,MAAOf,GACP,OAAOkG,oCA0CKQ,GACd,IACE,OAAOwB,YAAMH,YAAMrB,IACnB,MAAOI,GACP,OAAOJ,UAnFwBP,IAAMiC,ecNtBC,qBAEnB,SAAAA,EAAY/J,GAAkB,IAAAsH,EAAA,OAAAzF,OAAA0F,EAAA,EAAA1F,CAAA6E,KAAAqD,IAC5BzC,EAAAzF,OAAA2F,EAAA,EAAA3F,CAAA6E,KAAA7E,OAAA4F,EAAA,EAAA5F,CAAAkI,GAAArC,KAAAhB,KAAM1G,KAsCRgK,WAAa,SAAChJ,GACZsG,EAAKiB,SAAS,CACZL,MAAOlH,EACPiJ,UAAU,IAEZ,IACE,IAAMC,EAASC,KAAKV,MAAMzI,GAC1BsG,EAAKtH,MAAMqI,aAAa6B,GACxB,MAAO1B,MA/CmBlB,EAqD9BoB,OAAS,WACP,IACEpB,EAAKiB,SAAS,CACZL,MAAOiC,KAAKC,UAAUD,KAAKV,MAAMnC,EAAKM,MAAMM,OAAQ,KAAM,GAC1D+B,UAAU,IAEZ,MAAOzB,GACP,SA1DFlB,EAAKM,MAAQ,CACXM,MAAOiC,KAAKC,UAAUpK,EAAM+E,KAAM,KAAM,GACxCkF,UAAU,GAJgB3C,wEAiE5B,OACEpH,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAACwI,EAAD,CACErI,UAAU,eACV4G,SAAUT,KAAKkB,MAAMqC,YAEzB/J,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACbL,EAAAC,EAAAC,cAACyD,EAAD,CACEtD,UAAU,eACV0B,QAASyE,KAAKgC,OACd3G,WAAW,GACX7B,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CAAiBC,KAAM+E,IAASrI,KAAK,SAGzCP,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACbL,EAAAC,EAAAC,cAAC2I,EAAD,CACExI,UAAU,eACVgG,QAASG,KAAKkB,MAAMM,UAG1BhI,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAC4I,EAAD,CACE1G,aAAa,EACbV,SAAU8E,KAAKsD,WACftJ,MAAO,CACLwI,WAAU,QAAA7H,OAAU8H,WAAV,0BACVC,qBAAsB,QACtBC,iBAAkB,YAClBC,gBAAiB,UACjBC,MAAO,WAETvI,MAAO0F,KAAKkB,MAAMM,6DAlFI2B,EAAqBjC,GACnD,IAAIM,EAAQN,EAAMM,MACd+B,EAAWrC,EAAMqC,SACrB,GAAKrC,EAAMqC,UAAYE,KAAKC,UAAUP,EAAS9E,QAAUoF,KAAKC,UAAUD,KAAKV,MAAM7B,EAAMM,QAIvF,IACEiC,KAAKV,MAAMvB,GACX+B,GAAW,EACX,MAAMzB,SANRN,EAAQiC,KAAKC,UAAUP,EAAS9E,KAAM,KAAM,GAC5CkF,GAAW,EAOb,MAAO,CACL/B,QACA+B,mBAhC4BpC,IAAMiC,gBCCzBO,SAjB0C,SAACrK,GAQxD,OACEE,EAAAC,EAAAC,cAACqB,EAAD,CACElB,WAAYP,EAAMO,WAAa,IAAM,YACrCQ,SAVmB,SACrBW,GAEA,IAAMV,EAAkBU,EAAEC,OAAOX,MACjChB,EAAM4B,SAASZ,IAObf,SAAUD,EAAMC,SAChBgB,OAAQY,OAAOZ,OAAOvB,OCkDb4K,SA/CkC,SAACtK,GAmBhD,OACEE,EAAAC,EAAAC,cAAA,OAAKG,WAAYP,EAAMO,WAAa,IAAO,SACzCL,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBAEbP,EAAM+E,KAAKtC,OAAS/C,EAASyK,MACvBjK,EAAAC,EAAAC,cAACmK,EAAD,CAAMxF,KAAM/E,EAAM+E,KAAKA,KAAKyF,KAAMnC,aAnBzB,SAACrH,GACtB,IAAM+D,EAAO/E,EAAM+E,KACnBA,EAAKA,KAAKyF,KAAOxJ,EACjBhB,EAAMyK,WAAW1F,MAmBX/E,EAAM+E,KAAKtC,OAAS/C,EAASgL,KACvBxK,EAAAC,EAAAC,cAACuK,EAAD,CACF5F,KAAM/E,EAAM+E,KAAKA,KAAK6F,QACtBvC,aAnBc,SAACrH,GACzB,IAAM+D,EAAO/E,EAAM+E,KACnBA,EAAKA,KAAK6F,QAAU5J,EACpBhB,EAAMyK,WAAW1F,QAoBf7E,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACbL,EAAAC,EAAAC,cAACyK,EAAD,CACEtK,UAAU,eACVN,SAAUD,EAAM+E,KAAKtC,KACrBb,SAxCS,SAACZ,GAClB,IAAM+D,EAAO/E,EAAM+E,KACnBA,EAAKtC,KAAOzB,EACZhB,EAAMyK,WAAW1F,WCjBN+F,SATwC,SAAC9K,GACtD,OACEE,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WACbL,EAAAC,EAAAC,cAAA,OAAK2K,IAAK/K,EAAMgL,SAAUC,IAAI,oBCoBrBZ,SAjB0C,SAACrK,GAQxD,OACEE,EAAAC,EAAAC,cAACqB,EAAD,CACElB,WAAYP,EAAMO,WAAa,IAAM,YACrCQ,SAVmB,SACrBW,GAEA,IAAMV,EAAoBU,EAAEC,OAAOX,MACnChB,EAAM4B,SAASZ,IAObf,SAAUD,EAAMC,SAChBgB,OAAQY,OAAOZ,OAAOtB,OClBfuL,EAAmB,SAAC7F,GAAD,OAC7B,CAAC7F,EAAY2L,IAAK3L,EAAY4L,MAC5BxH,SAASyB,IAGDgG,EAAQ,uCAERC,EAAQ,CACnBC,IAAK,2FACLC,WAAY,qDACZC,WAAY,2BAEZC,SAAU,oCACVC,kBAAmB,WACnBC,SAAU,uDACVC,QAAS,YACTC,cAAe,eACfC,eAAgB,OAChBC,OAAO,YACPC,qBAAsB,gBA0BXC,EAAgB,SAACC,GAAD,OAC3BtK,OACCZ,OAAOzB,GACPoE,SAASuI,IAGCC,GAAa,SAAC3H,EAAgBC,GACzC,IAAM6G,EAAM9G,GAC6B,MAAnCA,EAAO4H,OAAO5H,EAAOrB,OAAO,IAAqC,MAAvBsB,EAAS2H,OAAO,GAC1D,IACA,IACF3H,EAEE4H,EAAWf,EAAKgB,MAAMjB,EAAMC,KAClC,SAASe,GAAWA,EAAQ,KAAOf,IAGxBiB,GAAiB,SAACxH,GAC7B,IAAMyH,EAAQ5K,OAAOZ,OAAOxB,GAC5B,OAAOuF,EAAQ0H,OACb,SAAClE,EAAYmE,GACX,OAAOF,EAAM7I,SAAS+I,EAAKlK,QAE7B,IAaSmK,GAAuB,SAACxE,GACnC,IAEE,OADAqB,YAAMrB,IACC,EACP,MAAOI,GACP,OAAO,IAIEqE,GAAkB,SAAC7L,GAC9B,OAAQ8L,MAAMpJ,SAAS1C,KAGZ+L,GAAgB,SAAC/L,GAC5B,OAAQ8L,MAAME,KAAKvD,MAAMzI,EAAMyH,QAAQ6C,EAAMK,kBAAmB,QAGrDsB,GAAwB,SAACjM,GAEpC,MADkB,CAAC,OAAQ,QAAS,OAAQ,MAAO,aACjC4C,SAAS5C,EAAMkM,gBAGtBC,GAAe,SAACnM,GAC3B,QAASA,EAAMyH,QAAQ6C,EAAMU,OAAQ,IAAIO,MAAMjB,EAAMC,MC5DlC6B,sBAEnB,SAAAA,EAAYpN,GAAkB,IAAAsH,EAAA,OAAAzF,OAAA0F,EAAA,EAAA1F,CAAA6E,KAAA0G,IAC5B9F,EAAAzF,OAAA2F,EAAA,EAAA3F,CAAA6E,KAAA7E,OAAA4F,EAAA,EAAA5F,CAAAuL,GAAA1F,KAAAhB,KAAM1G,KAiHRqN,eAAiB,SAACrM,GAEhB,IAAMsM,EAAShG,EAAKtH,MAAMsN,OACpBvI,EAAOuC,EAAKtH,MAAM+E,KAEpBwI,GAAe,EACfC,GAAa,EAKXnI,EAASiC,EAAKmG,UAAUzM,GAGxBgE,EAAUsC,EAAKoG,WAAW1M,GAG1B2M,EAAUrG,EAAKsG,QAAQ5M,GAGvB6M,EAAoBvG,EAAKwG,qBAAqB9M,GAgBpD,GAbEqE,GACGA,IAAWiI,EAAOjI,QAClBxD,OAAOZ,OAAOzB,GAAaoE,SAASyB,KAEvCkI,GAAe,EACfD,EAAOjI,OAASA,GAIdL,IACFuI,GAAe,EACfD,EAAOtI,QAAUA,GAEf2I,GAAWxD,KAAKC,UAAUuD,KAAaxD,KAAKC,UAAUrF,EAAKA,KAAKA,EAAKtC,OAEvE,OADA+K,GAAa,EACLzI,EAAKtC,MACX,KAAK/C,EAASgL,IACZ3F,EAAKA,KAAK6F,QAAQtC,MAAQqF,EAAQrF,MAClC,MACF,KAAK5I,EAASyK,KACZpF,EAAKA,KAAKyF,KAAOmD,EACjB,MACF,KAAKjO,EAASqO,MAelB,OAXIF,IACEA,EAAkBpJ,QAAUoJ,EAAkBpJ,SAAW6I,EAAO7I,SAClE8I,GAAe,EACfD,EAAO7I,OAASoJ,EAAkBpJ,QAEhCoJ,EAAkBnJ,UAAYmJ,EAAkBnJ,WAAa4I,EAAO5I,WACtE6I,GAAe,EACfD,EAAO5I,SAAWmJ,EAAkBnJ,WAIjC,CACL4I,SACAvI,OACAwI,eACAC,eAlL0BlG,EA2L9B0G,WAAa,SAAChN,GACZ,IAAMiN,EAAO3G,EAAK+F,eAAerM,IAE7BiN,EAAKT,YAAcS,EAAKV,eAC1BjG,EAAKiB,SAAS,CAACL,MAAOlH,EAAOiJ,UAAU,GAAQ,WAC7CgE,EAAKT,YAAclG,EAAKtH,MAAMyK,WAAWwD,EAAKlJ,MAC9CkJ,EAAKV,cAAgBjG,EAAKtH,MAAMkF,aAAa+I,EAAKX,UAGjDW,EAAKT,YAAeS,EAAKV,cAC5BjG,EAAKiB,SAAS,CAACL,MAAOlH,EAAOiJ,UAAU,KAnMzC3C,EAAKM,MAAQ,CACXM,MAAOkF,EAAKc,SAASlO,EAAMsN,OAAQtN,EAAM+E,MACzCkF,UAAU,GAJgB3C,0EA2BnBtG,GAIT,IAHA,IAAMmN,EAAQC,EAAY5C,WACpBxG,EAAU,GACZuH,EAAQ,KACLA,EAAQ4B,EAAME,KAAKrN,IACxBgE,EAAQC,KAAK,CACXxC,KAAM8J,EAAM,GACZvL,MAAOuL,EAAM,KAGjB,OAAuB,IAAnBvH,EAAQ5B,OACH,KAEF4B,oCAUChE,GACR,IAAMmN,EAAQC,EAAY3C,WAC1B,IAAKzK,EAAMuL,MAAM4B,GACf,OAAO,KAET,IAAM5B,EAAQ4B,EAAME,KAAKrN,GACzB,OAAKuL,EAGEA,EAAM,GAFJ,qCAYHvL,GACN,IAAMmN,EAAQC,EAAY1C,SAC1B,IAAK1K,EAAMuL,MAAM4B,GACf,OAAO,KAET,IAAM5B,EAAQ4B,EAAME,KAAKrN,GACzB,IAAKuL,EACH,OAAO,KAET,IACE,OAAOpC,KAAKV,MAAM8C,EAAM,IACxB,MAAO/D,GACP,OAAO,mDAWUxH,GACnB,IAAMmN,EAAQC,EAAY7C,IAC1B,IAAKvK,EAAMuL,MAAM4B,GACf,OAAO,KAET,IAAM5B,EAAQ4B,EAAME,KAAKrN,GACzB,OAAKuL,EAGE,CACL9H,OAAQ8H,EAAM,IAAM,KACpB7H,SAAU6H,EAAM,IAAM,MAJf,sCAgJT,OACErM,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAACwI,EAAD,CACErI,UAAU,eACV4G,SAAUT,KAAKkB,MAAMqC,YAEzB/J,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBAEjBL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACbL,EAAAC,EAAAC,cAAC2I,EAAD,CACExI,UAAU,eACVgG,QAASG,KAAKkB,MAAMM,UAG1BhI,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAC4I,EAAD,CACE1G,aAAa,EACbV,SAAU8E,KAAKsH,WACftN,MAAO,CACLwI,WAAU,QAAA7H,OAAU8H,WAAV,0BACVC,qBAAsB,QACtBC,iBAAkB,YAClBC,gBAAiB,UACjBC,MAAO,WAETvI,MAAO0F,KAAKkB,MAAMM,6DAtQI2B,EAAqBjC,GACnD,IAAMM,EAASN,EAAMqC,SACjBrC,EAAMM,MACNkF,EAAKc,SAASrE,EAASyD,OAAQzD,EAAS9E,MAE5C,MAAO,CACLkF,SAAUrC,EAAMqC,SAChB/B,0CAgMFoF,EACAvI,GAEA,IAAIuJ,EAAU,GACd,OAAQvJ,EAAKtC,MACX,KAAK/C,EAASyK,KACZmE,EAAUvJ,EAAKA,KAAKyF,KACpB,MACF,KAAK9K,EAASgL,IACZ4D,EAAUvJ,EAAKA,KAAK6F,QACpB,MACF,KAAKlL,EAASqO,MAIhB,MAAO,WAAaT,EAAOjI,OAAS,SAC9BiI,EAAOtI,QAAQ9D,IAAI,SAAA+B,GAAM,MAAI,OAAUA,EAAOR,KAAO,KAAOQ,EAAOjC,MAAQ,YAAYuN,KAAK,KAC3FD,GAAWzM,OAAO2M,KAAKF,GAASlL,OAAS,GAAKgL,EAAuBd,EAAOjI,QAC5E,OAAS+H,EAAKqB,mBAAmBtE,KAAKC,UAAUkE,IAAY,UAAY,IAC1EhB,EAAO7I,OAAS6I,EAAO5I,oDAQJ1D,GACxB,OAAOA,EACJyH,QAAQ2F,EAAYtC,cAAe,IACnCrD,QAAQ2F,EAAYrC,eAAgB,KACpCtD,QAAQ2F,EAAYnC,qBAAsB,WAjPfpE,IAAMC,YCCzB4G,UAjCsC,SAAC1O,GAKpD,OACEE,EAAAC,EAAAC,cAAA,OAAKG,WAAYP,EAAMO,WAAa,IAAO,WACzCL,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBAEVP,EAAM2O,SAAWhP,EAAWiP,MAC3B1O,EAAAC,EAAAC,cAACyO,GAAD,CACEvB,OAAQtN,EAAMsN,OACdvI,KAAM/E,EAAM+E,KACZG,aAAclF,EAAMkF,aACpBuF,WAAYzK,EAAMyK,eAK5BvK,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACfL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACbL,EAAAC,EAAAC,cAAC0O,EAAD,CACEvO,UAAU,eACVN,SAAUD,EAAM2O,OAChB/M,SAzBW,SAAC4G,YCyBPuG,GAzB0C,SAAC/O,GAExD,IAIMM,EAAQN,EAAM4C,UAChB5C,EAAMgP,gBAAkBhP,EAAMM,MAC9BN,EAAMiP,mBAAqBjP,EAAMM,MAErC,OACEJ,EAAAC,EAAAC,cAAA,OAAKG,UAAWP,EAAMO,WAAa,IACjCL,EAAAC,EAAAC,cAAC0C,EAAD,CACEL,KAAM7C,EAAWsP,SACjBtM,UAAW5C,EAAM4C,UACjBhC,WAAYZ,EAAMY,aAAc,EAChCJ,KAAMR,EAAMQ,MAAQ,GACpBwB,GAAIhC,EAAMgC,IAAM,GAChBjB,SAhBW,SAACW,GAChB1B,EAAMe,SAASW,EAAEC,OAAOgB,UAgBpB3B,MAAOhB,EAAMgB,OAAS,KACxBd,EAAAC,EAAAC,cAAA,gBAAQE,EAAR,OCXS6O,GApBwC,SAACnP,GAEtD,OACEE,EAAAC,EAAAC,cAAA,OAAKG,UAAWP,EAAMO,WAAa,IACjCL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACfL,EAAAC,EAAAC,cAACyD,EAAD,CACEtD,UAAU,eACVwB,WAAW,EACXzB,OAAUN,EAAMoP,UAAsB,QAAV,SAAqBpP,EAAMM,MACvD2B,QAASjC,EAAMqP,YAGfrP,EAAMoP,WACJlP,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OAAOP,EAAMoC,YCGvBkN,UAbsC,SAACtP,GACpD,IAAMuP,EAAQvP,EAAMuG,QAAQhD,MAAM,MAElC,OACErD,EAAAC,EAAAC,cAAA,OAAKG,WAAYP,EAAMO,WAAa,IAAM,WACxCL,EAAAC,EAAAC,cAAA,cAAMJ,EAAMwP,QAAZ,KAEED,EAAMrO,IAAI,SAAAuO,GAAI,OAAKvP,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KAAGoP,EAAH,IAASvP,EAAAC,EAAAC,cAAA,iBCUfsP,sBAEnB,SAAAA,EAAY1P,GAAmB,IAAAsH,EAAA,OAAAzF,OAAA0F,EAAA,EAAA1F,CAAA6E,KAAAgJ,IAC7BpI,EAAAzF,OAAA2F,EAAA,EAAA3F,CAAA6E,KAAA7E,OAAA4F,EAAA,EAAA5F,CAAA6N,GAAAhI,KAAAhB,KAAM1G,KAMR2P,oBAAsB,WACpBrI,EAAKiB,SAAS,SAAAqH,GAAS,MAAK,CAC1BC,mBAAoBD,EAAUC,sBATHvI,EAa/BwI,iBAAmB,SAACpO,GAClB4F,EAAKtH,MAAM+P,cAAc,CACvBxE,IAAK7J,EAAEC,OAAOX,MACdgP,UAAW1I,EAAKtH,MAAMiQ,MAAMD,aAhBD1I,EAoB/B4I,qBAAuB,SAACF,GACtB1I,EAAKtH,MAAM+P,cAAc,CACvBxE,IAAKjE,EAAKtH,MAAMiQ,MAAM1E,IACtByE,eArBF1I,EAAKM,MAAQ,CACXiI,kBAAmB7P,EAAMmQ,YAHE7I,wEA6B7B,OACEpH,EAAAC,EAAAC,cAACgQ,GAAD,CACEhB,UAAW1I,KAAKkB,MAAMiI,kBACtBtP,UAAU,QACVD,MAAM,iBACN+O,SAAU3I,KAAKiJ,qBACfzP,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACiQ,GAAD,CACE9P,UAAU,8BACViP,QAAQ,iBACRjJ,QAAS,+EAAAlF,OACiB+M,EAAc,MACpC,oUAMRlO,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAC0C,EAAD,CACEvC,UAAU,2BACVK,YAAa8F,KAAK1G,MAAMiQ,MAAMD,UAC9BvN,KAAM7C,EAAW0E,IACjBvD,SAAU2F,KAAKoJ,iBACfQ,YAAY,YACZtP,MAAO0F,KAAK1G,MAAMiQ,MAAM1E,MAC1BrL,EAAAC,EAAAC,cAACmQ,GAAD,CACEhQ,UAAU,oCACVqC,UAAW8D,KAAK1G,MAAMiQ,MAAMD,UAC5BhB,eAAe,mBACfC,kBAAkB,uBAClBlO,SAAU2F,KAAKwJ,qBACflP,MAAM,mBA/DiB6G,IAAMiC,gBCI1B0G,gBAhBwC,SAACxQ,GAOtD,OACEE,EAAAC,EAAAC,cAACyD,EAAD,CACEtD,UAAWP,EAAMO,WAAa,GAC9BwB,UAAW/B,EAAM+B,YAAa,EAC9BzB,MAAON,EAAMM,MACb2B,QAVc,WACDwO,OAAOC,QAAQ1Q,EAAM2Q,SAC3B3Q,EAAM4Q,YAAc5Q,EAAM6Q,gBC2BxBC,GA/BwC,SAAC9Q,GACtD,IAAM4Q,EAAY5Q,EAAM+Q,UAIxB,OACE7Q,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WACbL,EAAAC,EAAAC,cAAC4Q,GAAD,CACEb,YAAanQ,EAAMiR,OACnBhB,MAAOjQ,EAAMiQ,MACbF,cAAe/P,EAAM+P,gBAErB/P,EAAMkR,cACFhR,EAAAC,EAAAC,cAAC+Q,GAAD,CACE5Q,UAAU,eACVD,MAAM,OACNsQ,UAAWA,EACXC,SAhBG,aAiBHF,QAAQ,kBACTzQ,EAAAC,EAAAC,cAACyD,EAAD,CACCtD,UAAU,eACVwB,WAAW,EACXzB,MAAM,OACN2B,QAASjC,EAAM+Q,eCgBhBK,UA1CoC,SAACpR,GAClD,GAA0B,IAAtBA,EAAM+E,KAAK3B,OACb,OAAOlD,EAAAC,EAAAC,cAAA,SAAOG,UAAWP,EAAMO,WAAa,KAG9C,IAAMyE,EAAUnD,OAAO2M,KAAKxO,EAAM+E,KAAK,IAEvC,OACE7E,EAAAC,EAAAC,cAAA,SAAOG,UAAWP,EAAMO,WAAa,IACnCL,EAAAC,EAAAC,cAAA,aAEI4E,EAAQ9D,IACN,SAAC+B,EAAgB9B,GAAjB,OACEjB,EAAAC,EAAAC,cAAA,MAAIgB,IAAG,UAAAC,OAAYF,IAAM8B,MAKjC/C,EAAAC,EAAAC,cAAA,aAGEJ,EAAM+E,KAAK7D,IACT,SAACmQ,EAAelQ,GAAhB,OACEjB,EAAAC,EAAAC,cAAA,MAAIgB,IAAG,MAAAC,OAAQF,IAEX6D,EAAQ9D,IACN,SAAC+B,EAAgBqO,GAAjB,OACEpR,EAAAC,EAAAC,cAAA,MAAIgB,IAAG,MAAAC,OAAQF,EAAR,KAAAE,OAAaiQ,GAAKC,aAAYtO,GAClCoO,EAAIpO,aCxBNuO,sBAGnB,SAAAA,EAAYxR,GAA6B,IAAAsH,EAAA,OAAAzF,OAAA0F,EAAA,EAAA1F,CAAA6E,KAAA8K,IACvClK,EAAAzF,OAAA2F,EAAA,EAAA3F,CAAA6E,KAAA7E,OAAA4F,EAAA,EAAA5F,CAAA2P,GAAA9J,KAAAhB,KAAM1G,KAMRyJ,MAAQ,SAACzI,GAEP,OAAIoN,GAAsBpN,GAChBd,EAAAC,EAAAC,cAAA,QAAMG,UAAU,8BAA8BS,GAEpDoN,GAAoBpN,GACdd,EAAAC,EAAAC,cAAA,QAAMG,UAAU,4BAA4BS,GAElDoN,GAAmBpN,GAEnBd,EAAAC,EAAAC,cAAA,QAAMG,UAAU,2BACdL,EAAAC,EAAAC,cAAA,KAAGqR,KAAMzQ,GAAQA,IAInBoN,GAA4BpN,GACtBd,EAAAC,EAAAC,cAAA,QAAMG,UAAU,+BAA+BS,GAElDd,EAAAC,EAAAC,cAAA,QAAMG,UAAU,8BAA8BS,IAzBdsG,EA4BzCoK,cAAgB,WACdpK,EAAKiB,SAAS,SAAAqH,GAAS,MAAK,CAC1B+B,aAAc/B,EAAU+B,gBA5B1BrK,EAAKM,MAAQ,CACX+J,aAAa,GAHwBrK,wEAkChC,IAAAsK,EAAAlL,KAEP,OACExG,EAAAC,EAAAC,cAACgQ,GAAD,CACEhB,UAAW1I,KAAKkB,MAAM+J,YACtBpR,UAAU,kBACVD,MAAM,UACN+O,SAAU3I,KAAKgL,eACfxR,EAAAC,EAAAC,cAACyR,GAAD,CACEtR,UAAU,wCACVwE,KACE+M,MAAMC,KAAKrL,KAAK1G,MAAMgF,QAAQwJ,QAAQtN,IACpC,SAAAE,GAAG,MAAK,CACN4Q,OAAQJ,EAAKnI,MAAMrI,GACnByB,MAAO+O,EAAKnI,MAAMmI,EAAK5R,MAAMgF,QAAQiN,IAAI7Q,IAAQ,iBAnDpByG,IAAMiC,oCCE9BoI,sBAInB,SAAAA,EAAYlS,GAA0B,IAAAsH,EAAA,OAAAzF,OAAA0F,EAAA,EAAA1F,CAAA6E,KAAAwL,IACpC5K,EAAAzF,OAAA2F,EAAA,EAAA3F,CAAA6E,KAAA7E,OAAA4F,EAAA,EAAA5F,CAAAqQ,GAAAxK,KAAAhB,KAAM1G,KAMRmS,WAAa,WACX7K,EAAKiB,SAAS,SAAAqH,GAAS,MAAK,CAC1BwC,UAAWxC,EAAUwC,aATa9K,EAatC+K,SAAW,SAAC7J,EAAW8J,EAAYC,EAAYC,EAAYC,GACzD,IAAMC,EAAO,CAAEC,OAAQL,EAAIlR,IAAKmR,EAAIvR,MAAOwR,EAAII,IAAKH,GAEhDI,EAAa,aACbpQ,EAAO3C,EAAegT,OAmB1B,YAlBmBrP,IAAfiP,EAAK1R,OAAsC,OAAf0R,EAAK1R,QAC/BoN,GAAsBsE,EAAK1R,QAC7B6R,EAAa,cACbpQ,EAAO3C,EAAeiT,QACb3E,GAAoBsE,EAAK1R,QAClC6R,EAAa,YACbpQ,EAAO3C,EAAekT,MACb5E,GAA4BsE,EAAK1R,QAC1C6R,EAAa,eACbpQ,EAAO3C,EAAemT,SACb7E,GAAmBsE,EAAK1R,QACjC6R,EAAa,WACbpQ,EAAO3C,EAAewE,MAEtBuO,EAAa,cACbpQ,EAAO3C,EAAegT,SAGnBI,KAAeC,eACpBjT,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACG,OAAS+S,OAAOV,EAAKC,OAAOvP,QAC5BsP,EAAKtR,KAAOlB,EAAAC,EAAAC,cAAA,QAAMG,UAAU,YAAhB,IAA6BmS,EAAKtR,IAAlC,KAEXsR,EAAK1R,OAEHd,EAAAC,EAAAC,cAAA,QAAMG,UAAWsS,GAEbpQ,IAAS3C,EAAewE,IAEpBpE,EAAAC,EAAAC,cAAA,KAAGqR,KAAMiB,EAAK1R,MAAMyH,QAAQ2F,EAAYpC,OAAQ,KAC7C0G,EAAK1R,OAGR0R,EAAK1R,OAIhB0R,EAAKE,KAAO1S,EAAAC,EAAAC,cAAA,QAAMG,UAAU,YAAhB,IAA6BmS,EAAKE,IAAlC,KACb1S,EAAAC,EAAAC,cAAA,cAtDJkH,EAAKM,MAAQ,CACXwK,UAAU,GAHwB9K,wEA8DpC,OACEpH,EAAAC,EAAAC,cAACgQ,GAAD,CACEhB,UAAW1I,KAAKkB,MAAMwK,SACtB9R,MAAM,OACN+O,SAAU3I,KAAKyL,YACfjS,EAAAC,EAAAC,cAAA,OACEG,UAAU,eACV8S,wBAAyB,CAACC,OACxBnJ,KAAKC,UAAU1D,KAAK1G,MAAM+E,KAAM,KAAM,GACnC0D,QACC2F,EAAYxC,SACZlF,KAAK2L,qBA7EqBxK,IAAMiC,gBCL3ByJ,sBAInB,SAAAA,EAAYvT,GAAyB,IAAAsH,EAAA,OAAAzF,OAAA0F,EAAA,EAAA1F,CAAA6E,KAAA6M,IACnCjM,EAAAzF,OAAA2F,EAAA,EAAA3F,CAAA6E,KAAA7E,OAAA4F,EAAA,EAAA5F,CAAA0R,GAAA7L,KAAAhB,KAAM1G,KAMRwT,UAAY,WACVlM,EAAKiB,SAAS,SAAAqH,GAAS,MAAK,CAC1B6D,SAAU7D,EAAU6D,YAPtBnM,EAAKM,MAAQ,CACX6L,SAAS,GAHwBnM,wEAcnC,OACEpH,EAAAC,EAAAC,cAACgQ,GAAD,CACEhB,UAAW1I,KAAKkB,MAAM6L,QACtBnT,MAAM,MACN+O,SAAU3I,KAAK8M,WACbtT,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACZmG,KAAK1G,MAAM+E,cAxBiB8C,IAAMiC,gBCUhC4J,UAfoD,SAAC1T,GAClE,IAAIwK,EAAO,GACX,IACEA,EAAOL,KAAKV,MAAMzJ,EAAM+E,MACxB,MAAOyD,IAET,OACEtI,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACbL,EAAAC,EAAAC,cAACuT,GAAD,CAAiB3O,QAAShF,EAAMgF,UAChC9E,EAAAC,EAAAC,cAACwT,GAAD,CAAa7O,KAAM/E,EAAM+E,OACzB7E,EAAAC,EAAAC,cAACyT,GAAD,CAAc9O,KAAMyF,OCFXsJ,UAbwC,SAAC9T,GACtD,OACEE,EAAAC,EAAAC,cAAA,OAAKG,WAAYP,EAAMO,WAAa,IAAM,qBACxCL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WACbL,EAAAC,EAAAC,cAAA,aAEFF,EAAAC,EAAAC,cAAA,yBC0KS2T,sBA7Ib,SAAAA,EAAY/T,GAAkB,IAAAsH,EAAA,OAAAzF,OAAA0F,EAAA,EAAA1F,CAAA6E,KAAAqN,IAC5BzM,EAAAzF,OAAA2F,EAAA,EAAA3F,CAAA6E,KAAA7E,OAAA4F,EAAA,EAAA5F,CAAAkS,GAAArM,KAAAhB,KAAM1G,KAHRgU,eAE8B,EAAA1M,EAoB9B2M,eAAiB,WACf,IAAMC,EAAc5M,EAAKtH,MAAMsN,OAAO7I,OAAS6C,EAAKtH,MAAMsN,OAAO5I,SACjE,OAAO4C,EAAKtH,MAAMiQ,MAAMD,UACpB1I,EAAKtH,MAAMiQ,MAAM1E,IAAM2I,EACvBA,GAxBwB5M,EA2B9B6M,aAAe,WACb,IAAMC,EAAyB,CAC7B/O,OAAQiC,EAAKtH,MAAMsN,OAAOjI,OAC1BgP,KAAM,KACNrP,QAAS,IAAIjC,QACXuE,EAAKtH,MAAMsN,OAAOtI,QAAQ9D,IAAI,SAAA+B,GAAM,MAAI,CAACA,EAAOR,KAAMQ,EAAOjC,WAOjE,OAHIoN,EAAuB9G,EAAKtH,MAAMsN,OAAOjI,UAC3C+O,EAAUC,KAAOlK,KAAKC,UAAU9C,EAAKtH,MAAM+E,KAAKA,KAAKuC,EAAKtH,MAAM+E,KAAKtC,QAEhE2R,GAvCqB9M,EA0C9BgN,OA1C8BzS,OAAA+D,EAAA,EAAA/D,CAAAgE,EAAA1F,EAAA2F,KA0CrB,SAAAyO,IAAA,OAAA1O,EAAA1F,EAAA6F,KAAA,SAAAwO,GAAA,cAAAA,EAAAtO,KAAAsO,EAAArO,MAAA,OACPmB,EAAKiB,SACH,CACEkM,WAAW,EACXxD,QAAQ,EACRyD,SAAU,IAJd7S,OAAA+D,EAAA,EAAA/D,CAAAgE,EAAA1F,EAAA2F,KAME,SAAAC,IAAA,IAAA4O,EAAA5P,EAAA2P,EAAA,OAAA7O,EAAA1F,EAAA6F,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAEMwO,EAAO,IAAIrQ,IAAIgD,EAAK2M,kBACtBlP,EAAO,KACP2P,EAA4B,KAJhCzO,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAMmByO,MACfD,EAAKlD,KACLnK,EAAK6M,gBART,cAMEO,EANFzO,EAAA4O,KAAA5O,EAAAE,KAAA,EAUeuO,EAASI,OAVxB,OAUE/P,EAVFkB,EAAA4O,KAWEvN,EAAKiB,SAAS,CACZkM,WAAW,EACXC,SAAU,CACR1P,QAAS0P,EAAS1P,QAClBD,UAfNkB,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAA8O,GAAA9O,EAAA,SAmBEqB,EAAKiB,SAAS,CACZkM,WAAW,IApBf,yBAAAxO,EAAAO,SAAAT,EAAA,mBAPK,wBAAAyO,EAAAhO,SAAA+N,MAxCPjN,EAAKM,MAAQ,CAEX6M,WAAW,EAEXxD,QAAQ,EAERyD,SAAU,IAEZpN,EAAK0M,UAAY1M,EAAKM,MAVMN,kFAaX0N,GfVU,IAC7BC,EACAC,EADAD,EeU4BD,EAAU/E,MfTtCiF,EeS6CxO,KAAK1G,MAAMiQ,OfPjDgF,EAAUjF,YAAckF,EAASlF,WACnCiF,EAAU1J,MAAQ2J,EAAS3J,MeO5B7E,KAAK6B,SAAS7B,KAAKsN,4CA6DrB,IAAKtN,KAAK1G,MAAMmV,WAAWC,QACzB,OACElV,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBAEXmG,KAAK1G,MAAMmV,WAAWxE,QAAQzP,IAC5B,SAACiL,EAAQkJ,GAAT,OACEnV,EAAAC,EAAAC,cAAA,SAAOgB,IAAG,cAAAC,OAAgBgU,IAA1B,IAAmClJ,EAAnC,SAQd,GAAIzF,KAAKkB,MAAM6M,UACb,OACEvU,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACkV,GAAD,OAKN,IAAMC,EAAY,GAAAlU,OAAMqF,KAAK1G,MAAMiQ,MAAMD,UAAY,gBAAkB,GAArD,QAAA3O,OAA8DqF,KAAKuN,kBAErF,OACE/T,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAACoV,GAAD,CACEvE,OAAQvK,KAAKkB,MAAMqJ,OACnBhB,MAAOvJ,KAAK1G,MAAMiQ,MAClBF,cAAerJ,KAAK1G,MAAMyV,YAC1BvE,eAAe,EACfH,UAAWrK,KAAK4N,SAEhB5N,KAAKkB,MAAMqJ,SACTvK,KAAKkB,MAAM8M,SAAS1P,SAAW0B,KAAKkB,MAAM8M,SAAS3P,KAE/C7E,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACiQ,GAAD,CACE9P,UAAU,8BACViP,QAAQ,mBACRjJ,QAAO,gBAAAlF,OAAkBkU,MAE7BrV,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACsV,GAAD,CACE1Q,QAAS0B,KAAKkB,MAAM8M,SAAS1P,QAC7BD,KAAM2B,KAAKkB,MAAM8M,SAAS3P,SAIhC7E,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACiQ,GAAD,CACE9P,UAAU,8BACViP,QAAQ,iBACRjJ,QAAO,4BAAAlF,OAA8BkU,eAvItC1N,IAAMiC,gBCPJ6L,sBAoBnB,SAAAA,EAAY3V,GAAiB,IAAAsH,EAAA,OAAAzF,OAAA0F,EAAA,EAAA1F,CAAA6E,KAAAiP,IAC3BrO,EAAAzF,OAAA2F,EAAA,EAAA3F,CAAA6E,KAAA7E,OAAA4F,EAAA,EAAA5F,CAAA8T,GAAAjO,KAAAhB,KAAM1G,KAnBR4V,eAAiB,SAACtI,GAChBhG,EAAKiB,SAAS,CACZ+E,UACC,kBAAMhG,EAAKiB,SAAS,CAAC4M,WAAY7N,EAAKuO,uBAedvO,EAZ7BwO,aAAe,SAAC/Q,GACduC,EAAKiB,SAAS,CACZxD,QACC,kBAAMuC,EAAKiB,SAAS,CAAC4M,WAAY7N,EAAKuO,uBASdvO,EAN7ByI,cAAgB,SAACE,GACf3I,EAAKiB,SAAS,CACZ0H,WAIyB3I,EA+B7BuO,gBAAkB,WAChB,IAAME,EAAS,CACbpF,QAAS,GACTyE,SAAS,GAgCX,OA9BKhH,EAAoB9G,EAAKM,MAAM0F,OAAOjI,UACzC0Q,EAAOpF,QAAQ1L,KAAf,WAAA5D,OACaiG,EAAKM,MAAM0F,OAAOjI,OAD/B,2BAGA0Q,EAAOX,SAAU,GAEdhH,GAAqB9G,EAAKM,MAAM0F,OAAOtI,WAC1C+Q,EAAOpF,QAAQ1L,KAAf,yCAGA8Q,EAAOX,SAAU,GAEdhH,GACH9G,EAAKM,MAAM0F,OAAO7I,OAClB6C,EAAKM,MAAM0F,OAAO5I,YAElBqR,EAAOpF,QAAQ1L,KAAf,eAAA5D,OACiBiG,EAAKM,MAAM0F,OAAO7I,OADnC,QAAApD,OACgDiG,EAAKM,MAAM0F,OAAO5I,SADlE,2BAGAqR,EAAOX,SAAU,GAIjB9N,EAAKM,MAAM7C,KAAKtC,OAAS/C,EAASgL,KAC9B0D,GAA2B9G,EAAKM,MAAM7C,KAAKA,KAAK6F,QAAQtC,SAC1DyN,EAAOpF,QAAQ1L,KAAf,gDAGA8Q,EAAOX,SAAU,GAEdW,GAhEPzO,EAAKM,MAAQ,CACX0F,OAAQ,CACNjI,OAAQ7F,EAAY2L,IACpBnG,QAAS,GACTP,OAAQ,yBACRC,SAAU,kBAEZK,KAAM,CACJtC,KAAM/C,EAASyK,KACfpF,KAAM,CACJyF,KAAM,CAACwL,KAAM,SACbpL,QAAS,CAACtC,MAAO,6BACjB2N,KAAM,OAGVtH,OAAQ,CACNlM,KAAM9C,EAAWiP,MAEnBqB,MAAO,CACL1E,IAAK6C,EACL4B,WAAW,GAEbmF,WAAY,CACVxE,QAAS,GACTyE,SAAS,IA1Bc9N,wEAwE3B,IAAM4O,EAAW9H,EAAuB1H,KAAKkB,MAAM0F,OAAOjI,QAC1D,OACEnF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAC+V,EAAD,CAASnL,SAAU7B,gCAErBjJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACgW,EAAD,CACErR,KAAM2B,KAAKkB,MAAM0F,OACjBpI,aAAcwB,KAAKkP,kBAEvB1V,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OAEX2V,GACAhW,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAACiW,EAAD,CACE9V,UAAU,eACVwE,KAAM2B,KAAKkB,MAAM7C,KACjB0F,WAAY/D,KAAKoP,gBAGvB5V,EAAAC,EAAAC,cAAA,OAAKG,WAAY2V,EAAW,MAAQ,UAAY,YAC9ChW,EAAAC,EAAAC,cAACkW,GAAD,CACE/V,UAAU,eACV+M,OAAQ5G,KAAKkB,MAAM0F,OACnBvI,KAAM2B,KAAKkB,MAAM7C,KACjB4J,OAAQjI,KAAKkB,MAAM+G,OAAOlM,KAC1ByC,aAAcwB,KAAKkP,eACnBnL,WAAY/D,KAAKoP,iBAGvB5V,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACmW,GAAD,CACEpB,WAAYzO,KAAKkB,MAAMuN,WACvB7H,OAAQ5G,KAAKkB,MAAM0F,OACnBvI,KAAM2B,KAAKkB,MAAM7C,KACjBkL,MAAOvJ,KAAKkB,MAAMqI,MAClB/K,aAAcwB,KAAKkP,eACnBnL,WAAY/D,KAAKoP,aACjBL,YAAa/O,KAAKqJ,yBAnIGlI,IAAMC,YCpBnB0O,QACW,cAA7B/F,OAAOgG,SAASC,UAEe,UAA7BjG,OAAOgG,SAASC,UAEhBjG,OAAOgG,SAASC,SAASnK,MACvB,2DCZNoK,IAASC,OAAO1W,EAAAC,EAAAC,cAACyW,GAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmB3Q,WACrBA,UAAU4Q,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.77f3794d.chunk.js","sourcesContent":["export enum HTTPMethods {\n  DELETE = \"DELETE\",\n  GET = \"GET\",\n  HEAD = \"HEAD\",\n  PATCH = \"PATCH\",\n  POST = \"POST\",\n  PUT = \"PUT\",\n};\n\nexport enum HTTPHeaders {\n  \"A-IM\" = \"A-IM\",\n  Accept = \"Accept\",\n  \"Accept-Charset\" = \"Accept-Charset\",\n  \"Accept-Datetime\" = \"Accept-Datetime\",\n  \"Accept-Encoding\" = \"Accept-Encoding\",\n  \"Accept-Language\" = \"Accept-Language\",\n  \"Access-Control-Request-Method\" = \"Access-Control-Request-Method\",\n  \"Access-Control-Request-Headers\" = \"Access-Control-Request-Headers\",\n  Authorization = \"Authorization\",\n  Authentication = \"Authentication\",\n  \"Cache-Control\" = \"Cache-Control\",\n  \"Content-Length\" = \"Content-Length\",\n  \"Content-MD5\" = \"Content-MD5\",\n  \"Content-Type\" = \"Content-Type\",\n  Cookie = \"Cookie\",\n  Date = \"Date\",\n  Expect = \"Expect\",\n  Forwarded = \"Forwarded\",\n  From = \"From\",\n  Host = \"Host\",\n  \"HTTP2-Settings\" = \"HTTP2-Settings\",\n  \"If-Match\" = \"If-Match\",\n  \"If-Modified-Since\" = \"If-Modified-Since\",\n  \"If-None-Match\" = \"If-None-Match\",\n  \"If-Range\" = \"If-Range\",\n  \"If-Unmodified-Since\" = \"If-Unmodified-Since\",\n  \"Max-Forwards\" = \"Max-Forwards\",\n  Pragma = \"Pragma\",\n  \"Proxy-Authorization\" = \"Proxy-Authorization\",\n  Range = \"Range\",\n  Referer = \"Referer\",\n  TE = \"TE\",\n  Upgrade = \"Upgrade\",\n  \"User-Agent\" = \"User-Agent\",\n  Via = \"Via\",\n  Warning = \"Warning\",\n}\n\nexport enum DataType {\n  FORM = \"form\",\n  JSON = \"json\",\n  GQL = \"graphQL\",\n}\n\nexport enum OutputType {\n  CURL = \"curl\",\n}\n\nexport enum InputTypes {\n  BUTTON = \"button\",\n  CHECKBOX = \"checkbox\",\n  COLOR = \"color\",\n  DATE = \"date\",\n  DATETIME_LOCAL = \"datetime-local\",\n  EMAIL = \"email\",\n  FILE = \"file\",\n  HIDDEN = \"hidden\",\n  IMAGE = \"image\",\n  MONTH = \"month\",\n  NUMBER = \"number\",\n  PASSWORD = \"password\",\n  RADIO = \"radio\",\n  RANGE = \"range\",\n  RESET = \"reset\",\n  SEARCH = \"search\",\n  SUBMIT = \"submit\",\n  TEL = \"tel\",\n  TEXT = \"text\",\n  TIME = \"time\",\n  URL = \"url\",\n  WEEK = \"week\",\n}\n\nexport enum ColumnCount {\n  ONE = 'one column',\n  TWO = 'two columns',\n  THREE = 'three columns',\n  FOUR = 'four columns',\n  FIVE = 'five columns',\n  SIX = 'six columns',\n  SEVEN = 'seven columns',\n  EIGHT = 'eight columns',\n  NINE = 'nine columns',\n  TEN =  'ten columns',\n  ELEVEN = 'eleven columns',\n  TWELVE = 'twelve columns',\n}\n\nexport enum JsonValueTypes {\n  NUMBER = 'number',\n  DATE = 'date',\n  BOOLEAN = 'boolean',\n  URL = 'url',\n  STRING = 'string',\n}\n","import React from 'react';\n\ninterface selectProps {\n  className?: string;\n  isDisabled?: boolean;\n  label?: string;\n  name?: string;\n  onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n  selected?: string | string[] | null;\n  style?: {[key: string]: string};\n  values: string[];\n  isMultiple?: boolean;\n  size?: number;\n}\n\nconst Select: React.FunctionComponent<selectProps> = (props) => {\n  const selected = props.selected || '';\n  return (\n    <>\n    { props.label && (<label>{props.label}</label>) }\n    <select\n      className={props.className || ''}\n      name={props.name || ''}\n      size={props.size || 0}\n      style={props.style || {}}\n      disabled={props.isDisabled || false}\n      multiple={props.isMultiple || false}\n      onChange={props.onChange || null}\n      value={selected}>\n      <option value=\"\" disabled>Please Select</option>\n      {props.values.map((value: string, i:number) => (\n        <option\n          value={value}\n          key={`${value}_${i}`}>\n          {value}\n        </option>\n      ))}\n    </select>\n    </>\n  );\n}\n\nexport default Select;\n","import React from 'react';\n\nimport Select from '../../shared/Select';\n\nimport './css/Method.css'\n\nimport {\n  ColumnCount,\n  HTTPMethods,\n} from '../../../enums/';\n\ninterface methodProps {\n  onUpdate: (value: HTTPMethods) => void;\n  selected: HTTPMethods;\n  width: ColumnCount;\n};\n\nconst Method: React.FunctionComponent<methodProps> = (props) => {\n\n  const updateSelected = (\n    e: React.ChangeEvent<HTMLSelectElement>,\n  ): void => {\n    const value: HTTPMethods = e.target.value as HTTPMethods;\n    props.onUpdate(value);\n  }\n\n  return (\n    <div className={props.width}>\n      <Select\n        className=\"u-full-width Method\"\n        label=\"HTTP Method\"\n        onChange={updateSelected}\n        selected={props.selected}\n        values={Object.values(HTTPMethods)} />\n    </div>\n  );\n}\n\nexport default Method;\n","import React from 'react';\nimport {parse, print, OperationDefinitionNode} from 'graphql';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMagic } from '@fortawesome/free-solid-svg-icons';\n\nimport Button from '../../shared/Button';\nimport Copy from '../../shared/Copy';\nimport Saving from '../../shared/Saving';\nimport TextArea from '../../shared/TextArea';\nimport Type from './type/Type';\n\nimport './css/GraphQL.css';\n\nimport {gqlPayloadType} from '../Data';\n\nexport enum GraphQLType {\n  QUERY = 'query',\n  MUTATION = 'mutation',\n}\n\ninterface ParsedGQL {\n  gql: string;\n  type: GraphQLType;\n}\n\ninterface GraphQLProps {\n  data: gqlPayloadType;\n  onUpdateData: (value: gqlPayloadType) => void;\n}\n\ninterface GraphQLState {\n  draft: string;\n  isSaved: boolean;\n  type: GraphQLType;\n}\n\nexport default class GraphQL extends React.PureComponent<GraphQLProps, GraphQLState> {\n\n  constructor(props: GraphQLProps) {\n    super(props);\n    const gql = GraphQL.getDocAndTypeFromGQLString(props.data.query);\n    this.state = {\n      draft: gql.gql,\n      isSaved: true,\n      type: gql.type,\n    }\n  }\n\n  static getDocAndTypeFromGQLString(\n    gql: string\n  ): ParsedGQL {\n    const doc = parse(gql);\n    const def: OperationDefinitionNode = doc.definitions[0] as OperationDefinitionNode;\n    const type = def.operation as GraphQLType;\n    return {\n      gql: print(doc),\n      type\n    };\n  }\n\n  static getDerivedStateFromProps(newProps: GraphQLProps, state: GraphQLState): GraphQLState {\n    if (newProps.data.query !== state.draft && !state.isSaved) {\n      return state;\n    }\n    try {\n      const gql = GraphQL.getDocAndTypeFromGQLString(newProps.data.query);\n      return {\n        draft: newProps.data.query,\n        isSaved: true,\n        type: gql.type,\n      };\n\n    } catch (e) {\n      return state;\n    }\n  }\n\n  updateGraphQL = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const draft = e.target.value;\n    try {\n      const gql = GraphQL.getDocAndTypeFromGQLString(draft);\n      if (gql.gql !== this.state.draft) {\n        this.props.onUpdateData(\n          // replace any existing operation with an empty string\n          {query: draft}\n        );\n        this.setState({isSaved: true});\n      } else {\n        this.setState({\n          draft,\n          isSaved:false,\n        });\n      }\n    } catch (_) {\n      this.setState({\n        draft,\n        isSaved: false,\n      });\n    }\n\n\n  }\n\n  updateType = (type: GraphQLType): void => {\n    this.props.onUpdateData(\n      {query: type +  ' ' + this.state.draft.replace(this.state.type, '')},\n    );\n  }\n\n  pretty = () => {\n    this.props.onUpdateData(\n      {query: this.state.type + ' ' + GraphQL.PrettyMe(this.state.draft).replace(this.state.type, '')},\n    );\n  }\n\n  static PrettyMe(gql: string): string {\n    try {\n      return print(parse(gql));\n    } catch (_) {\n      return gql;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"GraphQL\">\n        <div className=\"row\">\n          <div className=\"two columns\">\n            <Saving isSaved={this.state.isSaved} />\n          </div>\n          <div className=\"two columns\">\n            <Type\n              className=\"u-full-width\"\n              selected={this.state.type}\n              onUpdate={this.updateType} />\n          </div>\n          <div className=\"two columns\">\n            <Button\n              className=\"u-full-width\"\n              onClick={this.pretty}\n              isDisabled={!this.state.isSaved}\n              isPrimary={false}>\n              <FontAwesomeIcon icon={faMagic} size=\"lg\" />\n            </Button>\n          </div>\n          <div className=\"two columns\">\n            <Copy\n              className=\"u-pull-right\"\n              content={GraphQL.PrettyMe(this.state.draft)} />\n          </div>\n        </div>\n        <div className=\"row\">\n          <TextArea\n            isFullWidth={true}\n            onChangeDirect={this.updateGraphQL}\n            ref=\"input_gql\"\n            style={{\n              background: `url('${process.env.PUBLIC_URL}/images/textarea.png')`,\n              backgroundAttachment: 'local',\n              backgroundRepeat: 'no-repeat',\n              backgroundColor: '#19404A',\n              color: '#EEE8D5',\n            }}\n            value={this.state.draft} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\ninterface ButtonProps {\n  className?: string;\n  id?: string;\n  isDisabled?: boolean;\n  isPrimary: boolean;\n  label?: string;\n  onClick: () => void;\n  onClickRaw?: (e: React.MouseEvent<HTMLElement>) => void;\n}\n\nconst Button: React.FunctionComponent<ButtonProps> = (props) => {\n  const clickHandler = (e: React.MouseEvent) => {\n    e.preventDefault();\n    props.onClick();\n  }\n\n  return (\n    <button\n      className={(props.isPrimary ? 'button-primary ' : ' ') + props.className || ' '}\n      disabled={props.isDisabled}\n      id={props.id}\n      onClick={props.onClickRaw || clickHandler}>\n      {props.children || props.label || ''}\n      </button>\n  );\n}\n\nexport default Button;\n","import React from 'react';\n\nimport Select from '../../../shared/Select';\n\nimport './css/Types.css';\n\nimport {HTTPHeaders} from '../../../../enums';\n\ninterface TypeProps {\n  index: number;\n  isFullWidth: boolean;\n  values: (HTTPHeaders | string)[];\n  selected: HTTPHeaders | string;\n  onUpdate: (value: HTTPHeaders, index: number) => void;\n}\n\nconst Types: React.FunctionComponent<TypeProps> = (props) => {\n  const updateSelected = (\n    e: React.ChangeEvent<HTMLSelectElement>,\n  ): void => {\n    const value: HTTPHeaders = e.target.value as HTTPHeaders;\n    props.onUpdate(value, props.index);\n  }\n\n  return (\n    <Select\n      className={(props.isFullWidth ? 'u-full-width' : '') + ' Types'}\n      onChange={updateSelected}\n      selected={props.selected}\n      values={props.values} />\n  );\n}\n\nexport default Types;\n","// Import React\nimport React from 'react';\n\n// Import Enums\nimport {InputTypes} from '../../enums';\n\n// Define Interfaces\ninterface InputProps {\n  className?: string;\n  isChecked?: boolean\n  isDisabled?: boolean;\n  label?: string;\n  name?: string;\n  id?: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  placeholder?: string;\n  type?: InputTypes;\n  value?: string;\n}\n\n// Input Component\nconst Input: React.FunctionComponent<InputProps> = (props) => (\n  <>\n  { props.label && (<label>{props.label}</label>) }\n  <input\n    type={props.type || InputTypes.TEXT}\n    checked={props.isChecked}\n    className={props.className || ''}\n    name={props.name || ''}\n    id={props.id || ''}\n    value={props.value || ''}\n    disabled={props.isDisabled}\n    onChange={props.onChange}\n     />\n  </>\n);\n\nexport default Input;\n","import React from 'react';\n\nimport Input from '../../../shared/Input'\n\nimport './css/Value.css'\n\ninterface ValueProps {\n  index: number;\n  isFullWidth: boolean;\n  value: string;\n  onUpdate: (value: string, index: number) => void;\n}\n\nconst Value: React.FunctionComponent<ValueProps> = (props) => {\n  const updateValue = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    props.onUpdate(e.target.value, props.index);\n  }\n\n  return (\n    <Input\n      className={(props.isFullWidth ? 'u-full-width' : '') + ' Value'}\n      onChange={updateValue}\n      value={props.value} />\n  );\n}\n\nexport default Value;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faMinus } from '@fortawesome/free-solid-svg-icons';\n\nimport Button from '../../shared/Button';\n\nimport Types from './type/Types';\nimport Value from './value/Value';\n\nimport './css/Headers.css';\n\nimport {\n  ColumnCount,\n  HTTPHeaders,\n} from '../../../enums';\n\nexport interface Header {\n  type: HTTPHeaders | string;\n  value: string;\n};\n\ninterface HeadersProps {\n  onUpdate: (value: Header | null, index: number) => void;\n  selected: Header[];\n  width: ColumnCount,\n}\n\n\nconst Headers: React.FunctionComponent<HeadersProps> = (props) => {\n\n  const updateType = (type: HTTPHeaders, index: number): void => {\n    const header = props.selected[index];\n    header.type = type;\n    props.onUpdate(header, index);\n  }\n\n  const updateValue = (value: string, index: number): void => {\n    const header = props.selected[index];\n    header.value = value;\n    props.onUpdate(header, index);\n  }\n\n  const addHeader = (e: React.MouseEvent<HTMLElement>): void => {\n    e.preventDefault();\n    // create a pending header, add this to the end of the index\n    props.onUpdate(\n      {\n        type: '',\n        value: '',\n      },\n      props.selected.length,\n    );\n  }\n\n  const removeHeader = (e: React.MouseEvent<HTMLElement>): void => {\n    e.preventDefault();\n    const index = e.currentTarget.id.split('_').pop();\n\n    if (index === undefined) {\n      // oh no...\n      return;\n    }\n    props.onUpdate(null, parseInt(index));\n  }\n\n  // Don't allow duplicate headers.\n  const selected = props.selected.map(header => header.type);\n  const values = Object.values(HTTPHeaders).filter(header => !selected.includes(header));\n\n  return (\n\n    <div className={props.width + ' Headers'}>\n      <div className=\"row\">\n        <div className=\"twelve rows\">\n          <label> HTTP Headers </label>\n        </div>\n      </div>\n\n        {\n          props\n            .selected\n            .map(\n              (header: Header, index: number) => (\n\n                <div className=\"row\" key={`${header.type}_${index}`}>\n                {\n                  // TODO: selected and values aren't behaving below\n                }\n                  <div className=\"two columns\">\n                    <Button\n                      id={`remove_${index}`}\n                      isPrimary={false}\n                      className='u-full-width'\n                      onClick={() => {}}\n                      onClickRaw={removeHeader}>\n                      <FontAwesomeIcon icon={faMinus} size=\"lg\" />\n                    </Button>\n                  </div>\n                  <div className=\"four columns\">\n                    <Types\n                      index={index}\n                      isFullWidth={true}\n                      values={[...values, header.type]}\n                      selected={header.type}\n                      onUpdate={updateType} />\n                  </div>\n                  <div className=\"four columns\">\n                    <Value\n                      index={index}\n                      isFullWidth={true}\n                      value={header.value || ''}\n                      onUpdate={updateValue} />\n                  </div>\n                  <div className=\"two columns\">\n                    <Button\n                      isPrimary={false}\n                      className='u-full-width'\n                      onClick={() => {}}\n                      onClickRaw={addHeader}>\n                      <FontAwesomeIcon icon={faPlus} size=\"lg\" />\n                    </Button>\n                  </div>\n                </div>\n            )\n          )\n        }\n        {\n          props.selected.length === 0 && (\n            <div className=\"row\">\n              <Button\n                isPrimary={false}\n                className='u-full-width'\n                onClick={() => {}}\n                onClickRaw={addHeader}>\n                <FontAwesomeIcon icon={faPlus} size=\"lg\" />\n              </Button>\n            </div>\n          )\n        }\n    </div>\n  );\n}\n\nexport default Headers;\n","import React from 'react';\n\nimport Input from '../../../shared/Input'\n\nimport './css/Domain.css';\n\nimport {InputTypes} from '../../../../enums';\n\ninterface DomainProps {\n  isFullWidth: boolean;\n  value: string;\n  onUpdate: (value: string) => void;\n}\n\nconst Domain: React.FunctionComponent<DomainProps> = (props) => {\n  const updateValue = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    props.onUpdate(e.target.value);\n  }\n\n  return (\n    <Input\n      className={(props.isFullWidth ? 'u-full-width' : '') + ' Domain'}\n      onChange={updateValue}\n      type={InputTypes.URL}\n      value={props.value} />\n  );\n}\n\nexport default Domain;\n","import React from 'react';\n\nimport Input from '../../../shared/Input'\n\nimport './css/Endpoint.css';\n\ninterface EndpointProps {\n  isFullWidth: boolean;\n  value: string;\n  onUpdate: (value: string) => void;\n}\n\nconst Endpoint: React.FunctionComponent<EndpointProps> = (props) => {\n  const updateValue = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    ;\n    props.onUpdate(e.target.value);\n  }\n\n  ;\n  return (\n    <Input\n      className={(props.isFullWidth ? 'u-full-width' : '') + ' Endpoint'}\n      onChange={updateValue}\n      value={props.value} />\n  );\n}\n\nexport default Endpoint;\n","import React from 'react';\n\nimport Domain from './domain/Domain';\nimport Endpoint from './endpoint/Endpoint';\n\nimport './css/Destination.css';\n\nimport {ColumnCount} from '../../../enums';\n\ntype DomainOrEndpoint = 'domain' | 'endpoint';\n\ninterface DestinationProps {\n  onUpdate: (domain: string, endpoint: string) => void;\n  domain: string;\n  endpoint: string;\n  width: ColumnCount;\n}\n\nconst Destination: React.FunctionComponent<DestinationProps> = (props) => {\n\n  const onUpdate = (value: string, type: DomainOrEndpoint): void => {\n    props.onUpdate(\n      (type === 'domain') ? value : props.domain,\n      (type === 'endpoint') ? value : props.endpoint,\n    );\n  }\n\n  const onUpdateEndpoint = (endpoint: string): void => {\n    onUpdate(endpoint, 'endpoint');\n  }\n\n  const onUpdateDomain = (domain: string): void => {\n    onUpdate(domain, 'domain');\n  }\n\n  return (\n    <div className={props.width + ' Destination'}>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n        <label> Destination </label>\n        </div>\n      </div>\n      <div className=\"row\">\n          <div className=\"six columns\">\n            <Domain\n              isFullWidth={true}\n              onUpdate={onUpdateDomain}\n              value={props.domain} />\n          </div>\n          <div className=\"six columns\">\n            <Endpoint\n              isFullWidth={true}\n              onUpdate={onUpdateEndpoint}\n              value={props.endpoint} />\n          </div>\n        </div>\n      </div>\n  );\n}\n\nexport default Destination;\n","import React from 'react';\n\nimport Method from './method/Method';\nimport Headers, { Header } from './headers/Headers';\nimport Destination from './destination/Destination';\n\nimport {\n  ColumnCount,\n  HTTPMethods,\n} from '../../enums';\n\nexport interface ConfigData {\n  method: HTTPMethods;\n  headers: Header[];\n  domain: string;\n  endpoint: string;\n}\n\ninterface ConfigProps {\n  data: ConfigData;\n  updateConfig: (data: ConfigData) => void;\n}\n\nconst Config: React.FunctionComponent<ConfigProps> = (props) => {\n  const updateMethod = (value: HTTPMethods) => {\n    const data = props.data;\n    data.method = value;\n    props.updateConfig(data);\n  }\n\n  const updateHeaders = (value: Header | null, index: number): void => {\n    const data = props.data;\n    if (!data.headers[index] && value) {\n      data.headers.push(value);\n    } else {\n      if (!value) {\n        delete data.headers[index];\n        data.headers = data.headers.filter(header => header);\n      } else {\n        data.headers[index] = value;\n      }\n    }\n    props.updateConfig(data);\n  }\n\n  const updateDestination = (domain: string, endpoint: string) => {\n    const data = props.data;\n    data.domain = domain;\n    data.endpoint = endpoint;\n    props.updateConfig(data);\n  }\n\n  return (\n    <>\n      <div className=\"row\">\n        <Headers\n          onUpdate={updateHeaders}\n          selected={props.data.headers}\n          width={ColumnCount.TWELVE} />\n      </div>\n      <div className=\"row\">\n      <Method\n        selected={props.data.method}\n        width={ColumnCount.TWO}\n        onUpdate={updateMethod} />\n      <Destination\n        onUpdate={updateDestination}\n        domain={props.data.domain}\n        endpoint={props.data.endpoint}\n        width={ColumnCount.TEN} />\n      </div>\n    </>\n  );\n}\nexport default Config;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCopy } from '@fortawesome/free-solid-svg-icons';\n\nimport Button from './Button';\n\ninterface CopyProps {\n  className?: string;\n  label?: string;\n  content: string;\n}\n\nconst Copy: React.FunctionComponent<CopyProps> = (props) => {\n\n  const copy = async () => {\n    await navigator.clipboard.writeText(props.content);\n  }\n\n  return (\n    <Button\n      className={props.className || ''}\n      isPrimary={false}\n      onClick={copy}>\n      <FontAwesomeIcon icon={faCopy} size=\"lg\" />\n      </Button>\n  )\n}\n\nexport default Copy;\n","import React from 'react';\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSave } from '@fortawesome/free-solid-svg-icons';\n\nimport './css/Saving.css';\n\ninterface SavingProps {\n  className?: string;\n  isSaved: boolean;\n}\n\nconst Saving: React.FunctionComponent<SavingProps> = (props) => {\n  return (\n    <CSSTransitionGroup\n      transitionName=\"save-notice\"\n      transitionLeave={false}\n      transitionEnter={true}\n      transitionEnterTimeout={500}>\n      <div\n        className={\n          ((props.isSaved) ? 'Saved' : 'NotSaved')\n          +  \" SavingNotice \"\n          + (props.className || '')\n        }\n        key={\"notice-\" + props.isSaved}>\n        <FontAwesomeIcon icon={faSave} size=\"lg\" />\n      </div>\n    </CSSTransitionGroup>\n  )\n}\n\nexport default Saving;\n","import React from 'react';\n\ninterface TextAreaProps {\n  className?: string;\n  isFullWidth: boolean;\n  onChangeDirect?: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  onUpdate?: (value: string) => void;\n  style?: {\n    [key: string]: string,\n  };\n  value: string;\n}\n\ninterface TextAreaState {}\n\nexport default class TextArea extends React.Component<TextAreaProps, TextAreaState> {\n\n  constructor(props: TextAreaProps) {\n    super(props);\n    this.state = {};\n  }\n\n  onUpdate = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    if (this.props.onChangeDirect) {\n      this.props.onChangeDirect(e);\n    } else if (this.props.onUpdate) {\n      this.props.onUpdate(e.target.value);\n    }\n  }\n\n  render () {\n    return (\n      <textarea\n        className={((this.props.isFullWidth) ? 'u-full-width ' : ' ') + this.props.className || '' }\n        onChange={this.onUpdate}\n        style={this.props.style || {}}\n        value={this.props.value}>\n      </textarea>\n    );\n  }\n}\n","import React from 'react';\n\nimport Select from '../../../shared/Select';\n\nimport './css/Type.css';\n\nimport {GraphQLType} from '../GraphQL';\n\ninterface TypeProps {\n  className?: string;\n  selected: GraphQLType;\n  onUpdate: (type: GraphQLType) => void;\n}\n\nconst Type: React.FunctionComponent<TypeProps> = (props) => {\n  const updateSelected = (\n    e: React.ChangeEvent<HTMLSelectElement>,\n  ): void => {\n    const value: GraphQLType = e.target.value as GraphQLType;\n    props.onUpdate(value);\n  }\n\n  return (\n    <Select\n      className={(props.className || '') + \" Type\"}\n      onChange={updateSelected}\n      selected={props.selected}\n      values={Object.values(GraphQLType)} />\n  );\n}\n\nexport default Type\n","/**\n * @file Curl component\n * @author Mattamorphic\n */\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMagic } from '@fortawesome/free-solid-svg-icons';\n\n// Imported components\nimport Button from '../../shared/Button';\nimport Copy from '../../shared/Copy';\nimport Saving from '../../shared/Saving';\nimport TextArea from '../../shared/TextArea';\n\n// CSS imports\nimport './css/Json.css';\n\n// Type imports\nimport {payloadType} from '../Data';\n\ninterface JsonProps {\n  data: payloadType;\n  onUpdateData: (value: payloadType) => void;\n}\n\ninterface JsonState {\n  draft: string;\n  hasDraft: boolean;\n}\n\nexport default class Json extends React.PureComponent<JsonProps, JsonState> {\n\n  constructor(props: JsonProps) {\n    super(props);\n    this.state = {\n      draft: JSON.stringify(props.data, null, 2),\n      hasDraft: false,\n    };\n  }\n\n  /**\n   * @function We have to update the state based on the props, this needs removing\n   *\n   * @param {JsonProps} newProps The new received props\n   * @param {JsonState} state    The current state\n   *\n   * @return {JsonState}\n   */\n  static getDerivedStateFromProps(newProps: JsonProps, state: JsonState): JsonState {\n    let draft = state.draft;\n    let hasDraft = state.hasDraft;\n    if (!state.hasDraft && JSON.stringify(newProps.data) !== JSON.stringify(JSON.parse(state.draft))) {\n      draft = JSON.stringify(newProps.data, null, 2);\n      hasDraft = false;\n    } else {\n      try {\n        JSON.parse(draft);\n        hasDraft = false;\n      } catch(_) {}\n    }\n    return {\n      draft,\n      hasDraft,\n    };\n  }\n\n  /**\n   * @function Update the data from the json string\n   *\n   * @param {string} value The possible json string\n   */\n  updateJson = (value: string) => {\n    this.setState({\n      draft: value,\n      hasDraft: true\n    });\n    try {\n      const object = JSON.parse(value);\n      this.props.onUpdateData(object);\n    } catch (_) {}\n  }\n\n  /**\n   * @function Pretty print the json in the state\n   */\n  pretty = () => {\n    try {\n      this.setState({\n        draft: JSON.stringify(JSON.parse(this.state.draft), null, 2),\n        hasDraft: true,\n      });\n    } catch (_) {\n      return;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Json\">\n        <div className=\"row\">\n          <div className=\"two columns\">\n            <Saving\n              className=\"u-full-width\"\n              isSaved={!this.state.hasDraft} />\n          </div>\n          <div className=\"four columns\">\n            <Button\n              className=\"u-full-width\"\n              onClick={this.pretty}\n              isPrimary={false}>\n              <FontAwesomeIcon icon={faMagic} size=\"lg\" />\n            </Button>\n          </div>\n          <div className=\"four columns\">\n            <Copy\n              className=\"u-full-width\"\n              content={this.state.draft} />\n          </div>\n        </div>\n        <div className=\"row\">\n          <TextArea\n            isFullWidth={true}\n            onUpdate={this.updateJson}\n            style={{\n              background: `url('${process.env.PUBLIC_URL}/images/textarea.png')`,\n              backgroundAttachment: 'local',\n              backgroundRepeat: 'no-repeat',\n              backgroundColor: '#19404A',\n              color: '#EEE8D5',\n            }}\n            value={this.state.draft} />\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react';\n\nimport Select from '../../shared/Select';\n\nimport './css/Selector.css';\n\nimport {DataType} from '../../../enums';\n\ninterface SelectorProps {\n  className?: string;\n  selected: DataType;\n  onUpdate: (value: DataType) => void;\n}\n\nconst Selector: React.FunctionComponent<SelectorProps> = (props) => {\n  const updateSelected = (\n    e: React.ChangeEvent<HTMLSelectElement>,\n  ): void => {\n    const value: DataType = e.target.value as DataType;\n    props.onUpdate(value);\n  }\n\n  return (\n    <Select\n      className={(props.className || '') + \" Selector\"}\n      onChange={updateSelected}\n      selected={props.selected}\n      values={Object.values(DataType)} />\n  );\n}\n\nexport default Selector;\n","import React from 'react';\n\nimport GraphQL from './graphql/GraphQL';\nimport Json from './json/Json';\nimport Selector from './selector/Selector';\n\nimport './css/Data.css';\n\nimport {\n  DataType,\n} from '../../enums';\n\nexport type payloadType = {[key: string]: any}\nexport type gqlPayloadType = {query: string}\n\nexport interface DataData {\n  type: DataType;\n  data: {\n    [DataType.JSON]: payloadType;\n    [DataType.GQL]: gqlPayloadType;\n    [DataType.FORM]: null;\n  }\n}\n\ninterface DataProps {\n  className?: string;\n  data: DataData;\n  updateData: (data: DataData) => void;\n}\n\nconst Data: React.FunctionComponent<DataProps> = (props) => {\n  const updateType = (value: DataType) => {\n    const data = props.data;\n    data.type = value;\n    props.updateData(data);\n  }\n\n  const updateJsonData = (value: payloadType) => {\n    const data = props.data;\n    data.data.json = value;\n    props.updateData(data);\n  }\n\n  const updateGraphQLData = (value: gqlPayloadType) => {\n    const data = props.data;\n    data.data.graphQL = value\n    props.updateData(data);\n  }\n\n  return (\n    <div className={(props.className || '' ) + ' Data'}>\n      <label> Data </label>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n        {\n          props.data.type === DataType.JSON\n            && (<Json data={props.data.data.json} onUpdateData={updateJsonData} />)\n        }\n        {\n          props.data.type === DataType.GQL\n            && (<GraphQL\n              data={props.data.data.graphQL}\n              onUpdateData={updateGraphQLData} />)\n        }\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n          <Selector\n            className=\"u-full-width\"\n            selected={props.data.type}\n            onUpdate={updateType} />\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default Data;\n","import React from 'react';\n\nimport './css/Heading.css'\n\ninterface HeadingProps {\n  imageSrc: string;\n}\n\nconst Heading: React.FunctionComponent<HeadingProps> = (props) => {\n  return (\n    <div className=\"Heading\">\n      <img src={props.imageSrc} alt=\"curlify logo\" />\n\n    </div>\n  );\n}\n\nexport default Heading;\n","import React from 'react';\n\nimport Select from '../../shared/Select';\n\nimport './css/Selector.css';\n\nimport {OutputType} from '../../../enums';\n\ninterface SelectorProps {\n  className?: string;\n  selected: OutputType;\n  onUpdate: (value: OutputType) => void;\n}\n\nconst Selector: React.FunctionComponent<SelectorProps> = (props) => {\n  const updateSelected = (\n    e: React.ChangeEvent<HTMLSelectElement>,\n  ): void => {\n    const value: OutputType = e.target.value as OutputType;\n    props.onUpdate(value);\n  }\n\n  return (\n    <Select\n      className={(props.className || '') + \" Selector\"}\n      onChange={updateSelected}\n      selected={props.selected}\n      values={Object.values(OutputType)} />\n  );\n}\n\nexport default Selector;\n","import {parse} from 'graphql';\n\nimport {HTTPHeaders, HTTPMethods} from '../enums';\n\n// import {ConfigData} from '../components/config/Config';\n// import {DataData} from '../components/data/Data';\nimport {Header} from '../components/config/headers/Headers';\nimport {ProxyData} from '../components/test/request/proxy/Proxy';\n\nexport const methodHasPayload = (method: HTTPMethods) => (\n  ![HTTPMethods.GET, HTTPMethods.HEAD]\n    .includes(method)\n)\n\nexport const PROXY = \"https://curlify-proxy.herokuapp.com/\";\n\nexport const regEx = {\n  url: /^((?:http(?:s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+))+([\\w\\-\\._~:\\/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+)$/gim,\n  curlHeader: /(?:-H \")([\\w\\d]{1,})(?:\\s{0,}:\\s{0,})(.+?)(?=\")/gim,\n  curlMethod: /(?:-X\\s{0,})(\\w{3,6})/gim,\n  // Todo: convert to /gms https://github.com/babel/babel/pull/10347\n  curlData: /(?:-d\\s{0,}'|\")({.*})(?=['|\"])/gim,\n  dateTimeZoneChars: /[T|Z]/gim,\n  jsonData: /^( *)(\"[^\"]+\": )?(\"[^\"].*\"|[\\w.+-]*)?([{}[\\],]*)?$/mg,\n  newLine: /[\\r|\\n]/gm,\n  newLineAndTab: /[\\n|\\r|\\t]/gm,\n  multipleSpaces: / +/gm,\n  quotes:/[\\\"\\']/gim,\n  singleEscapedNewLine: /(?<!\\\\)\\\\n/gm,\n\n};\n\n// export const hasDataChanged = (\n//   prevData: DataData,\n//   newData: DataData\n// ): boolean => {\n//   return false;\n// }\n//\n// export const hasConfigChanged = (\n//   prevData: DataData,\n//   newData: DataData\n// ): boolean => {\n//   return false;\n// }\n\nexport const hasProxyChanged = (\n  prevProxy: ProxyData,\n  newProxy: ProxyData\n): boolean => {\n  return prevProxy.isEnabled !== newProxy.isEnabled\n    || prevProxy.url !== newProxy.url;\n}\n\nexport const isValidMethod = (string: string): boolean => (\n  Object\n  .values(HTTPMethods)\n  .includes(string)\n)\n\nexport const isValidURL = (domain: string, endpoint: string): boolean => {\n  const url = domain\n    + ((domain.charAt(domain.length-1) !== '/' && endpoint.charAt(0) !== '/')\n      ? '/'\n      : '')\n    + endpoint;\n\n  const possUrl = (url).match(regEx.url);\n  return (!possUrl || possUrl[0] !== url) ? false : true;\n}\n\nexport const isValidHeaders = (headers: Header[]): boolean => {\n  const types = Object.values(HTTPHeaders)\n  return headers.reduce(\n    (_: boolean, curr: Header) => {\n      return types.includes(curr.type); // TODO: validate the value\n    },\n    true,\n  );\n}\n\nexport const isValidJsonString = (json: string) => {\n  try {\n    JSON.parse(json);\n    return true;\n  } catch (_) {\n    return false;\n  }\n}\n\nexport const isValidGraphQLString = (gql: string) => {\n  try {\n    parse(gql);\n    return true;\n  } catch (_) {\n    return false;\n  }\n}\n\nexport const isStringANumber = (value: string): boolean => {\n  return !isNaN(parseInt(value));\n}\n\nexport const isStringADate = (value: string): boolean => {\n  return !isNaN(Date.parse(value.replace(regEx.dateTimeZoneChars, ' ')));\n}\n\nexport const isStringBooleanOrNull = (value: string): boolean => {\n  const permitted = ['true', 'false', 'null', 'nil', 'undefined'];\n  return (permitted.includes(value.toLowerCase()));\n}\n\nexport const isStringAURL = (value: string): boolean => {\n  return !!value.replace(regEx.quotes, '').match(regEx.url);\n}\n","/**\n * @file Curl component\n * @author Mattamorphic\n */\nimport React from 'react';\n\n// Imported components\nimport Copy from '../../shared/Copy';\nimport Saving from '../../shared/Saving';\nimport TextArea from '../../shared/TextArea';\n\n// Resuable helper functions / objects\nimport * as utils from '../../../utils';\n\n// Imported types / interfaces\nimport {ConfigData} from '../../config/Config';\nimport {DataData, payloadType} from '../../data/Data';\nimport {Header} from '../../config/headers/Headers';\n\n// CSS imports\nimport './css/Curl.css';\n\n// Enum imports\nimport {\n  DataType,\n  HTTPHeaders,\n  HTTPMethods,\n} from '../../../enums';\n\ninterface DomainAndEndpoint {\n  domain: string | null;\n  endpoint: string | null;\n}\n\ninterface SerializedCurl {\n  config: ConfigData;\n  data: DataData;\n  hasNewData: boolean;\n  hasNewConfig: boolean;\n}\n\ninterface CurlProps {\n  config: ConfigData;\n  data: DataData;\n  updateConfig: (data: ConfigData) => void;\n  updateData: (data: DataData) => void;\n}\n\ninterface CurlState {\n  draft: string;\n  hasDraft: boolean;\n}\n\nexport default class Curl extends React.Component<CurlProps, CurlState>  {\n\n  constructor(props: CurlProps) {\n    super(props);\n    this.state = {\n      draft: Curl.getValue(props.config, props.data),\n      hasDraft: false,\n    };\n  }\n\n\n  static getDerivedStateFromProps(newProps: CurlProps, state: CurlState): CurlState {\n    const draft = (state.hasDraft)\n      ? state.draft\n      : Curl.getValue(newProps.config, newProps.data);\n\n    return {\n      hasDraft: state.hasDraft,\n      draft,\n    };\n  }\n\n  /**\n   * @function Get the headers from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {Header[] | null}\n   */\n  getHeaders(value: string): Header[] | null {\n    const regex = utils.regEx.curlHeader;\n    const headers = [];\n    let match = null;\n    while (match = regex.exec(value)) {\n      headers.push({\n        type: match[1] as HTTPHeaders,\n        value: match[2] as string,\n      });\n    }\n    if (headers.length === 0) {\n      return null;\n    }\n    return headers;\n  }\n\n  /**\n   * @function Get the method from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {HTTPMethods | null}\n   */\n  getMethod(value: string): HTTPMethods | null {\n    const regex = utils.regEx.curlMethod;\n    if (!value.match(regex)) {\n      return null;\n    }\n    const match = regex.exec(value);\n    if (!match) {\n      return null;\n    }\n    return match[1] as HTTPMethods;\n  }\n\n  /**\n   * @function Get the data from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {payloadType | null}\n   */\n  getData(value: string): payloadType | null {\n    const regex = utils.regEx.curlData;\n    if (!value.match(regex)) {\n      return null;\n    }\n    const match = regex.exec(value);\n    if (!match) {\n      return null;\n    }\n    try {\n      return JSON.parse(match[1]);\n    } catch (_) {\n      return null;\n    }\n  }\n\n  /**\n   * @function Get the domain and endpoint from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {DomainAndEndpoint | null}\n   */\n  getDomainAndEndpoint(value: string): DomainAndEndpoint | null {\n    const regex = utils.regEx.url;\n    if (!value.match(regex)) {\n      return null;\n    }\n    const match = regex.exec(value);\n    if (!match) {\n      return null;\n    }\n    return {\n      domain: match[1] || null,\n      endpoint: match[2] || null,\n    };\n  }\n\n  /**\n   * @function Serialize a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {SerializedCurl}\n   */\n  serializerCurl = (value: string): SerializedCurl => {\n    // Get the current values\n    const config = this.props.config;\n    const data = this.props.data;\n\n    let hasNewConfig = false;\n    let hasNewData = false;\n\n    // Only update if we have a match :)\n\n     // decide which method to use\n    const method = this.getMethod(value);\n\n    // decide which headers to use\n    const headers = this.getHeaders(value);\n\n    // decide which data to use\n    const newData = this.getData(value);\n\n    // decide which domain and endpoint to use\n    const domainAndEndpoint = this.getDomainAndEndpoint(value);\n\n    if (\n      method\n      && method !== config.method\n      && Object.values(HTTPMethods).includes(method)\n    ) {\n      hasNewConfig = true;\n      config.method = method;\n    }\n\n    // Todo - this needs to actually check the header\n    if (headers) {\n      hasNewConfig = true;\n      config.headers = headers;\n    }\n    if (newData && JSON.stringify(newData) !== JSON.stringify(data.data[data.type])) {\n      hasNewData = true;\n      switch (data.type) {\n        case DataType.GQL:\n          data.data.graphQL.query = newData.query;\n          break;\n        case DataType.JSON:\n          data.data.json = newData;\n          break;\n        case DataType.FORM:\n          break;\n      }\n    }\n    if (domainAndEndpoint) {\n      if (domainAndEndpoint.domain && domainAndEndpoint.domain !== config.domain) {\n        hasNewConfig = true;\n        config.domain = domainAndEndpoint.domain;\n      }\n      if (domainAndEndpoint.endpoint && domainAndEndpoint.endpoint !== config.endpoint) {\n        hasNewConfig = true;\n        config.endpoint = domainAndEndpoint.endpoint;\n      }\n    }\n\n    return {\n      config,\n      data,\n      hasNewConfig,\n      hasNewData,\n    };\n  }\n\n  /**\n   * @function Update the data from the curl string\n   *\n   * @param {string} value The curl string\n   */\n  updateCurl = (value: string): void => {\n    const curl = this.serializerCurl(value);\n\n    if (curl.hasNewData || curl.hasNewConfig) {\n      this.setState({draft: value, hasDraft: false}, () => {\n        curl.hasNewData && this.props.updateData(curl.data);\n        curl.hasNewConfig && this.props.updateConfig(curl.config);\n      });\n    }\n    if (!curl.hasNewData && !curl.hasNewConfig) {\n      this.setState({draft: value, hasDraft: true});\n    }\n  }\n\n  /**\n   * @function Pass the config and data into a curl string\n   *\n   * @params {ConfigData} config The Configuration data for the curl request\n   * @params {DataData}   data   The data for the curl request\n   */\n  static getValue(\n    config: ConfigData,\n    data: DataData,\n  ): string {\n    let payload = {};\n    switch (data.type) {\n      case DataType.JSON:\n        payload = data.data.json;\n        break;\n      case DataType.GQL:\n        payload = data.data.graphQL;\n        break;\n      case DataType.FORM:\n        break;\n    }\n\n    return \"curl -X \" + config.method + \" \\\\ \\n\"\n       + (config.headers.map(header => \"-H \\\"\" + header.type + \": \" + header.value + \"\\\" \\\\ \\n\").join(''))\n       + ((payload && Object.keys(payload).length > 0 && utils.methodHasPayload(config.method))\n         ? \"-d '\" + Curl.parsePayloadString(JSON.stringify(payload)) + \"' \\\\ \\n\" : '')\n       + config.domain + config.endpoint;\n  }\n\n  /**\n   * @function Parse a string remove new line / tab and remove multiple spaces\n   *\n   * @param {string} value\n   */\n  static parsePayloadString(value: string): string {\n    return value\n      .replace(utils.regEx.newLineAndTab, '')\n      .replace(utils.regEx.multipleSpaces, ' ')\n      .replace(utils.regEx.singleEscapedNewLine, '');\n  }\n\n  render () {\n    return (\n      <div className=\"Curl\">\n        <div className=\"row\">\n          <div className=\"two columns\">\n            <Saving\n              className=\"u-full-width\"\n              isSaved={!this.state.hasDraft} />\n          </div>\n          <div className=\"six columns\">\n            <div className=\"u-full-width\" />\n          </div>\n          <div className=\"four columns\">\n            <Copy\n              className=\"u-full-width\"\n              content={this.state.draft} />\n          </div>\n        </div>\n        <div className=\"row\">\n          <TextArea\n            isFullWidth={true}\n            onUpdate={this.updateCurl}\n            style={{\n              background: `url('${process.env.PUBLIC_URL}/images/textarea.png')`,\n              backgroundAttachment: 'local',\n              backgroundRepeat: 'no-repeat',\n              backgroundColor: '#19404A',\n              color: '#EEE8D5',\n            }}\n            value={this.state.draft} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport Selector from './selector/Selector';\n\nimport {ConfigData} from '../config/Config';\nimport Curl from './curl/Curl';\nimport {DataData} from '../data/Data';\n\nimport './css/Output.css';\n\nimport {OutputType} from '../../enums';\n\ninterface OutputProps {\n  className?: string;\n  config: ConfigData;\n  data: DataData;\n  output: OutputType;\n  updateConfig: (data: ConfigData) => void;\n  updateData: (data: DataData) => void;\n}\n\nconst Output: React.FunctionComponent<OutputProps> = (props) => {\n  const updateType = (_: OutputType) => {\n    // Todo : Implement changer here in future.\n  }\n\n  return (\n    <div className={(props.className || '' ) + ' Output'}>\n      <label> Output </label>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n          {\n            (props.output === OutputType.CURL) && (\n              <Curl\n                config={props.config}\n                data={props.data}\n                updateConfig={props.updateConfig}\n                updateData={props.updateData} />\n            )\n          }\n        </div>\n      </div>\n      <div className=\"row\">\n      <div className=\"twelve columns\">\n        <Selector\n          className=\"u-full-width\"\n          selected={props.output}\n          onUpdate={updateType} />\n      </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Output;\n","/**\n * @file Checkbox component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport Input from './Input';\nimport {InputTypes} from '../../enums';\n\ninterface CheckboxProps {\n  className?: string;\n  isDisabled?: boolean;\n  label?: string;\n  isCheckedLabel?: string;\n  isNotCheckedLabel?: string;\n  name?: string;\n  id?: string;\n  isChecked: boolean;\n  onChange: (value: boolean) => void;\n  value?: string;\n}\n\nconst Checkbox: React.FunctionComponent<CheckboxProps> = (props) => {\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    props.onChange(e.target.checked)\n  }\n\n  const label = props.isChecked\n    ? props.isCheckedLabel || props.label\n    : props.isNotCheckedLabel || props.label\n\n  return (\n    <div className={props.className || ''}>\n      <Input\n        type={InputTypes.CHECKBOX}\n        isChecked={props.isChecked}\n        isDisabled={props.isDisabled || false}\n        name={props.name || ''}\n        id={props.id || ''}\n        onChange={onChange}\n        value={props.value || ''} />\n      <span> {label} </span>\n    </div>\n  )\n};\n\nexport default Checkbox;\n","import React from 'react';\n\nimport Button from './Button';\n\ninterface TogglerProps {\n  className?: string;\n  label: string;\n  onToggle: () => void;\n  isToggled: boolean;\n}\n\nconst Toggler: React.FunctionComponent<TogglerProps> = (props) => {\n\n  return (\n    <div className={props.className || ''}>\n      <div className=\"row\">\n      <Button\n        className=\"u-full-width\"\n        isPrimary={false}\n        label= {(!props.isToggled ? 'Show ' : 'Hide ') + props.label}\n        onClick={props.onToggle} />\n      </div>\n      {\n        props.isToggled && (\n          <div className=\"row\">{props.children}</div>\n        )\n      }\n    </div>\n  )\n}\n\nexport default Toggler;\n","/**\n * @file Notice component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport './css/Notice.css';\n\ninterface NoticeProps {\n  className?: string;\n  heading: string;\n  content: string;\n}\n\nconst Notice: React.FunctionComponent<NoticeProps> = (props) => {\n  const lines = props.content.split(\"\\n\");\n\n  return (\n    <div className={(props.className || '') + ' Notice'}>\n      <h4> {props.heading} </h4>\n      {\n        lines.map(line => (<>{line} <br /></>))\n      }\n    </div>\n  )\n};\n\nexport default Notice;\n","/**\n * @file Proxy component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport Checkbox from '../../../shared/Checkbox';\nimport Toggler from '../../../shared/Toggler';\nimport Input from '../../../shared/Input';\nimport Notice from '../../../shared/Notice';\nimport {InputTypes} from '../../../../enums';\n\nimport './css/Proxy.css'\n\nimport * as utils from '../../../../utils';\n\nexport interface ProxyData {\n  url: string,\n  isEnabled: boolean\n}\n\ninterface ProxyProps {\n  isExpanded: boolean;\n  proxy: ProxyData;\n  onUpdateProxy: (data: ProxyData) => void;\n}\n\ninterface ProxyState {\n  showProxySettings: boolean;\n}\n\nexport default class Proxy extends React.PureComponent<ProxyProps, ProxyState> {\n\n  constructor(props: ProxyProps) {\n    super(props);\n    this.state = {\n      showProxySettings: props.isExpanded,\n    };\n  }\n\n  toggleProxySettings = () => {\n    this.setState(prevState => ({\n      showProxySettings: !prevState.showProxySettings,\n    }));\n  }\n\n  onUpdateProxyUrl = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.props.onUpdateProxy({\n      url: e.target.value,\n      isEnabled: this.props.proxy.isEnabled,\n    })\n  }\n\n  onUpdateProxyEnabled = (isEnabled: boolean) => {\n    this.props.onUpdateProxy({\n      url: this.props.proxy.url,\n      isEnabled\n    })\n  }\n\n  render() {\n\n    return (\n      <Toggler\n        isToggled={this.state.showProxySettings}\n        className=\"Proxy\"\n        label=\"Proxy Settings\"\n        onToggle={this.toggleProxySettings}>\n        <div className=\"row\">\n          <Notice\n            className=\"twelve columns u-full-width\"\n            heading=\"Proxy Overview\"\n            content={\"Requests are proxied through a copy of cors-anywhere\\n\"\n              + `This is hosted on: ${utils.PROXY}${\"\\n\"}`\n              + \"You can find the code for this at https://github.com/Mattamorphic/curlify/tree/proxy\\n\"\n              + \"If you'd like to use your own proxy, simply replace the URL\\n\"\n              + \"This should follow cors-anywhere entry design\\n\"\n              + \"This proxy forwards request, gets around the cors issue, and allows us to return headers\\n\"\n              + \"No data is recorded in the proxy\\n\"} />\n        </div>\n        <div className=\"row\">\n          <Input\n            className=\"six columns u-full-width\"\n            isDisabled={!this.props.proxy.isEnabled}\n            type={InputTypes.URL}\n            onChange={this.onUpdateProxyUrl}\n            placeholder=\"Proxy Url\"\n            value={this.props.proxy.url} />\n          <Checkbox\n            className=\"checkbox six columns u-full-width\"\n            isChecked={this.props.proxy.isEnabled}\n            isCheckedLabel=\"Proxy is enabled\"\n            isNotCheckedLabel=\"Proxy is not enabled\"\n            onChange={this.onUpdateProxyEnabled}\n            value=\"proxy\" />\n        </div>\n      </Toggler>\n    );\n  }\n}\n","/**\n * @file $COMPONENT component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport Button from './Button';\n\nimport './css/Confirm.css';\n\ninterface ConfirmProps {\n  className?: string;\n  label: string;\n  message: string;\n  onConfirm: () => void;\n  onCancel: () => void;\n  isPrimary?: boolean;\n}\n\nconst Confirm: React.FunctionComponent<ConfirmProps> = (props) => {\n\n  const onConfirm = () => {\n    const result = window.confirm(props.message);\n    result ? props.onConfirm() : props.onCancel();\n  }\n\n  return (\n    <Button\n      className={props.className || ''}\n      isPrimary={props.isPrimary || false}\n      label={props.label}\n      onClick={onConfirm} />\n  )\n};\n\nexport default Confirm;\n","import React from 'react';\n\nimport Proxy, {ProxyData} from './proxy/Proxy';\n\nimport './css/Request.css';\n\nimport Button from '../../shared/Button';\nimport Confirm from '../../shared/Confirm';\n\n\ninterface RequestProps {\n  shouldConfirm: boolean;\n  incompleteData?: string;\n  hasRun: boolean;\n  proxy: ProxyData;\n  onRequest: () => void;\n  onUpdateProxy: (data: ProxyData) => void;\n}\n\nconst Request: React.FunctionComponent<RequestProps> = (props) => {\n  const onConfirm = props.onRequest;\n  const onCancel = () => {};\n\n\n  return (\n    <div className=\"row\">\n      <div className=\"Request\">\n        <Proxy\n          isExpanded={!props.hasRun}\n          proxy={props.proxy}\n          onUpdateProxy={props.onUpdateProxy} />\n        {\n          props.shouldConfirm\n            ? <Confirm\n                className=\"u-full-width\"\n                label=\"Test\"\n                onConfirm={onConfirm}\n                onCancel={onCancel}\n                message=\"Are you sure?\" />\n            :  <Button\n                className=\"u-full-width\"\n                isPrimary={false}\n                label=\"Test\"\n                onClick={props.onRequest} />\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default Request;\n","/**\n * @file Table component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport './css/Table.css';\n\nexport interface TableRow {\n  [key: string]: string | JSX.Element;\n}\n\ninterface TableProps {\n  className?: string\n  data: TableRow[]\n}\n\nconst Table: React.FunctionComponent<TableProps> = (props) => {\n  if (props.data.length === 0) {\n    return <table className={props.className || ''} />\n  }\n\n  const headers = Object.keys(props.data[0])\n\n  return (\n    <table className={props.className || ''}>\n      <thead>\n        {\n          headers.map(\n            (header: string, i: number) => (\n              <th key={`header_${i}`}>{header}</th>\n            )\n          )\n        }\n      </thead>\n      <tbody>\n      {\n\n        props.data.map(\n          (row: TableRow, i: number) => (\n            <tr key={`tr_${i}`}>\n              {\n                headers.map(\n                  (header: string, j: number) => (\n                    <td key={`tr_${i}_${j}`} data-label={header}>\n                      {row[header]}\n                    </td>\n                  )\n                )\n              }\n            </tr>\n          )\n        )\n      }\n      </tbody>\n    </table>\n  );\n};\n\nexport default Table;\n","/**\n * @file ResponseHeaders component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport Table from '../../../shared/Table';\nimport Toggler from '../../../shared/Toggler';\n\nimport './css/ResponseHeaders.css';\n\nimport * as utils from '../../../../utils';\n\ninterface ResponseHeadersProps {\n  headers: Headers;\n}\n\ninterface ResponseHeadersState {\n  showHeaders: boolean\n}\n\nexport default class ResponseHeaders extends React.PureComponent<\n  ResponseHeadersProps,\n  ResponseHeadersState> {\n  constructor(props: ResponseHeadersProps) {\n    super(props);\n    this.state = {\n      showHeaders: false,\n    };\n  }\n\n  parse = (value: string): string | JSX.Element => {\n\n    if (utils.isStringANumber(value)) {\n      return (<span className='header-value header-number'>{value}</span>);\n    }\n    if (utils.isStringADate(value)) {\n      return (<span className='header-value header-date'>{value}</span>);\n    }\n    if (utils.isStringAURL(value)) {\n      return (\n        <span className='header-value header-url'>\n          <a href={value}>{value}</a>\n        </span>\n      );\n    }\n    if (utils.isStringBooleanOrNull(value)) {\n      return (<span className='header-value header-boolean'>{value}</span>);\n    }\n    return <span className='header-value header-string'>{value}</span>;\n  }\n\n  toggleHeaders = () => {\n    this.setState(prevState => ({\n      showHeaders: !prevState.showHeaders\n    }));\n  }\n\n  render() {\n\n    return (\n      <Toggler\n        isToggled={this.state.showHeaders}\n        className=\"ResponseHeaders\"\n        label=\"Headers\"\n        onToggle={this.toggleHeaders}>\n        <Table\n          className=\"u-max-full-width ResponseHeadersTable\"\n          data={\n            Array.from(this.props.headers.keys()).map(\n              key => ({\n                Header: this.parse(key),\n                Value: this.parse(this.props.headers.get(key) || ''),\n              })\n            )\n          } />\n      </Toggler>\n    );\n  }\n}\n","/**\n * @file ResponseJson component\n * @author Mattamorphic\n */\nimport React from 'react';\nimport ReactDOMServer from 'react-dom/server';\n\nimport Toggler from '../../../shared/Toggler';\n\nimport './css/ResponseJson.css'\n\nimport * as utils from '../../../../utils';\n\nimport {JsonValueTypes} from '../../../../enums';\n\ninterface ResponseJsonProps {\n  data: {[key: string]: any}\n}\n\ninterface ResponseJsonState {\n  showJson: boolean;\n}\n\nexport default class ResponseJson extends React.PureComponent<\n  ResponseJsonProps,\n  ResponseJsonState> {\n\n  constructor(props: ResponseJsonProps) {\n    super(props);\n    this.state = {\n      showJson: false,\n    };\n  }\n\n  toggleJson = () => {\n    this.setState(prevState => ({\n      showJson: !prevState.showJson,\n    }));\n  }\n\n  replacer = (_: string, p1: string, p2: string, p3: string, p4: string) => {\n    const part = { indent: p1, key: p2, value: p3, end: p4 };\n\n    let valueClass = \"json-value\";\n    let type = JsonValueTypes.STRING;\n    if (part.value !== undefined && part.value !== null) {\n      if (utils.isStringANumber(part.value)) {\n        valueClass = \"json-number\";\n        type = JsonValueTypes.NUMBER;\n      } else if (utils.isStringADate(part.value)) {\n        valueClass = \"json-date\";\n        type = JsonValueTypes.DATE;\n      } else if (utils.isStringBooleanOrNull(part.value)) {\n        valueClass = \"json-boolean\";\n        type = JsonValueTypes.BOOLEAN;\n      } else if (utils.isStringAURL(part.value)) {\n        valueClass = \"json-url\";\n        type = JsonValueTypes.URL;\n      } else {\n        valueClass = \"json-string\";\n        type = JsonValueTypes.STRING;\n      }\n    }\n    return ReactDOMServer.renderToString(\n      <>\n        {\"\\u00a0\".repeat(part.indent.length)}\n        {part.key && <span className=\"json-key\"> {part.key} </span>}\n        {\n          part.value\n          &&\n            <span className={valueClass}>\n              {\n                type === JsonValueTypes.URL\n                  ? (\n                    <a href={part.value.replace(utils.regEx.quotes, '')}>\n                      {part.value}\n                    </a>\n                  )\n                  : part.value\n              }\n            </span>\n        }\n        {part.end && <span className=\"json-key\"> {part.end} </span>}\n        <br />\n      </>\n    );\n  }\n\n  render() {\n    return (\n      <Toggler\n        isToggled={this.state.showJson}\n        label=\"Data\"\n        onToggle={this.toggleJson}>\n        <div\n          className=\"ResponseJson\"\n          dangerouslySetInnerHTML={{__html:\n            JSON.stringify(this.props.data, null, 3)\n              .replace(\n                utils.regEx.jsonData,\n                this.replacer,\n              )\n          }} />\n      </Toggler>\n    );\n  }\n\n}\n","/**\n * @file ResponseRaw component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport Toggler from '../../../shared/Toggler';\n\nimport './css/ResponseRaw.css';\n\ninterface ResponseRawProps {\n  data: string;\n}\n\ninterface ResponseRawState {\n  showRaw: boolean;\n}\n\nexport default class ResponseRaw extends React.PureComponent<\n  ResponseRawProps,\n  ResponseRawState> {\n\n  constructor(props: ResponseRawProps) {\n    super(props);\n    this.state = {\n      showRaw: false,\n    };\n  }\n\n  toggleRaw = () => {\n    this.setState(prevState => ({\n      showRaw: !prevState.showRaw,\n    }));\n  }\n\n  render() {\n    return (\n      <Toggler\n        isToggled={this.state.showRaw}\n        label=\"Raw\"\n        onToggle={this.toggleRaw}>\n          <div className=\"ResponseRaw\">\n            {this.props.data}\n          </div>\n      </Toggler>\n    );\n  }\n\n}\n","import React from 'react';\n\nimport ResponseHeaders from './responseheaders/ResponseHeaders';\nimport ResponseJson from './responsejson/ResponseJson';\nimport ResponseRaw from './responseraw/ResponseRaw';\n\nimport './css/FetchResponse.css';\n\ninterface FetchResponseProps {\n  headers: Headers,\n  data: string;\n}\n\nconst FetchResponse: React.FunctionComponent<FetchResponseProps> = (props) => {\n  let json = {}\n  try {\n    json = JSON.parse(props.data)\n  } catch (_) {}\n\n  return (\n    <div className=\"FetchResponse\">\n      <ResponseHeaders headers={props.headers} />\n      <ResponseRaw data={props.data} />\n      <ResponseJson data={json} />\n    </div>\n  );\n}\n\nexport default FetchResponse;\n","import React from 'react';\n\nimport './css/Loading.css';\n\ninterface LoadingProps {\n  className?: string;\n}\n\nconst Loading: React.FunctionComponent<LoadingProps> = (props) => {\n  return (\n    <div className={(props.className || '') + \" LoadingContainer\"}>\n      <div className=\"Loading\">\n        <div />\n      </div>\n      <div>\n        Loading\n      </div>\n    </div>\n  );\n}\n\nexport default Loading;\n","import React from 'react';\n\nimport Request from './request/Request';\nimport FetchResponse from './fetchresponse/FetchResponse';\nimport Loading from '../shared/Loading';\nimport Notice from '../shared/Notice';\n\nimport './css/Test.css';\n\nimport {ConfigData} from '../config/Config';\nimport {DataData} from '../data/Data';\nimport {ProxyData} from './request/proxy/Proxy';\n\nimport * as utils from '../../utils';\n\nexport interface ValidatePayloadResult {\n  message: string[];\n  success: boolean;\n}\n\ninterface TestProps {\n  config: ConfigData;\n  data: DataData;\n  proxy: ProxyData;\n  updateConfig: (data: ConfigData) => void;\n  updateData: (data: DataData) => void;\n  updateProxy: (data: ProxyData) => void;\n  validation: ValidatePayloadResult;\n}\n\ninterface TestState {\n  isLoading: boolean;\n  hasRun: boolean;\n  response: {\n    headers?: Headers,\n    data?: string,\n  };\n}\n\nclass Test extends React.PureComponent<TestProps, TestState> {\n\n  baseState: TestState;\n\n  constructor(props: TestProps) {\n    super(props);\n    this.state = {\n      // is the request executing\n      isLoading: false,\n      // has there been an execution\n      hasRun: false,\n      // hold the response\n      response: {},\n    };\n    this.baseState = this.state;\n  }\n\n  componentDidUpdate(prevProps: TestProps) {\n    if (utils.hasProxyChanged(prevProps.proxy, this.props.proxy)) {\n      this.setState(this.baseState);\n    }\n  }\n\n\n  getDestination = (): string => {\n    const destination = this.props.config.domain + this.props.config.endpoint;\n    return this.props.proxy.isEnabled\n      ? this.props.proxy.url + destination\n      : destination;\n  }\n\n  getFetchData = () => {\n    const fetchData: RequestInit = {\n      method: this.props.config.method,\n      body: null,\n      headers: new Headers(\n        this.props.config.headers.map(header => [header.type, header.value]),\n      ),\n    };\n\n    if (utils.methodHasPayload(this.props.config.method)) {\n      fetchData.body = JSON.stringify(this.props.data.data[this.props.data.type]);\n    }\n    return fetchData;\n  }\n\n  onTest = async () => {\n    this.setState(\n      {\n        isLoading: true,\n        hasRun: true,\n        response: {}\n      },\n      async () => {\n      // Todo: Run our own proxy service instead of using this.\n      const dest = new URL(this.getDestination());\n      let data = null;\n      let response: Response | null = null;\n      try {\n        response = await fetch(\n          dest.href,\n          this.getFetchData(),\n        );\n        data = await response.text();\n        this.setState({\n          isLoading: false,\n          response: {\n            headers: response.headers as Headers,\n            data,\n          }\n        });\n      } catch (_) {\n        this.setState({\n          isLoading: false,\n        });\n      }\n    });\n  }\n\n  render () {\n    if (!this.props.validation.success) {\n      return (\n        <div className=\"row\">\n          <div className=\"Test Disabled\">\n            {\n              this.props.validation.message.map(\n                (string, idx) => (\n                  <label key={`validation_${idx}`}> {string} </label>\n                ),\n              )\n            }\n          </div>\n        </div>\n      )\n    }\n    if (this.state.isLoading) {\n      return (\n        <div className=\"row\">\n          <Loading />\n        </div>\n      );\n    }\n\n    const proxyMessage = `${this.props.proxy.isEnabled ? 'through Proxy' : ''} to ${this.getDestination()}`;\n\n    return (\n      <>\n        <Request\n          hasRun={this.state.hasRun}\n          proxy={this.props.proxy}\n          onUpdateProxy={this.props.updateProxy}\n          shouldConfirm={false} // Todo: We need to ensure that everything matches up\n          onRequest={this.onTest} />\n        {\n          this.state.hasRun && (\n            this.state.response.headers && this.state.response.data\n              ? (\n                <>\n                  <div className=\"row\">\n                    <Notice\n                      className=\"twelve columns u-full-width\"\n                      heading=\"Request complete\"\n                      content={`Request sent ${proxyMessage}`} />\n                  </div>\n                  <div className=\"row\">\n                    <FetchResponse\n                      headers={this.state.response.headers}\n                      data={this.state.response.data} />\n                  </div>\n                </>)\n              : (\n                <div className=\"row\">\n                  <Notice\n                    className=\"twelve columns u-full-width\"\n                    heading=\"Request Failed\"\n                    content={`Request couldn't be sent ${proxyMessage}`} />\n                </div>\n              )\n          )\n        }\n      </>\n    );\n  };\n}\n\nexport default Test;\n","import React from 'react';\nimport Config, {ConfigData} from './components/config/Config';\nimport Data, {DataData} from './components/data/Data';\nimport Heading from './components/heading/Heading';\nimport Output from './components/output/Output';\nimport {ProxyData} from './components/test/request/proxy/Proxy';\nimport Test, {ValidatePayloadResult} from './components/test/Test';\n\nimport './css/App.css'\n\nimport * as utils from './utils';\n\nimport {\n  DataType,\n  HTTPMethods,\n  OutputType,\n} from './enums';\n\ninterface OutputState {\n  type: OutputType;\n}\n\ninterface AppState {\n  config: ConfigData;\n  data: DataData;\n  output: OutputState;\n  proxy: ProxyData;\n  validation: ValidatePayloadResult;\n}\n\ninterface AppProps {}\n\nexport default class App extends React.Component<AppProps, AppState> {\n\n  onConfigChange = (config: ConfigData): void => {\n    this.setState({\n      config,\n    }, () => this.setState({validation: this.validatePayload()}));\n  }\n\n  onDataChange = (data: DataData): void => {\n    this.setState({\n      data,\n    }, () => this.setState({validation: this.validatePayload()}));\n  }\n\n  onUpdateProxy = (proxy: ProxyData): void => {\n    this.setState({\n      proxy,\n    });\n  }\n\n  constructor(props: AppProps) {\n    super(props);\n    this.state = {\n      config: {\n        method: HTTPMethods.GET,\n        headers: [],\n        domain: 'https://api.github.com',\n        endpoint: '/users/octocat',\n      },\n      data: {\n        type: DataType.JSON,\n        data: {\n          json: {test: \"value\"},\n          graphQL: {query: \"query {viewer {username}}\"},\n          form: null,\n        },\n      },\n      output: {\n        type: OutputType.CURL,\n      },\n      proxy: {\n        url: utils.PROXY,\n        isEnabled: true,\n      },\n      validation: {\n        message: [],\n        success: true,\n      }\n    }\n  }\n\n  validatePayload = (): ValidatePayloadResult => {\n    const result = {\n      message: [] as string[],\n      success: true,\n    };\n    if (!utils.isValidMethod(this.state.config.method)) {\n      result.message.push(\n        `Invalid ${this.state.config.method}, check settings above`,\n      );\n      result.success = false;\n    }\n    if (!utils.isValidHeaders(this.state.config.headers)) {\n      result.message.push(\n        `Invalid headers, check settings above`,\n      );\n      result.success = false;\n    }\n    if (!utils.isValidURL(\n      this.state.config.domain,\n      this.state.config.endpoint,\n    )) {\n      result.message.push(\n        `Invalid URL ${this.state.config.domain} or ${this.state.config.endpoint}, check settings above`,\n      );\n      result.success = false;\n    }\n\n    if (\n      this.state.data.type === DataType.GQL\n      && !utils.isValidGraphQLString(this.state.data.data.graphQL.query)) {\n        result.message.push(\n          `Invalid GraphQL string, check settings above`,\n        );\n        result.success = false;\n    }\n    return result;\n  }\n\n\n\n  render () {\n    const showData = utils.methodHasPayload(this.state.config.method);\n    return (\n      <div className='container App'>\n        <div className=\"row\">\n          <Heading imageSrc={process.env.PUBLIC_URL + '/images/banner.png'} />\n        </div>\n        <div className=\"row\">\n          <Config\n            data={this.state.config}\n            updateConfig={this.onConfigChange} />\n        </div>\n        <div className=\"row\">\n          {\n            showData && (\n            <div className=\"six columns\">\n              <Data\n                className=\"u-full-width\"\n                data={this.state.data}\n                updateData={this.onDataChange} />\n            </div>)\n          }\n          <div className={(showData ? 'six' : 'twelve') + ' columns'}>\n            <Output\n              className=\"u-full-width\"\n              config={this.state.config}\n              data={this.state.data}\n              output={this.state.output.type}\n              updateConfig={this.onConfigChange}\n              updateData={this.onDataChange} />\n          </div>\n        </div>\n        <div className=\"row\">\n          <Test\n            validation={this.state.validation}\n            config={this.state.config}\n            data={this.state.data}\n            proxy={this.state.proxy}\n            updateConfig={this.onConfigChange}\n            updateData={this.onDataChange}\n            updateProxy={this.onUpdateProxy} />\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}