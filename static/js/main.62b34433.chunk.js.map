{"version":3,"sources":["enums/index.tsx","components/shared/Select.tsx","components/config/method/Method.tsx","components/data/graphql/GraphQL.tsx","components/shared/Button.tsx","components/config/headers/type/Types.tsx","components/shared/Input.tsx","components/config/headers/value/Value.tsx","components/config/headers/Headers.tsx","components/config/destination/domain/Domain.tsx","components/config/destination/endpoint/Endpoint.tsx","components/config/destination/Destination.tsx","components/shared/Notice.tsx","components/shared/Toggler.tsx","components/config/Config.tsx","components/shared/Copy.tsx","components/shared/Saving.tsx","components/shared/TextArea.tsx","components/data/graphql/type/Type.tsx","components/data/json/Json.tsx","components/data/selector/Selector.tsx","components/data/Data.tsx","components/heading/Heading.tsx","components/history/clearhistory/ClearHistory.tsx","components/history/listhistory/listhistoryentry/loadhistoryentry/LoadHistoryEntry.tsx","components/history/listhistory/listhistoryentry/ListHistoryEntry.tsx","components/history/listhistory/ListHistory.tsx","components/history/History.tsx","components/output/selector/Selector.tsx","utils/index.ts","components/output/curl/Curl.tsx","components/output/Output.tsx","components/shared/Checkbox.tsx","components/test/request/proxy/Proxy.tsx","components/shared/Confirm.tsx","components/test/request/Request.tsx","components/shared/Table.tsx","components/test/fetchresponse/responseheaders/ResponseHeaders.tsx","components/test/fetchresponse/responsejson/ResponseJson.tsx","components/test/fetchresponse/responseraw/ResponseRaw.tsx","components/test/fetchresponse/FetchResponse.tsx","components/shared/Loading.tsx","components/test/Test.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["HTTPMethods","HTTPHeaders","DataType","OutputType","InputTypes","ColumnCount","JsonValueTypes","Select","props","selected","react_default","a","createElement","Fragment","label","className","name","size","style","disabled","isDisabled","multiple","isMultiple","onChange","value","values","map","i","key","concat","GraphQLType","Method","width","shared_Select","e","target","onUpdate","Object","Button","isPrimary","id","onClick","onClickRaw","preventDefault","clickValue","children","Types","isFullWidth","index","Input","type","TEXT","checked","isChecked","Value","shared_Input","Headers","updateType","header","updateValue","addHeader","length","removeHeader","currentTarget","split","pop","undefined","parseInt","filter","includes","shared_Button","index_es","icon","faMinus","type_Types","toConsumableArray","value_Value","faPlus","Domain","URL","Endpoint","Destination","domain","endpoint","domain_Domain","endpoint_Endpoint","Notice","heading","Toggler","onToggle","isToggled","Config","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateMethod","data","method","updateConfig","updateHeaders","headers","push","updateDestination","toggleConfigSettings","setState","prevState","showConfigSettings","state","destination","shared_Toggler","headers_Headers","TWELVE","method_Method","TWO","destination_Destination","TEN","shared_Notice","href","React","PureComponent","Copy","copy","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","navigator","clipboard","writeText","content","stop","apply","arguments","faCopy","Saving","react_transition_group","transitionName","transitionLeave","transitionEnter","transitionEnterTimeout","isSaved","faSave","TextArea","onChangeDirect","Component","Type","GraphQL","updateGraphQL","draft","getDocAndTypeFromGQLString","gql","onUpdateData","query","_","replace","pretty","PrettyMe","shared_Saving","type_Type","faMagic","shared_Copy","TextArea_TextArea","ref","background","process","backgroundAttachment","backgroundRepeat","backgroundColor","color","doc","parse","definitions","operation","print","newProps","Json","updateJson","hasDraft","object","JSON","stringify","Selector","Data","Json_Json","json","updateData","GQL","GraphQL_GraphQL","graphQL","selector_Selector","Heading","src","imageSrc","alt","ClearHistory","clear","faTrash","LoadHistoryEntry","config","faUpload","ListHistoryEntry","url","toLowerCase","loadhistoryentry_LoadHistoryEntry","ListHistory","history","historyEntry","listhistoryentry_ListHistoryEntry","History","loadHistory","item","window","localStorage","getItem","payload","toggleHistory","showHistory","faHistory","listhistory_ListHistory","clearhistory_ClearHistory","clearHistory","methodHasPayload","GET","HEAD","PROXY","regEx","curlHeader","curlMethod","curlData","dateTimeZoneChars","jsonData","newLine","newLineAndTab","multipleSpaces","quotes","singleEscapedNewLine","isValidMethod","string","isValidURL","charAt","possUrl","match","isValidHeaders","types","reduce","curr","isValidGraphQLString","isStringANumber","isNaN","isStringADate","Date","isStringBooleanOrNull","isStringAURL","isStorageAvailable","storage","x","setItem","removeItem","addToHistory","keys","removeKey","sort","shift","getTime","toString","console","log","getHistory","requestHistory","b","a_id","b_id","Curl","serializerCurl","hasNewConfig","hasNewData","getMethod","getHeaders","newData","getData","domainAndEndpoint","getDomainAndEndpoint","FORM","updateCurl","curl","getValue","regex","utils","exec","join","parsePayloadString","Output","output","CURL","Curl_Curl","output_selector_Selector","Checkbox","isCheckedLabel","isNotCheckedLabel","CHECKBOX","Proxy","toggleProxySettings","showProxySettings","onUpdateProxyUrl","onUpdateProxy","isEnabled","proxy","onUpdateProxyEnabled","isExpanded","placeholder","shared_Checkbox","Confirm","confirm","message","onConfirm","onCancel","Request","onRequest","Proxy_Proxy","hasRun","shouldConfirm","shared_Confirm","Table","row","j","data-label","ResponseHeaders","toggleHeaders","showHeaders","_this2","shared_Table","Array","from","Header","get","ResponseJson","toggleJson","showJson","replacer","p1","p2","p3","p4","part","indent","end","valueClass","STRING","NUMBER","DATE","BOOLEAN","ReactDOMServer","renderToString","repeat","dangerouslySetInnerHTML","__html","ResponseRaw","toggleRaw","showRaw","FetchResponse","ResponseHeaders_ResponseHeaders","ResponseRaw_ResponseRaw","ResponseJson_ResponseJson","Loading","Test","baseState","getDestination","getFetchData","fetchData","body","onTest","_callee2","_context2","isLoading","response","dest","fetch","sent","text","t0","prevProps","prevProxy","newProxy","validation","success","idx","shared_Loading","proxyMessage","request_Request","updateProxy","fetchresponse_FetchResponse","App","onConfigChange","validatePayload","onDataChange","onProxyChange","result","test","form","showData","heading_Heading","Config_Config","output_Output","data_Data","History_History","test_Test","Boolean","location","hostname","ReactDOM","render","App_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.62b34433.chunk.js","sourcesContent":["export enum HTTPMethods {\n  DELETE = \"DELETE\",\n  GET = \"GET\",\n  HEAD = \"HEAD\",\n  PATCH = \"PATCH\",\n  POST = \"POST\",\n  PUT = \"PUT\",\n};\n\nexport enum HTTPHeaders {\n  \"A-IM\" = \"A-IM\",\n  Accept = \"Accept\",\n  \"Accept-Charset\" = \"Accept-Charset\",\n  \"Accept-Datetime\" = \"Accept-Datetime\",\n  \"Accept-Encoding\" = \"Accept-Encoding\",\n  \"Accept-Language\" = \"Accept-Language\",\n  \"Access-Control-Request-Method\" = \"Access-Control-Request-Method\",\n  \"Access-Control-Request-Headers\" = \"Access-Control-Request-Headers\",\n  Authorization = \"Authorization\",\n  Authentication = \"Authentication\",\n  \"Cache-Control\" = \"Cache-Control\",\n  \"Content-Length\" = \"Content-Length\",\n  \"Content-MD5\" = \"Content-MD5\",\n  \"Content-Type\" = \"Content-Type\",\n  Cookie = \"Cookie\",\n  Date = \"Date\",\n  Expect = \"Expect\",\n  Forwarded = \"Forwarded\",\n  From = \"From\",\n  Host = \"Host\",\n  \"HTTP2-Settings\" = \"HTTP2-Settings\",\n  \"If-Match\" = \"If-Match\",\n  \"If-Modified-Since\" = \"If-Modified-Since\",\n  \"If-None-Match\" = \"If-None-Match\",\n  \"If-Range\" = \"If-Range\",\n  \"If-Unmodified-Since\" = \"If-Unmodified-Since\",\n  \"Max-Forwards\" = \"Max-Forwards\",\n  Pragma = \"Pragma\",\n  \"Proxy-Authorization\" = \"Proxy-Authorization\",\n  Range = \"Range\",\n  Referer = \"Referer\",\n  TE = \"TE\",\n  Upgrade = \"Upgrade\",\n  \"User-Agent\" = \"User-Agent\",\n  Via = \"Via\",\n  Warning = \"Warning\",\n}\n\nexport enum DataType {\n  FORM = \"form\",\n  JSON = \"json\",\n  GQL = \"graphQL\",\n}\n\nexport enum OutputType {\n  CURL = \"curl\",\n}\n\nexport enum InputTypes {\n  BUTTON = \"button\",\n  CHECKBOX = \"checkbox\",\n  COLOR = \"color\",\n  DATE = \"date\",\n  DATETIME_LOCAL = \"datetime-local\",\n  EMAIL = \"email\",\n  FILE = \"file\",\n  HIDDEN = \"hidden\",\n  IMAGE = \"image\",\n  MONTH = \"month\",\n  NUMBER = \"number\",\n  PASSWORD = \"password\",\n  RADIO = \"radio\",\n  RANGE = \"range\",\n  RESET = \"reset\",\n  SEARCH = \"search\",\n  SUBMIT = \"submit\",\n  TEL = \"tel\",\n  TEXT = \"text\",\n  TIME = \"time\",\n  URL = \"url\",\n  WEEK = \"week\",\n}\n\nexport enum ColumnCount {\n  ONE = 'one column',\n  TWO = 'two columns',\n  THREE = 'three columns',\n  FOUR = 'four columns',\n  FIVE = 'five columns',\n  SIX = 'six columns',\n  SEVEN = 'seven columns',\n  EIGHT = 'eight columns',\n  NINE = 'nine columns',\n  TEN =  'ten columns',\n  ELEVEN = 'eleven columns',\n  TWELVE = 'twelve columns',\n}\n\nexport enum JsonValueTypes {\n  NUMBER = 'number',\n  DATE = 'date',\n  BOOLEAN = 'boolean',\n  URL = 'url',\n  STRING = 'string',\n}\n","import React from 'react';\n\ninterface selectProps {\n  className?: string;\n  isDisabled?: boolean;\n  label?: string;\n  name?: string;\n  onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n  selected?: string | string[] | null;\n  style?: {[key: string]: string};\n  values: string[];\n  isMultiple?: boolean;\n  size?: number;\n}\n\nconst Select: React.FunctionComponent<selectProps> = (props) => {\n  const selected = props.selected || '';\n  return (\n    <>\n    { props.label && (<label>{props.label}</label>) }\n    <select\n      className={props.className || ''}\n      name={props.name || ''}\n      size={props.size || 0}\n      style={props.style || {}}\n      disabled={props.isDisabled || false}\n      multiple={props.isMultiple || false}\n      onChange={props.onChange || null}\n      value={selected}>\n      <option value=\"\" disabled>Please Select</option>\n      {props.values.map((value: string, i:number) => (\n        <option\n          value={value}\n          key={`${value}_${i}`}>\n          {value}\n        </option>\n      ))}\n    </select>\n    </>\n  );\n}\n\nexport default Select;\n","import React from 'react';\n\nimport Select from '../../shared/Select';\n\nimport './css/Method.css'\n\nimport {\n  ColumnCount,\n  HTTPMethods,\n} from '../../../enums/';\n\ninterface methodProps {\n  onUpdate: (value: HTTPMethods) => void;\n  selected: HTTPMethods;\n  width: ColumnCount;\n};\n\nconst Method: React.FunctionComponent<methodProps> = (props) => {\n\n  const updateSelected = (\n    e: React.ChangeEvent<HTMLSelectElement>,\n  ): void => {\n    const value: HTTPMethods = e.target.value as HTTPMethods;\n    props.onUpdate(value);\n  }\n\n  return (\n    <div className={props.width}>\n      <Select\n        className=\"u-full-width Method\"\n        label=\"HTTP Method\"\n        onChange={updateSelected}\n        selected={props.selected}\n        values={Object.values(HTTPMethods)} />\n    </div>\n  );\n}\n\nexport default Method;\n","import React from 'react';\nimport {parse, print, OperationDefinitionNode} from 'graphql';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMagic } from '@fortawesome/free-solid-svg-icons';\n\nimport Button from '../../shared/Button';\nimport Copy from '../../shared/Copy';\nimport Saving from '../../shared/Saving';\nimport TextArea from '../../shared/TextArea';\nimport Type from './type/Type';\n\nimport './css/GraphQL.css';\n\nimport {gqlPayloadType} from '../Data';\n\nexport enum GraphQLType {\n  QUERY = 'query',\n  MUTATION = 'mutation',\n}\n\ninterface ParsedGQL {\n  gql: string;\n  type: GraphQLType;\n}\n\ninterface GraphQLProps {\n  data: gqlPayloadType;\n  onUpdateData: (value: gqlPayloadType) => void;\n}\n\ninterface GraphQLState {\n  draft: string;\n  isSaved: boolean;\n  type: GraphQLType;\n}\n\nexport default class GraphQL extends React.PureComponent<GraphQLProps, GraphQLState> {\n\n  constructor(props: GraphQLProps) {\n    super(props);\n    const gql = GraphQL.getDocAndTypeFromGQLString(props.data.query);\n    this.state = {\n      draft: gql.gql,\n      isSaved: true,\n      type: gql.type,\n    }\n  }\n\n  static getDocAndTypeFromGQLString(\n    gql: string\n  ): ParsedGQL {\n    const doc = parse(gql);\n    const def: OperationDefinitionNode = doc.definitions[0] as OperationDefinitionNode;\n    const type = def.operation as GraphQLType;\n    return {\n      gql: print(doc),\n      type\n    };\n  }\n\n  static getDerivedStateFromProps(newProps: GraphQLProps, state: GraphQLState): GraphQLState {\n    if (newProps.data.query !== state.draft && !state.isSaved) {\n      return state;\n    }\n    try {\n      const gql = GraphQL.getDocAndTypeFromGQLString(newProps.data.query);\n      return {\n        draft: newProps.data.query,\n        isSaved: true,\n        type: gql.type,\n      };\n\n    } catch (e) {\n      return state;\n    }\n  }\n\n  updateGraphQL = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const draft = e.target.value;\n    try {\n      const gql = GraphQL.getDocAndTypeFromGQLString(draft);\n      if (gql.gql !== this.state.draft) {\n        this.props.onUpdateData(\n          // replace any existing operation with an empty string\n          {query: draft}\n        );\n        this.setState({isSaved: true});\n      } else {\n        this.setState({\n          draft,\n          isSaved:false,\n        });\n      }\n    } catch (_) {\n      this.setState({\n        draft,\n        isSaved: false,\n      });\n    }\n\n\n  }\n\n  updateType = (type: GraphQLType): void => {\n    this.props.onUpdateData(\n      {query: type +  ' ' + this.state.draft.replace(this.state.type, '')},\n    );\n  }\n\n  pretty = () => {\n    this.props.onUpdateData(\n      {query: this.state.type + ' ' + GraphQL.PrettyMe(this.state.draft).replace(this.state.type, '')},\n    );\n  }\n\n  static PrettyMe(gql: string): string {\n    try {\n      return print(parse(gql));\n    } catch (_) {\n      return gql;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"GraphQL\">\n        <div className=\"row\">\n          <div className=\"two columns\">\n            <Saving isSaved={this.state.isSaved} />\n          </div>\n          <div className=\"two columns\">\n            <Type\n              className=\"u-full-width\"\n              selected={this.state.type}\n              onUpdate={this.updateType} />\n          </div>\n          <div className=\"two columns\">\n            <Button\n              className=\"u-full-width\"\n              onClick={this.pretty}\n              isDisabled={!this.state.isSaved}\n              isPrimary={false}>\n              <FontAwesomeIcon icon={faMagic} size=\"lg\" />\n            </Button>\n          </div>\n          <div className=\"two columns\">\n            <Copy\n              className=\"u-pull-right\"\n              content={GraphQL.PrettyMe(this.state.draft)} />\n          </div>\n        </div>\n        <div className=\"row\">\n          <TextArea\n            isFullWidth={true}\n            onChangeDirect={this.updateGraphQL}\n            ref=\"input_gql\"\n            style={{\n              background: `url('${process.env.PUBLIC_URL}/images/textarea.png')`,\n              backgroundAttachment: 'local',\n              backgroundRepeat: 'no-repeat',\n              backgroundColor: '#19404A',\n              color: '#EEE8D5',\n            }}\n            value={this.state.draft} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\ninterface ButtonProps {\n  className?: string;\n  id?: string;\n  isDisabled?: boolean;\n  isPrimary: boolean;\n  label?: string;\n  onClick: (val: any) => void;\n  onClickRaw?: (e: React.MouseEvent<HTMLElement>) => void;\n  clickValue?: any;\n}\n\nconst Button: React.FunctionComponent<ButtonProps> = (props) => {\n  const clickHandler = (e: React.MouseEvent) => {\n    e.preventDefault();\n    props.onClick(props.clickValue);\n  }\n\n  return (\n    <button\n      className={(props.isPrimary ? 'button-primary ' : ' ') + props.className || ' '}\n      disabled={props.isDisabled}\n      id={props.id}\n      onClick={props.onClickRaw || clickHandler}>\n      {props.children || props.label || ''}\n      </button>\n  );\n}\n\nexport default Button;\n","import React from 'react';\n\nimport Select from '../../../shared/Select';\n\nimport './css/Types.css';\n\nimport {HTTPHeaders} from '../../../../enums';\n\ninterface TypeProps {\n  index: number;\n  isFullWidth: boolean;\n  values: (HTTPHeaders | string)[];\n  selected: HTTPHeaders | string;\n  onUpdate: (value: HTTPHeaders, index: number) => void;\n}\n\nconst Types: React.FunctionComponent<TypeProps> = (props) => {\n  const updateSelected = (\n    e: React.ChangeEvent<HTMLSelectElement>,\n  ): void => {\n    const value: HTTPHeaders = e.target.value as HTTPHeaders;\n    props.onUpdate(value, props.index);\n  }\n\n  return (\n    <Select\n      className={(props.isFullWidth ? 'u-full-width' : '') + ' Types'}\n      onChange={updateSelected}\n      selected={props.selected}\n      values={props.values} />\n  );\n}\n\nexport default Types;\n","// Import React\nimport React from 'react';\n\n// Import Enums\nimport {InputTypes} from '../../enums';\n\n// Define Interfaces\ninterface InputProps {\n  className?: string;\n  isChecked?: boolean\n  isDisabled?: boolean;\n  label?: string;\n  name?: string;\n  id?: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  placeholder?: string;\n  type?: InputTypes;\n  value?: string;\n}\n\n// Input Component\nconst Input: React.FunctionComponent<InputProps> = (props) => (\n  <>\n  { props.label && (<label>{props.label}</label>) }\n  <input\n    type={props.type || InputTypes.TEXT}\n    checked={props.isChecked}\n    className={props.className || ''}\n    name={props.name || ''}\n    id={props.id || ''}\n    value={props.value || ''}\n    disabled={props.isDisabled}\n    onChange={props.onChange}\n     />\n  </>\n);\n\nexport default Input;\n","import React from 'react';\n\nimport Input from '../../../shared/Input'\n\nimport './css/Value.css'\n\ninterface ValueProps {\n  index: number;\n  isFullWidth: boolean;\n  value: string;\n  onUpdate: (value: string, index: number) => void;\n}\n\nconst Value: React.FunctionComponent<ValueProps> = (props) => {\n  const updateValue = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    props.onUpdate(e.target.value, props.index);\n  }\n\n  return (\n    <Input\n      className={(props.isFullWidth ? 'u-full-width' : '') + ' Value'}\n      onChange={updateValue}\n      value={props.value} />\n  );\n}\n\nexport default Value;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faMinus } from '@fortawesome/free-solid-svg-icons';\n\nimport Button from '../../shared/Button';\n\nimport Types from './type/Types';\nimport Value from './value/Value';\n\nimport './css/Headers.css';\n\nimport {\n  ColumnCount,\n  HTTPHeaders,\n} from '../../../enums';\n\nexport interface Header {\n  type: HTTPHeaders | string;\n  value: string;\n};\n\ninterface HeadersProps {\n  onUpdate: (value: Header | null, index: number) => void;\n  selected: Header[];\n  width: ColumnCount,\n}\n\n\nconst Headers: React.FunctionComponent<HeadersProps> = (props) => {\n\n  const updateType = (type: HTTPHeaders, index: number): void => {\n    const header = props.selected[index];\n    header.type = type;\n    props.onUpdate(header, index);\n  }\n\n  const updateValue = (value: string, index: number): void => {\n    const header = props.selected[index];\n    header.value = value;\n    props.onUpdate(header, index);\n  }\n\n  const addHeader = (e: React.MouseEvent<HTMLElement>): void => {\n    e.preventDefault();\n    // create a pending header, add this to the end of the index\n    props.onUpdate(\n      {\n        type: '',\n        value: '',\n      },\n      props.selected.length,\n    );\n  }\n\n  const removeHeader = (e: React.MouseEvent<HTMLElement>): void => {\n    e.preventDefault();\n    const index = e.currentTarget.id.split('_').pop();\n\n    if (index === undefined) {\n      // oh no...\n      return;\n    }\n    props.onUpdate(null, parseInt(index));\n  }\n\n  // Don't allow duplicate headers.\n  const selected = props.selected.map(header => header.type);\n  const values = Object.values(HTTPHeaders).filter(header => !selected.includes(header));\n\n  return (\n\n    <div className={props.width + ' Headers'}>\n      <div className=\"row\">\n        <div className=\"twelve rows\">\n          <label> HTTP Headers </label>\n        </div>\n      </div>\n\n        {\n          props\n            .selected\n            .map(\n              (header: Header, index: number) => (\n\n                <div className=\"row\" key={`${header.type}_${index}`}>\n                {\n                  // TODO: selected and values aren't behaving below\n                }\n                  <div className=\"two columns\">\n                    <Button\n                      id={`remove_${index}`}\n                      isPrimary={false}\n                      className='u-full-width'\n                      onClick={() => {}}\n                      onClickRaw={removeHeader}>\n                      <FontAwesomeIcon icon={faMinus} size=\"lg\" />\n                    </Button>\n                  </div>\n                  <div className=\"four columns\">\n                    <Types\n                      index={index}\n                      isFullWidth={true}\n                      values={[...values, header.type]}\n                      selected={header.type}\n                      onUpdate={updateType} />\n                  </div>\n                  <div className=\"four columns\">\n                    <Value\n                      index={index}\n                      isFullWidth={true}\n                      value={header.value || ''}\n                      onUpdate={updateValue} />\n                  </div>\n                  <div className=\"two columns\">\n                    <Button\n                      isPrimary={false}\n                      className='u-full-width'\n                      onClick={() => {}}\n                      onClickRaw={addHeader}>\n                      <FontAwesomeIcon icon={faPlus} size=\"lg\" />\n                    </Button>\n                  </div>\n                </div>\n            )\n          )\n        }\n        {\n          props.selected.length === 0 && (\n            <div className=\"row\">\n              <Button\n                isPrimary={false}\n                className='u-full-width'\n                onClick={() => {}}\n                onClickRaw={addHeader}>\n                <FontAwesomeIcon icon={faPlus} size=\"lg\" />\n              </Button>\n            </div>\n          )\n        }\n    </div>\n  );\n}\n\nexport default Headers;\n","import React from 'react';\n\nimport Input from '../../../shared/Input'\n\nimport './css/Domain.css';\n\nimport {InputTypes} from '../../../../enums';\n\ninterface DomainProps {\n  isFullWidth: boolean;\n  value: string;\n  onUpdate: (value: string) => void;\n}\n\nconst Domain: React.FunctionComponent<DomainProps> = (props) => {\n  const updateValue = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    props.onUpdate(e.target.value);\n  }\n\n  return (\n    <Input\n      className={(props.isFullWidth ? 'u-full-width' : '') + ' Domain'}\n      onChange={updateValue}\n      type={InputTypes.URL}\n      value={props.value} />\n  );\n}\n\nexport default Domain;\n","import React from 'react';\n\nimport Input from '../../../shared/Input'\n\nimport './css/Endpoint.css';\n\ninterface EndpointProps {\n  isFullWidth: boolean;\n  value: string;\n  onUpdate: (value: string) => void;\n}\n\nconst Endpoint: React.FunctionComponent<EndpointProps> = (props) => {\n  const updateValue = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    ;\n    props.onUpdate(e.target.value);\n  }\n\n  ;\n  return (\n    <Input\n      className={(props.isFullWidth ? 'u-full-width' : '') + ' Endpoint'}\n      onChange={updateValue}\n      value={props.value} />\n  );\n}\n\nexport default Endpoint;\n","import React from 'react';\n\nimport Domain from './domain/Domain';\nimport Endpoint from './endpoint/Endpoint';\n\nimport './css/Destination.css';\n\nimport {ColumnCount} from '../../../enums';\n\ntype DomainOrEndpoint = 'domain' | 'endpoint';\n\ninterface DestinationProps {\n  onUpdate: (domain: string, endpoint: string) => void;\n  domain: string;\n  endpoint: string;\n  width: ColumnCount;\n}\n\nconst Destination: React.FunctionComponent<DestinationProps> = (props) => {\n\n  const onUpdate = (value: string, type: DomainOrEndpoint): void => {\n    props.onUpdate(\n      (type === 'domain') ? value : props.domain,\n      (type === 'endpoint') ? value : props.endpoint,\n    );\n  }\n\n  const onUpdateEndpoint = (endpoint: string): void => {\n    onUpdate(endpoint, 'endpoint');\n  }\n\n  const onUpdateDomain = (domain: string): void => {\n    onUpdate(domain, 'domain');\n  }\n\n  return (\n    <div className={props.width + ' Destination'}>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n        <label> Destination </label>\n        </div>\n      </div>\n      <div className=\"row\">\n          <div className=\"six columns\">\n            <Domain\n              isFullWidth={true}\n              onUpdate={onUpdateDomain}\n              value={props.domain} />\n          </div>\n          <div className=\"six columns\">\n            <Endpoint\n              isFullWidth={true}\n              onUpdate={onUpdateEndpoint}\n              value={props.endpoint} />\n          </div>\n        </div>\n      </div>\n  );\n}\n\nexport default Destination;\n","/**\n * @file Notice component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport './css/Notice.css';\n\ninterface NoticeProps {\n  className?: string;\n  heading: string;\n}\n\nconst Notice: React.FunctionComponent<NoticeProps> = (props) => {\n\n  return (\n    <div className={(props.className || '') + ' Notice'}>\n      <h4> {props.heading} </h4>\n      <>\n        {props.children}\n      </>\n    </div>\n  )\n};\n\nexport default Notice;\n","import React from 'react';\n\nimport Button from './Button';\n\ninterface TogglerProps {\n  className?: string;\n  label: string | JSX.Element;\n  onToggle: () => void;\n  isToggled: boolean;\n}\n\nconst Toggler: React.FunctionComponent<TogglerProps> = (props) => {\n\n  return (\n    <div>\n      <div className=\"row\">\n      <Button\n        className=\"u-full-width\"\n        isPrimary={false}\n        onClick={props.onToggle}>\n        {\n          typeof props.label === 'string'\n            ? ((!props.isToggled ? 'Show ' : 'Hide ') + props.label)\n            : props.label\n        }\n\n      </Button>\n      </div>\n      {\n        props.isToggled && (\n          <div className={props.className || ''}>\n          <div className=\"row\">{props.children}</div>\n          </div>\n        )\n      }\n    </div>\n  )\n}\n\nexport default Toggler;\n","import React from 'react';\n\nimport Method from './method/Method';\nimport Headers, { Header } from './headers/Headers';\nimport Destination from './destination/Destination';\n\nimport Notice from '../shared/Notice';\nimport Toggler from '../shared/Toggler';\n\nimport {\n  ColumnCount,\n  HTTPMethods,\n} from '../../enums';\n\nexport interface ConfigData {\n  method: HTTPMethods;\n  headers: Header[];\n  domain: string;\n  endpoint: string;\n}\n\ninterface ConfigProps {\n  data: ConfigData;\n  updateConfig: (data: ConfigData) => void;\n}\n\ninterface ConfigState {\n  showConfigSettings: boolean;\n}\n\nexport default class Config extends React.PureComponent <\n  ConfigProps,\n  ConfigState> {\n\n  constructor(props: ConfigProps) {\n    super(props);\n    this.state = {\n      showConfigSettings: true,\n    };\n  }\n\n  updateMethod = (value: HTTPMethods) => {\n    const data = this.props.data;\n    data.method = value;\n    this.props.updateConfig(data);\n  }\n\n  updateHeaders = (value: Header | null, index: number): void => {\n    const data = this.props.data;\n    if (!data.headers[index] && value) {\n      data.headers.push(value);\n    } else {\n      if (!value) {\n        delete data.headers[index];\n        data.headers = data.headers.filter(header => header);\n      } else {\n        data.headers[index] = value;\n      }\n    }\n    this.props.updateConfig(data);\n  }\n\n  updateDestination = (domain: string, endpoint: string) => {\n    const data = this.props.data;\n    data.domain = domain;\n    data.endpoint = endpoint;\n    this.props.updateConfig(data);\n  }\n\n  toggleConfigSettings = () => {\n    this.setState(prevState => ({\n      showConfigSettings: !prevState.showConfigSettings,\n    }));\n  }\n\n  render() {\n    const destination = this.props.data.domain + this.props.data.endpoint;\n    return (\n      <>\n        <div className=\"row\">\n          <Toggler\n            isToggled={this.state.showConfigSettings}\n            className=\"Config\"\n            label=\"Config Settings\"\n            onToggle={this.toggleConfigSettings}>\n            <div className=\"row\">\n              <Headers\n                onUpdate={this.updateHeaders}\n                selected={this.props.data.headers}\n                width={ColumnCount.TWELVE} />\n            </div>\n            <div className=\"row\">\n            <Method\n              selected={this.props.data.method}\n              width={ColumnCount.TWO}\n              onUpdate={this.updateMethod} />\n            <Destination\n              onUpdate={this.updateDestination}\n              domain={this.props.data.domain}\n              endpoint={this.props.data.endpoint}\n              width={ColumnCount.TEN} />\n            </div>\n          </Toggler>\n        </div>\n        {\n          !this.state.showConfigSettings && (\n            <Notice\n              heading=\"Request Config Settings\">\n              Sending a [<strong>{this.props.data.method}</strong>] request\n              to: [<strong><a href={destination}>{destination}</a></strong>]\n              {\n                this.props.data.headers.length > 0 && (\n                  <>\n                    , with the HTTP Headers: {\n                      this.props.data.headers.map(\n                        header => (\n                          <>\n                            <br />\n                            <strong>{header.type}</strong>: <em>{header.value}</em>\n                          </>\n                        )\n                      )\n                    }\n                  </>\n                )\n              }\n            </Notice>\n          )\n        }\n      </>\n    );\n  }\n\n}\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCopy } from '@fortawesome/free-solid-svg-icons';\n\nimport Button from './Button';\n\ninterface CopyProps {\n  className?: string;\n  label?: string;\n  content: string;\n}\n\nconst Copy: React.FunctionComponent<CopyProps> = (props) => {\n\n  const copy = async () => {\n    await navigator.clipboard.writeText(props.content);\n  }\n\n  return (\n    <Button\n      className={props.className || ''}\n      isPrimary={false}\n      onClick={copy}>\n      <FontAwesomeIcon icon={faCopy} size=\"lg\" />\n      </Button>\n  )\n}\n\nexport default Copy;\n","import React from 'react';\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSave } from '@fortawesome/free-solid-svg-icons';\n\nimport './css/Saving.css';\n\ninterface SavingProps {\n  className?: string;\n  isSaved: boolean;\n}\n\nconst Saving: React.FunctionComponent<SavingProps> = (props) => {\n  return (\n    <CSSTransitionGroup\n      transitionName=\"save-notice\"\n      transitionLeave={false}\n      transitionEnter={true}\n      transitionEnterTimeout={500}>\n      <div\n        className={\n          ((props.isSaved) ? 'Saved' : 'NotSaved')\n          +  \" SavingNotice \"\n          + (props.className || '')\n        }\n        key={\"notice-\" + props.isSaved}>\n        <FontAwesomeIcon icon={faSave} size=\"lg\" />\n      </div>\n    </CSSTransitionGroup>\n  )\n}\n\nexport default Saving;\n","import React from 'react';\n\ninterface TextAreaProps {\n  className?: string;\n  isFullWidth: boolean;\n  onChangeDirect?: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  onUpdate?: (value: string) => void;\n  style?: {\n    [key: string]: string,\n  };\n  value: string;\n}\n\ninterface TextAreaState {}\n\nexport default class TextArea extends React.Component<TextAreaProps, TextAreaState> {\n\n  constructor(props: TextAreaProps) {\n    super(props);\n    this.state = {};\n  }\n\n  onUpdate = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    if (this.props.onChangeDirect) {\n      this.props.onChangeDirect(e);\n    } else if (this.props.onUpdate) {\n      this.props.onUpdate(e.target.value);\n    }\n  }\n\n  render () {\n    return (\n      <textarea\n        className={((this.props.isFullWidth) ? 'u-full-width ' : ' ') + this.props.className || '' }\n        onChange={this.onUpdate}\n        style={this.props.style || {}}\n        value={this.props.value}>\n      </textarea>\n    );\n  }\n}\n","import React from 'react';\n\nimport Select from '../../../shared/Select';\n\nimport './css/Type.css';\n\nimport {GraphQLType} from '../GraphQL';\n\ninterface TypeProps {\n  className?: string;\n  selected: GraphQLType;\n  onUpdate: (type: GraphQLType) => void;\n}\n\nconst Type: React.FunctionComponent<TypeProps> = (props) => {\n  const updateSelected = (\n    e: React.ChangeEvent<HTMLSelectElement>,\n  ): void => {\n    const value: GraphQLType = e.target.value as GraphQLType;\n    props.onUpdate(value);\n  }\n\n  return (\n    <Select\n      className={(props.className || '') + \" Type\"}\n      onChange={updateSelected}\n      selected={props.selected}\n      values={Object.values(GraphQLType)} />\n  );\n}\n\nexport default Type\n","/**\n * @file Curl component\n * @author Mattamorphic\n */\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMagic } from '@fortawesome/free-solid-svg-icons';\n\n// Imported components\nimport Button from '../../shared/Button';\nimport Copy from '../../shared/Copy';\nimport Saving from '../../shared/Saving';\nimport TextArea from '../../shared/TextArea';\n\n// CSS imports\nimport './css/Json.css';\n\n// Type imports\nimport {payloadType} from '../Data';\n\ninterface JsonProps {\n  data: payloadType;\n  onUpdateData: (value: payloadType) => void;\n}\n\ninterface JsonState {\n  draft: string;\n  hasDraft: boolean;\n}\n\nexport default class Json extends React.PureComponent<JsonProps, JsonState> {\n\n  constructor(props: JsonProps) {\n    super(props);\n    this.state = {\n      draft: JSON.stringify(props.data, null, 2),\n      hasDraft: false,\n    };\n  }\n\n  /**\n   * @function We have to update the state based on the props, this needs removing\n   *\n   * @param {JsonProps} newProps The new received props\n   * @param {JsonState} state    The current state\n   *\n   * @return {JsonState}\n   */\n  static getDerivedStateFromProps(newProps: JsonProps, state: JsonState): JsonState {\n    let draft = state.draft;\n    let hasDraft = state.hasDraft;\n    if (!state.hasDraft && JSON.stringify(newProps.data) !== JSON.stringify(JSON.parse(state.draft))) {\n      draft = JSON.stringify(newProps.data, null, 2);\n      hasDraft = false;\n    } else {\n      try {\n        JSON.parse(draft);\n        hasDraft = false;\n      } catch(_) {}\n    }\n    return {\n      draft,\n      hasDraft,\n    };\n  }\n\n  /**\n   * @function Update the data from the json string\n   *\n   * @param {string} value The possible json string\n   */\n  updateJson = (value: string) => {\n    this.setState({\n      draft: value,\n      hasDraft: true\n    });\n    try {\n      const object = JSON.parse(value);\n      this.props.onUpdateData(object);\n    } catch (_) {}\n  }\n\n  /**\n   * @function Pretty print the json in the state\n   */\n  pretty = () => {\n    try {\n      this.setState({\n        draft: JSON.stringify(JSON.parse(this.state.draft), null, 2),\n        hasDraft: true,\n      });\n    } catch (_) {\n      return;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Json\">\n        <div className=\"row\">\n          <div className=\"two columns\">\n            <Saving\n              className=\"u-full-width\"\n              isSaved={!this.state.hasDraft} />\n          </div>\n          <div className=\"four columns\">\n            <Button\n              className=\"u-full-width\"\n              onClick={this.pretty}\n              isPrimary={false}>\n              <FontAwesomeIcon icon={faMagic} size=\"lg\" />\n            </Button>\n          </div>\n          <div className=\"four columns\">\n            <Copy\n              className=\"u-full-width\"\n              content={this.state.draft} />\n          </div>\n        </div>\n        <div className=\"row\">\n          <TextArea\n            isFullWidth={true}\n            onUpdate={this.updateJson}\n            style={{\n              background: `url('${process.env.PUBLIC_URL}/images/textarea.png')`,\n              backgroundAttachment: 'local',\n              backgroundRepeat: 'no-repeat',\n              backgroundColor: '#19404A',\n              color: '#EEE8D5',\n            }}\n            value={this.state.draft} />\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react';\n\nimport Select from '../../shared/Select';\n\nimport './css/Selector.css';\n\nimport {DataType} from '../../../enums';\n\ninterface SelectorProps {\n  className?: string;\n  selected: DataType;\n  onUpdate: (value: DataType) => void;\n}\n\nconst Selector: React.FunctionComponent<SelectorProps> = (props) => {\n  const updateSelected = (\n    e: React.ChangeEvent<HTMLSelectElement>,\n  ): void => {\n    const value: DataType = e.target.value as DataType;\n    props.onUpdate(value);\n  }\n\n  return (\n    <Select\n      className={(props.className || '') + \" Selector\"}\n      onChange={updateSelected}\n      selected={props.selected}\n      values={Object.values(DataType)} />\n  );\n}\n\nexport default Selector;\n","import React from 'react';\n\nimport GraphQL from './graphql/GraphQL';\nimport Json from './json/Json';\nimport Selector from './selector/Selector';\n\nimport './css/Data.css';\n\nimport {\n  DataType,\n} from '../../enums';\n\nexport type payloadType = {[key: string]: any}\nexport type gqlPayloadType = {query: string}\n\nexport interface DataData {\n  type: DataType;\n  data: {\n    [DataType.JSON]: payloadType;\n    [DataType.GQL]: gqlPayloadType;\n    [DataType.FORM]: null;\n  }\n}\n\ninterface DataProps {\n  className?: string;\n  data: DataData;\n  updateData: (data: DataData) => void;\n}\n\nconst Data: React.FunctionComponent<DataProps> = (props) => {\n  const updateType = (value: DataType) => {\n    const data = props.data;\n    data.type = value;\n    props.updateData(data);\n  }\n\n  const updateJsonData = (value: payloadType) => {\n    const data = props.data;\n    data.data.json = value;\n    props.updateData(data);\n  }\n\n  const updateGraphQLData = (value: gqlPayloadType) => {\n    const data = props.data;\n    data.data.graphQL = value\n    props.updateData(data);\n  }\n\n  return (\n    <div className={(props.className || '' ) + ' Data'}>\n      <label> Data </label>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n        {\n          props.data.type === DataType.JSON\n            && (<Json data={props.data.data.json} onUpdateData={updateJsonData} />)\n        }\n        {\n          props.data.type === DataType.GQL\n            && (<GraphQL\n              data={props.data.data.graphQL}\n              onUpdateData={updateGraphQLData} />)\n        }\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n          <Selector\n            className=\"u-full-width\"\n            selected={props.data.type}\n            onUpdate={updateType} />\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default Data;\n","import React from 'react';\n\nimport './css/Heading.css'\n\ninterface HeadingProps {\n  imageSrc: string;\n}\n\nconst Heading: React.FunctionComponent<HeadingProps> = (props) => {\n  return (\n    <div className=\"Heading\">\n      <img src={props.imageSrc} alt=\"curlify logo\" />\n\n    </div>\n  );\n}\n\nexport default Heading;\n","/**\n * @file ClearHistory component\n * @author Mattamorphic\n */\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\n\nimport Button from '../../shared/Button';\n\ninterface ClearHistoryProps {\n  clear: () => void;\n}\n\nconst ClearHistory: React.FunctionComponent<ClearHistoryProps> = (props) => {\n  return (\n    <Button\n      isPrimary={false}\n      onClick={props.clear}>\n      <FontAwesomeIcon icon={faTrash} size=\"lg\" />\n    </Button>\n  )\n};\n\nexport default ClearHistory;\n","/**\n * @file LoadHistoryEntry component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUpload } from '@fortawesome/free-solid-svg-icons';\n\nimport './css/LoadHistoryEntry.css';\n\nimport Button from '../../../../shared/Button';\n\nimport {ConfigData} from '../../../../config/Config';\nimport {DataData} from '../../../../data/Data';\n\ninterface LoadHistoryEntryProps {\n  className?: string;\n  config: ConfigData;\n  data: DataData;\n  updateConfig: (config: ConfigData) => void;\n  updateData: (data: DataData) => void;\n}\n\nconst LoadHistoryEntry: React.FunctionComponent<LoadHistoryEntryProps> = (props) => {\n  const load = () => {\n    props.updateConfig(props.config);\n    props.updateData(props.data);\n  }\n\n  return (\n    <Button\n      className={props.className}\n      isPrimary={false}\n      onClick={load}>\n      <FontAwesomeIcon icon={faUpload} size=\"lg\" />\n    </Button>\n  )\n};\n\nexport default LoadHistoryEntry;\n","/**\n * @file ListHistoryEntry component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport LoadHistoryEntry from './loadhistoryentry/LoadHistoryEntry';\n\nimport './css/ListHistoryEntry.css';\n\nimport {ConfigData} from '../../../config/Config';\nimport {DataData} from '../../../data/Data';\n\ninterface ListHistoryEntryProps {\n  className?: string;\n  config: ConfigData;\n  data: DataData;\n  id: string;\n  updateConfig: (config: ConfigData) => void;\n  updateData: (data: DataData) => void;\n}\n\nconst ListHistoryEntry: React.FunctionComponent<ListHistoryEntryProps> = (props) => {\n  const url = props.config.domain + props.config.endpoint;\n\n  return (\n    <div className={(props.className || '') + ' ListHistoryEntry'}>\n      <div className=\"row\">\n        <div className=\"two columns\">\n          <div className={props.config.method.toLowerCase() + \" u-full-width ListHistoryEntryMethod\"}>\n            {props.config.method}\n          </div>\n        </div>\n        <div className=\"two columns\">\n          <div className={props.config.method.toLowerCase() + \" u-full-width ListHistoryEntryID\"}>\n            {props.id}\n          </div>\n        </div>\n        <div className=\"six columns\">\n          <div className=\"u-full-width ListHistoryEntryDest\">\n            <a href={url}>{url}</a>\n          </div>\n        </div>\n        <div className=\"two columns ListHistoryEntryAction\">\n          <LoadHistoryEntry\n            className=\"u-full-width\"\n            config={props.config}\n            data={props.data}\n            updateConfig={props.updateConfig}\n            updateData={props.updateData} />\n        </div>\n      </div>\n    </div>\n  )\n};\n\nexport default ListHistoryEntry;\n","/**\n * @file ListHistory component\n * @author Mattamorphic\n */\nimport React from 'react';\nimport ListHistoryEntry from './listhistoryentry/ListHistoryEntry';\nimport './css/ListHistory.css';\n\nimport {ConfigData} from '../../config/Config';\nimport {DataData} from '../../data/Data';\nimport {HistoryEntry} from '../History';\n\ninterface ListHistoryProps {\n  history: HistoryEntry[];\n  updateConfig: (config: ConfigData) => void;\n  updateData: (data: DataData) => void;\n}\n\nconst ListHistory: React.FunctionComponent<ListHistoryProps> = (props) => {\n  return (\n    <div className=\"ListHistory\">\n    {\n      props.history.map(\n        (historyEntry: HistoryEntry, i: number) => (\n          <ListHistoryEntry\n            className={i%2 === 0 ? 'dark': 'light'}\n            config={historyEntry.config}\n            data={historyEntry.data}\n            id={historyEntry.id}\n            updateConfig={props.updateConfig}\n            updateData={props.updateData} />))\n    }\n    </div>\n  )\n};\n\nexport default ListHistory;\n","/**\n * @file History component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport './css/History.css';\n\nimport {ConfigData} from '../config/Config';\nimport {DataData} from '../data/Data';\n\nimport ClearHistory from './clearhistory/ClearHistory';\nimport ListHistory from './listhistory/ListHistory';\n\nimport Toggler from '../shared/Toggler';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHistory } from '@fortawesome/free-solid-svg-icons';\n\n\nexport interface HistoryEntry {\n  id: string;\n  config: ConfigData;\n  data: DataData;\n}\n\ninterface HistoryProps {\n  history: HistoryEntry[];\n  clearHistory: () => void;\n  updateConfig: (config: ConfigData) => void;\n  updateData: (data: DataData) => void;\n}\n\ninterface HistoryState {\n  showHistory: boolean;\n}\n\n\nexport default class History extends React.PureComponent<\n  HistoryProps,\n  HistoryState> {\n\n  constructor(props: HistoryProps) {\n    super(props);\n    this.state = {\n      showHistory: false,\n    };\n  }\n\n  loadHistory = (id: string): boolean => {\n    const item = window.localStorage.getItem(id);\n    if (item === null) {\n      return false;\n    }\n    const payload = JSON.parse(item);\n    this.props.updateConfig(payload.config);\n    this.props.updateData(payload.data);\n    return true;\n  }\n\n  toggleHistory = (): void => {\n    this.setState(prevState => ({\n      showHistory: !prevState.showHistory,\n    }));\n  }\n\n  render() {\n    return (\n      <Toggler\n        isToggled={this.state.showHistory}\n        className=\"History\"\n        label={<FontAwesomeIcon icon={faHistory} size=\"lg\" />}\n        onToggle={this.toggleHistory} >\n        <h4> History</h4>\n        <ListHistory\n          history={this.props.history}\n          updateConfig={this.props.updateConfig}\n          updateData={this.props.updateData} />\n        <ClearHistory clear={this.props.clearHistory} />\n      </Toggler>\n    )\n  }\n}\n","import React from 'react';\n\nimport Select from '../../shared/Select';\n\nimport './css/Selector.css';\n\nimport {OutputType} from '../../../enums';\n\ninterface SelectorProps {\n  className?: string;\n  selected: OutputType;\n  onUpdate: (value: OutputType) => void;\n}\n\nconst Selector: React.FunctionComponent<SelectorProps> = (props) => {\n  const updateSelected = (\n    e: React.ChangeEvent<HTMLSelectElement>,\n  ): void => {\n    const value: OutputType = e.target.value as OutputType;\n    props.onUpdate(value);\n  }\n\n  return (\n    <Select\n      className={(props.className || '') + \" Selector\"}\n      onChange={updateSelected}\n      selected={props.selected}\n      values={Object.values(OutputType)} />\n  );\n}\n\nexport default Selector;\n","import {parse} from 'graphql';\n\nimport {HTTPHeaders, HTTPMethods} from '../enums';\n\nimport {ConfigData} from '../components/config/Config';\nimport {DataData} from '../components/data/Data';\nimport {Header} from '../components/config/headers/Headers';\nimport {HistoryEntry} from '../components/history/History';\nimport {ProxyData} from '../components/test/request/proxy/Proxy';\n\nexport const methodHasPayload = (method: HTTPMethods) => (\n  ![HTTPMethods.GET, HTTPMethods.HEAD]\n    .includes(method)\n)\n\nexport const PROXY = \"https://curlify-proxy.herokuapp.com/\";\n\nexport const regEx = {\n  url: /^((?:http(?:s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+))+([\\w\\-\\._~:\\/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+)$/gim,\n  curlHeader: /(?:-H \")([\\w\\d]{1,})(?:\\s{0,}:\\s{0,})(.+?)(?=\")/gim,\n  curlMethod: /(?:-X\\s{0,})(\\w{3,6})/gim,\n  // Todo: convert to /gms https://github.com/babel/babel/pull/10347\n  curlData: /(?:-d\\s{0,}'|\")({.*})(?=['|\"])/gim,\n  dateTimeZoneChars: /[T|Z]/gim,\n  jsonData: /^( *)(\"[^\"]+\": )?(\"[^\"].*\"|[\\w.+-]*)?([{}[\\],]*)?$/mg,\n  newLine: /[\\r|\\n]/gm,\n  newLineAndTab: /[\\n|\\r|\\t]/gm,\n  multipleSpaces: / +/gm,\n  quotes:/[\\\"\\']/gim,\n  singleEscapedNewLine: /(?<!\\\\)\\\\n/gm,\n\n};\n\n// export const hasDataChanged = (\n//   prevData: DataData,\n//   newData: DataData\n// ): boolean => {\n//   return false;\n// }\n//\n// export const hasConfigChanged = (\n//   prevData: DataData,\n//   newData: DataData\n// ): boolean => {\n//   return false;\n// }\n\nexport const hasProxyChanged = (\n  prevProxy: ProxyData,\n  newProxy: ProxyData\n): boolean => {\n  return prevProxy.isEnabled !== newProxy.isEnabled\n    || prevProxy.url !== newProxy.url;\n}\n\nexport const isValidMethod = (string: string): boolean => (\n  Object\n  .values(HTTPMethods)\n  .includes(string)\n)\n\nexport const isValidURL = (domain: string, endpoint: string): boolean => {\n  const url = domain\n    + ((domain.charAt(domain.length-1) !== '/' && endpoint.charAt(0) !== '/')\n      ? '/'\n      : '')\n    + endpoint;\n\n  const possUrl = (url).match(regEx.url);\n  return (!possUrl || possUrl[0] !== url) ? false : true;\n}\n\nexport const isValidHeaders = (headers: Header[]): boolean => {\n  const types = Object.values(HTTPHeaders)\n  return headers.reduce(\n    (_: boolean, curr: Header) => {\n      return types.includes(curr.type); // TODO: validate the value\n    },\n    true,\n  );\n}\n\nexport const isValidJsonString = (json: string) => {\n  try {\n    JSON.parse(json);\n    return true;\n  } catch (_) {\n    return false;\n  }\n}\n\nexport const isValidGraphQLString = (gql: string) => {\n  try {\n    parse(gql);\n    return true;\n  } catch (_) {\n    return false;\n  }\n}\n\nexport const isStringANumber = (value: string): boolean => {\n  return !isNaN(parseInt(value));\n}\n\nexport const isStringADate = (value: string): boolean => {\n  return !isNaN(Date.parse(value.replace(regEx.dateTimeZoneChars, ' ')));\n}\n\nexport const isStringBooleanOrNull = (value: string): boolean => {\n  const permitted = ['true', 'false', 'null', 'nil', 'undefined'];\n  return (permitted.includes(value.toLowerCase()));\n}\n\nexport const isStringAURL = (value: string): boolean => {\n  return !!value.replace(regEx.quotes, '').match(regEx.url);\n}\n\nexport const isStorageAvailable = (): boolean => {\n  let storage;\n  try {\n      storage = window['localStorage'];\n      var x = '__storage_test__';\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      return true;\n  }\n  catch(e) {\n      return false;\n  }\n}\n\nexport const addToHistory = (\n  config: ConfigData,\n  data: DataData\n): string => {\n  const storage = window.localStorage;\n\n  if (storage.length + 1 === 20) {\n    let keys = [];\n    for (let i = 0; i < storage.length; i++) {\n      const key = storage.key(i);\n      if (key) {\n        keys.push(key);\n      }\n    }\n    const removeKey = keys.sort().shift();\n    if (removeKey) {\n      storage.removeItem(removeKey);\n    }\n  }\n  const id = new Date().getTime().toString();\n  const item = JSON.stringify({\n    id,\n    config,\n    data,\n  });\n  console.log(\"adding, \", id, item);\n  storage.setItem(id, item);\n  return id;\n}\n\nexport const getHistory = () => {\n  if (!isStorageAvailable()) {\n    return [];\n  }\n  const requestHistory = [] as HistoryEntry[];\n  const storage = window.localStorage;\n  for (let i = 0; i < storage.length; i++) {\n    const key = storage.key(i);\n    if (!key) {\n      break;\n    }\n    const data = storage.getItem(key);\n    if (!data) {\n      break;\n    }\n    requestHistory.push(JSON.parse(data));\n  }\n  return requestHistory.sort((a, b) => {\n    const a_id = parseInt(a.id);\n    const b_id = parseInt(b.id);\n    return a_id > b_id ? -1 : a_id < b_id ? 1 : 0;\n  });\n}\n","/**\n * @file Curl component\n * @author Mattamorphic\n */\nimport React from 'react';\n\n// Imported components\nimport Copy from '../../shared/Copy';\nimport Saving from '../../shared/Saving';\nimport TextArea from '../../shared/TextArea';\n\n// Resuable helper functions / objects\nimport * as utils from '../../../utils';\n\n// Imported types / interfaces\nimport {ConfigData} from '../../config/Config';\nimport {DataData, payloadType} from '../../data/Data';\nimport {Header} from '../../config/headers/Headers';\n\n// CSS imports\nimport './css/Curl.css';\n\n// Enum imports\nimport {\n  DataType,\n  HTTPHeaders,\n  HTTPMethods,\n} from '../../../enums';\n\ninterface DomainAndEndpoint {\n  domain: string | null;\n  endpoint: string | null;\n}\n\ninterface SerializedCurl {\n  config: ConfigData;\n  data: DataData;\n  hasNewConfig: boolean;\n  hasNewData: boolean;\n}\n\ninterface CurlProps {\n  config: ConfigData;\n  data: DataData;\n  updateConfig: (data: ConfigData) => void;\n  updateData: (data: DataData) => void;\n}\n\ninterface CurlState {\n  draft: string;\n  hasDraft: boolean;\n}\n\nexport default class Curl extends React.Component<CurlProps, CurlState>  {\n\n  constructor(props: CurlProps) {\n    super(props);\n    this.state = {\n      draft: Curl.getValue(props.config, props.data),\n      hasDraft: false,\n    };\n  }\n\n  /**\n   * @function Get the headers from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {Header[] | null}\n   */\n  getHeaders(value: string): Header[] | null {\n    const regex = utils.regEx.curlHeader;\n    const headers = [];\n    let match = null;\n    while (match = regex.exec(value)) {\n      headers.push({\n        type: match[1] as HTTPHeaders,\n        value: match[2] as string,\n      });\n    }\n    if (headers.length === 0) {\n      return null;\n    }\n    return headers;\n  }\n\n  /**\n   * @function Get the method from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {HTTPMethods | null}\n   */\n  getMethod(value: string): HTTPMethods | null {\n    const regex = utils.regEx.curlMethod;\n    if (!value.match(regex)) {\n      return null;\n    }\n    const match = regex.exec(value);\n    if (!match) {\n      return null;\n    }\n    return match[1] as HTTPMethods;\n  }\n\n  /**\n   * @function Get the data from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {payloadType | null}\n   */\n  getData(value: string): payloadType | null {\n    const regex = utils.regEx.curlData;\n    if (!value.match(regex)) {\n      return null;\n    }\n    const match = regex.exec(value);\n    if (!match) {\n      return null;\n    }\n    try {\n      return JSON.parse(match[1]);\n    } catch (_) {\n      return null;\n    }\n  }\n\n  /**\n   * @function Get the domain and endpoint from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {DomainAndEndpoint | null}\n   */\n  getDomainAndEndpoint(value: string): DomainAndEndpoint | null {\n    const regex = utils.regEx.url;\n    if (!value.match(regex)) {\n      return null;\n    }\n    const match = regex.exec(value);\n    if (!match) {\n      return null;\n    }\n    return {\n      domain: match[1] || null,\n      endpoint: match[2] || null,\n    };\n  }\n\n  /**\n   * @function Serialize a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {SerializedCurl}\n   */\n  serializerCurl = (value: string): SerializedCurl => {\n    // Get the current values\n    const config = this.props.config;\n    const data = this.props.data;\n\n    let hasNewConfig = false;\n    let hasNewData = false;\n\n     // decide which method to use\n    const method = this.getMethod(value);\n\n    // decide which headers to use\n    const headers = this.getHeaders(value);\n\n    // decide which data to use\n    const newData = this.getData(value);\n\n    // decide which domain and endpoint to use\n    const domainAndEndpoint = this.getDomainAndEndpoint(value);\n\n    if (\n      method\n      && method !== config.method\n      && Object.values(HTTPMethods).includes(method)\n    ) {\n      hasNewConfig = true;\n      config.method = method;\n    }\n\n    // Todo - this needs to actually check the header\n    if (headers) {\n      hasNewConfig = true;\n      config.headers = headers;\n    }\n    if (newData && JSON.stringify(newData) !== JSON.stringify(data.data[data.type])) {\n      hasNewData = true;\n      switch (data.type) {\n        case DataType.GQL:\n          data.data.graphQL.query = newData.query;\n          break;\n        case DataType.JSON:\n          data.data.json = newData;\n          break;\n        case DataType.FORM:\n          break;\n      }\n    }\n    if (domainAndEndpoint) {\n      if (domainAndEndpoint.domain && domainAndEndpoint.domain !== config.domain) {\n        hasNewConfig = true;\n        config.domain = domainAndEndpoint.domain;\n      }\n      if (domainAndEndpoint.endpoint && domainAndEndpoint.endpoint !== config.endpoint) {\n        hasNewConfig = true;\n        config.endpoint = domainAndEndpoint.endpoint;\n      }\n    }\n\n    return {\n      config,\n      data,\n      hasNewConfig,\n      hasNewData,\n    };\n  }\n\n  /**\n   * @function Update the data from the curl string\n   *\n   * @param {string} value The curl string\n   */\n  updateCurl = (value: string): void => {\n    const curl = this.serializerCurl(value);\n    console.log(curl);\n    if (curl.hasNewData || curl.hasNewConfig) {\n      // set draft to null, we'll update with the new props\n      this.setState({hasDraft: false}, () => {\n        curl.hasNewData && this.props.updateData(curl.data);\n        curl.hasNewConfig && this.props.updateConfig(curl.config);\n      });\n    }\n    // set the draft to true, let's use this\n    if (!curl.hasNewData && !curl.hasNewConfig) {\n      this.setState({draft: value, hasDraft: true});\n    }\n  }\n\n  /**\n   * @function Pass the config and data into a curl string\n   *\n   * @params {ConfigData} config The Configuration data for the curl request\n   * @params {DataData}   data   The data for the curl request\n   */\n  static getValue(\n    config: ConfigData,\n    data: DataData,\n  ): string {\n    let payload = {};\n    switch (data.type) {\n      case DataType.JSON:\n        payload = data.data.json;\n        break;\n      case DataType.GQL:\n        payload = data.data.graphQL;\n        break;\n      case DataType.FORM:\n        break;\n    }\n\n    return (\n      `curl -X ${config.method} \\\\ \\n`\n      + `${config.headers\n        .map(\n          header => `-H \"${header.type}\": \"${header.value }\" \\\\ \\n`\n        ).join('')}`\n      + `${(payload\n          && Object.keys(payload).length > 0\n          && utils.methodHasPayload(config.method)\n        )\n         ? `-d '${Curl.parsePayloadString(JSON.stringify(payload))}' \\\\ \\n`\n         : ''}`\n      + `${config.domain + config.endpoint}`);\n  }\n\n  /**\n   * @function Parse a string remove new line / tab and remove multiple spaces\n   *\n   * @param {string} value\n   */\n  static parsePayloadString(value: string): string {\n    return value\n      .replace(utils.regEx.newLineAndTab, '')\n      .replace(utils.regEx.multipleSpaces, ' ')\n      .replace(utils.regEx.singleEscapedNewLine, '');\n  }\n\n  render () {\n    const draft = this.state.hasDraft\n      ? this.state.draft\n      : Curl.getValue(\n        this.props.config,\n        this.props.data,\n      );\n    return (\n      <div className=\"Curl\">\n        <div className=\"row\">\n          <div className=\"two columns\">\n            <Saving\n              className=\"u-full-width\"\n              isSaved={!this.state.hasDraft} />\n          </div>\n          <div className=\"six columns\">\n            <div className=\"u-full-width\" />\n          </div>\n          <div className=\"four columns\">\n            <Copy\n              className=\"u-full-width\"\n              content={draft} />\n          </div>\n        </div>\n        <div className=\"row\">\n          <TextArea\n            isFullWidth={true}\n            onUpdate={this.updateCurl}\n            style={{\n              background: `url('${process.env.PUBLIC_URL}/images/textarea.png')`,\n              backgroundAttachment: 'local',\n              backgroundRepeat: 'no-repeat',\n              backgroundColor: '#19404A',\n              color: '#EEE8D5',\n            }}\n            value={draft} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport Toggler from '../shared/Toggler'\n\nimport Selector from './selector/Selector';\n\nimport {ConfigData} from '../config/Config';\nimport Curl from './curl/Curl';\nimport {DataData} from '../data/Data';\n\nimport './css/Output.css';\n\nimport {OutputType} from '../../enums';\n\ninterface OutputProps {\n  className?: string;\n  config: ConfigData;\n  data: DataData;\n  output: OutputType;\n  updateConfig: (data: ConfigData) => void;\n  updateData: (data: DataData) => void;\n}\n\nconst Output: React.FunctionComponent<OutputProps> = (props) => {\n  const updateType = (_: OutputType) => {\n    // Todo : Implement changer here in future.\n  }\n\n  return (\n    <div className={(props.className || '' ) + ' Output'}>\n      <label> {props.output} </label>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n          {\n            (props.output === OutputType.CURL) && (\n              <Curl\n                config={props.config}\n                data={props.data}\n                updateConfig={props.updateConfig}\n                updateData={props.updateData} />\n            )\n          }\n        </div>\n      </div>\n      <div className=\"row\">\n      <div className=\"twelve columns\">\n        <Selector\n          className=\"u-full-width\"\n          selected={props.output}\n          onUpdate={updateType} />\n      </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Output;\n","/**\n * @file Checkbox component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport Input from './Input';\nimport {InputTypes} from '../../enums';\n\ninterface CheckboxProps {\n  className?: string;\n  isDisabled?: boolean;\n  label?: string;\n  isCheckedLabel?: string;\n  isNotCheckedLabel?: string;\n  name?: string;\n  id?: string;\n  isChecked: boolean;\n  onChange: (value: boolean) => void;\n  value?: string;\n}\n\nconst Checkbox: React.FunctionComponent<CheckboxProps> = (props) => {\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    props.onChange(e.target.checked)\n  }\n\n  const label = props.isChecked\n    ? props.isCheckedLabel || props.label\n    : props.isNotCheckedLabel || props.label\n\n  return (\n    <div className={props.className || ''}>\n      <Input\n        type={InputTypes.CHECKBOX}\n        isChecked={props.isChecked}\n        isDisabled={props.isDisabled || false}\n        name={props.name || ''}\n        id={props.id || ''}\n        onChange={onChange}\n        value={props.value || ''} />\n      <span> {label} </span>\n    </div>\n  )\n};\n\nexport default Checkbox;\n","/**\n * @file Proxy component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport Checkbox from '../../../shared/Checkbox';\nimport Toggler from '../../../shared/Toggler';\nimport Input from '../../../shared/Input';\nimport Notice from '../../../shared/Notice';\nimport {InputTypes} from '../../../../enums';\n\nimport './css/Proxy.css'\n\nimport * as utils from '../../../../utils';\n\nexport interface ProxyData {\n  url: string,\n  isEnabled: boolean\n}\n\ninterface ProxyProps {\n  isExpanded: boolean;\n  proxy: ProxyData;\n  onUpdateProxy: (data: ProxyData) => void;\n}\n\ninterface ProxyState {\n  showProxySettings: boolean;\n}\n\nexport default class Proxy extends React.PureComponent<ProxyProps, ProxyState> {\n\n  constructor(props: ProxyProps) {\n    super(props);\n    this.state = {\n      showProxySettings: props.isExpanded,\n    };\n  }\n\n  toggleProxySettings = () => {\n    this.setState(prevState => ({\n      showProxySettings: !prevState.showProxySettings,\n    }));\n  }\n\n  onUpdateProxyUrl = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.props.onUpdateProxy({\n      url: e.target.value,\n      isEnabled: this.props.proxy.isEnabled,\n    })\n  }\n\n  onUpdateProxyEnabled = (isEnabled: boolean) => {\n    this.props.onUpdateProxy({\n      url: this.props.proxy.url,\n      isEnabled\n    })\n  }\n\n  render() {\n\n    return (\n      <Toggler\n        isToggled={this.state.showProxySettings}\n        className=\"Proxy\"\n        label=\"Proxy Settings\"\n        onToggle={this.toggleProxySettings}>\n        <div className=\"row\">\n          <Notice\n            className=\"twelve columns u-full-width\"\n            heading=\"Proxy Overview\">\n            Requests are proxied through a copy of cors-anywhere <br />\n            This is hosted on: <a href={utils.PROXY}>{utils.PROXY}</a> <br />\n            You can find the code for this at <a href=\"https://github.com/Mattamorphic/curlify/tree/proxy\">GitHub</a> <br />\n            If you'd like to use your own proxy, simply replace the URL <br />\n            This should follow cors-anywhere entry design <br />\n            This proxy forwards request, gets around the cors issue, and allows us to return headers <br />\n            No data is recorded in the proxy\n          </Notice>\n        </div>\n        <div className=\"row\">\n          <Input\n            className=\"six columns u-full-width\"\n            isDisabled={!this.props.proxy.isEnabled}\n            type={InputTypes.URL}\n            onChange={this.onUpdateProxyUrl}\n            placeholder=\"Proxy Url\"\n            value={this.props.proxy.url} />\n          <Checkbox\n            className=\"checkbox six columns u-full-width\"\n            isChecked={this.props.proxy.isEnabled}\n            isCheckedLabel=\"Proxy is enabled\"\n            isNotCheckedLabel=\"Proxy is not enabled\"\n            onChange={this.onUpdateProxyEnabled}\n            value=\"proxy\" />\n        </div>\n      </Toggler>\n    );\n  }\n}\n","/**\n * @file $COMPONENT component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport Button from './Button';\n\nimport './css/Confirm.css';\n\ninterface ConfirmProps {\n  className?: string;\n  label: string;\n  message: string;\n  onConfirm: () => void;\n  onCancel: () => void;\n  isPrimary?: boolean;\n}\n\nconst Confirm: React.FunctionComponent<ConfirmProps> = (props) => {\n\n  const onConfirm = () => {\n    const result = window.confirm(props.message);\n    result ? props.onConfirm() : props.onCancel();\n  }\n\n  return (\n    <Button\n      className={props.className || ''}\n      isPrimary={props.isPrimary || false}\n      label={props.label}\n      onClick={onConfirm} />\n  )\n};\n\nexport default Confirm;\n","import React from 'react';\n\nimport Proxy, {ProxyData} from './proxy/Proxy';\n\nimport './css/Request.css';\n\nimport Button from '../../shared/Button';\nimport Confirm from '../../shared/Confirm';\n\n\ninterface RequestProps {\n  shouldConfirm: boolean;\n  incompleteData?: string;\n  hasRun: boolean;\n  proxy: ProxyData;\n  onRequest: () => void;\n  onUpdateProxy: (data: ProxyData) => void;\n}\n\nconst Request: React.FunctionComponent<RequestProps> = (props) => {\n  const onConfirm = props.onRequest;\n  const onCancel = () => {};\n\n\n  return (\n    <div className=\"row\">\n      <div className=\"Request\">\n        <Proxy\n          isExpanded={!props.hasRun}\n          proxy={props.proxy}\n          onUpdateProxy={props.onUpdateProxy} />\n        {\n          props.shouldConfirm\n            ? <Confirm\n                className=\"u-full-width\"\n                label=\"Test\"\n                onConfirm={onConfirm}\n                onCancel={onCancel}\n                message=\"Are you sure?\" />\n            :  <Button\n                className=\"u-full-width\"\n                isPrimary={false}\n                label=\"Test\"\n                onClick={props.onRequest} />\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default Request;\n","/**\n * @file Table component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport './css/Table.css';\n\nexport interface TableRow {\n  [key: string]: string | JSX.Element;\n}\n\ninterface TableProps {\n  className?: string\n  data: TableRow[]\n}\n\nconst Table: React.FunctionComponent<TableProps> = (props) => {\n  if (props.data.length === 0) {\n    return <table className={props.className || ''} />\n  }\n\n  const headers = Object.keys(props.data[0])\n\n  return (\n    <table className={props.className || ''}>\n      <thead>\n        {\n          headers.map(\n            (header: string, i: number) => (\n              <th key={`header_${i}`}>{header}</th>\n            )\n          )\n        }\n      </thead>\n      <tbody>\n      {\n\n        props.data.map(\n          (row: TableRow, i: number) => (\n            <tr key={`tr_${i}`}>\n              {\n                headers.map(\n                  (header: string, j: number) => (\n                    <td key={`tr_${i}_${j}`} data-label={header}>\n                      {row[header]}\n                    </td>\n                  )\n                )\n              }\n            </tr>\n          )\n        )\n      }\n      </tbody>\n    </table>\n  );\n};\n\nexport default Table;\n","/**\n * @file ResponseHeaders component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport Table from '../../../shared/Table';\nimport Toggler from '../../../shared/Toggler';\n\nimport './css/ResponseHeaders.css';\n\nimport * as utils from '../../../../utils';\n\ninterface ResponseHeadersProps {\n  headers: Headers;\n}\n\ninterface ResponseHeadersState {\n  showHeaders: boolean\n}\n\nexport default class ResponseHeaders extends React.PureComponent<\n  ResponseHeadersProps,\n  ResponseHeadersState> {\n  constructor(props: ResponseHeadersProps) {\n    super(props);\n    this.state = {\n      showHeaders: false,\n    };\n  }\n\n  parse = (value: string): string | JSX.Element => {\n\n    if (utils.isStringANumber(value)) {\n      return (<span className='header-value header-number'>{value}</span>);\n    }\n    if (utils.isStringADate(value)) {\n      return (<span className='header-value header-date'>{value}</span>);\n    }\n    if (utils.isStringAURL(value)) {\n      return (\n        <span className='header-value header-url'>\n          <a href={value}>{value}</a>\n        </span>\n      );\n    }\n    if (utils.isStringBooleanOrNull(value)) {\n      return (<span className='header-value header-boolean'>{value}</span>);\n    }\n    return <span className='header-value header-string'>{value}</span>;\n  }\n\n  toggleHeaders = () => {\n    this.setState(prevState => ({\n      showHeaders: !prevState.showHeaders\n    }));\n  }\n\n  render() {\n\n    return (\n      <Toggler\n        isToggled={this.state.showHeaders}\n        className=\"ResponseHeaders\"\n        label=\"Headers\"\n        onToggle={this.toggleHeaders}>\n        <Table\n          className=\"u-max-full-width ResponseHeadersTable\"\n          data={\n            Array.from(this.props.headers.keys()).map(\n              key => ({\n                Header: this.parse(key),\n                Value: this.parse(this.props.headers.get(key) || ''),\n              })\n            )\n          } />\n      </Toggler>\n    );\n  }\n}\n","/**\n * @file ResponseJson component\n * @author Mattamorphic\n */\nimport React from 'react';\nimport ReactDOMServer from 'react-dom/server';\n\nimport Toggler from '../../../shared/Toggler';\n\nimport './css/ResponseJson.css'\n\nimport * as utils from '../../../../utils';\n\nimport {JsonValueTypes} from '../../../../enums';\n\ninterface ResponseJsonProps {\n  data: {[key: string]: any}\n}\n\ninterface ResponseJsonState {\n  showJson: boolean;\n}\n\nexport default class ResponseJson extends React.PureComponent<\n  ResponseJsonProps,\n  ResponseJsonState> {\n\n  constructor(props: ResponseJsonProps) {\n    super(props);\n    this.state = {\n      showJson: false,\n    };\n  }\n\n  toggleJson = () => {\n    this.setState(prevState => ({\n      showJson: !prevState.showJson,\n    }));\n  }\n\n  replacer = (_: string, p1: string, p2: string, p3: string, p4: string) => {\n    const part = { indent: p1, key: p2, value: p3, end: p4 };\n\n    let valueClass = \"json-value\";\n    let type = JsonValueTypes.STRING;\n    if (part.value !== undefined && part.value !== null) {\n      if (utils.isStringANumber(part.value)) {\n        valueClass = \"json-number\";\n        type = JsonValueTypes.NUMBER;\n      } else if (utils.isStringADate(part.value)) {\n        valueClass = \"json-date\";\n        type = JsonValueTypes.DATE;\n      } else if (utils.isStringBooleanOrNull(part.value)) {\n        valueClass = \"json-boolean\";\n        type = JsonValueTypes.BOOLEAN;\n      } else if (utils.isStringAURL(part.value)) {\n        valueClass = \"json-url\";\n        type = JsonValueTypes.URL;\n      } else {\n        valueClass = \"json-string\";\n        type = JsonValueTypes.STRING;\n      }\n    }\n    return ReactDOMServer.renderToString(\n      <>\n        {\"\\u00a0\".repeat(part.indent.length)}\n        {part.key && <span className=\"json-key\"> {part.key} </span>}\n        {\n          part.value\n          &&\n            <span className={valueClass}>\n              {\n                type === JsonValueTypes.URL\n                  ? (\n                    <a href={part.value.replace(utils.regEx.quotes, '')}>\n                      {part.value}\n                    </a>\n                  )\n                  : part.value\n              }\n            </span>\n        }\n        {part.end && <span className=\"json-key\"> {part.end} </span>}\n        <br />\n      </>\n    );\n  }\n\n  render() {\n    return (\n      <Toggler\n        isToggled={this.state.showJson}\n        label=\"Data\"\n        onToggle={this.toggleJson}>\n        <div\n          className=\"ResponseJson\"\n          dangerouslySetInnerHTML={{__html:\n            JSON.stringify(this.props.data, null, 3)\n              .replace(\n                utils.regEx.jsonData,\n                this.replacer,\n              )\n          }} />\n      </Toggler>\n    );\n  }\n\n}\n","/**\n * @file ResponseRaw component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport Toggler from '../../../shared/Toggler';\n\nimport './css/ResponseRaw.css';\n\ninterface ResponseRawProps {\n  data: string;\n}\n\ninterface ResponseRawState {\n  showRaw: boolean;\n}\n\nexport default class ResponseRaw extends React.PureComponent<\n  ResponseRawProps,\n  ResponseRawState> {\n\n  constructor(props: ResponseRawProps) {\n    super(props);\n    this.state = {\n      showRaw: false,\n    };\n  }\n\n  toggleRaw = () => {\n    this.setState(prevState => ({\n      showRaw: !prevState.showRaw,\n    }));\n  }\n\n  render() {\n    return (\n      <Toggler\n        isToggled={this.state.showRaw}\n        label=\"Raw\"\n        onToggle={this.toggleRaw}>\n          <div className=\"ResponseRaw\">\n            {this.props.data}\n          </div>\n      </Toggler>\n    );\n  }\n\n}\n","import React from 'react';\n\nimport ResponseHeaders from './responseheaders/ResponseHeaders';\nimport ResponseJson from './responsejson/ResponseJson';\nimport ResponseRaw from './responseraw/ResponseRaw';\n\nimport './css/FetchResponse.css';\n\ninterface FetchResponseProps {\n  headers: Headers,\n  data: string;\n}\n\nconst FetchResponse: React.FunctionComponent<FetchResponseProps> = (props) => {\n  let json = {}\n  try {\n    json = JSON.parse(props.data)\n  } catch (_) {}\n\n  return (\n    <div className=\"FetchResponse\">\n      <ResponseHeaders headers={props.headers} />\n      <ResponseRaw data={props.data} />\n      <ResponseJson data={json} />\n    </div>\n  );\n}\n\nexport default FetchResponse;\n","import React from 'react';\n\nimport './css/Loading.css';\n\ninterface LoadingProps {\n  className?: string;\n}\n\nconst Loading: React.FunctionComponent<LoadingProps> = (props) => {\n  return (\n    <div className={(props.className || '') + \" LoadingContainer\"}>\n      <div className=\"Loading\">\n        <div />\n      </div>\n      <div>\n        Loading\n      </div>\n    </div>\n  );\n}\n\nexport default Loading;\n","import React from 'react';\n\nimport Request from './request/Request';\nimport FetchResponse from './fetchresponse/FetchResponse';\nimport Loading from '../shared/Loading';\nimport Notice from '../shared/Notice';\n\nimport './css/Test.css';\n\nimport {ConfigData} from '../config/Config';\nimport {DataData} from '../data/Data';\nimport {ProxyData} from './request/proxy/Proxy';\n\nimport * as utils from '../../utils';\n\nexport interface ValidatePayloadResult {\n  message: string[];\n  success: boolean;\n}\n\ninterface TestProps {\n  config: ConfigData;\n  data: DataData;\n  proxy: ProxyData;\n  addToHistory: (config: ConfigData, data: DataData) => void;\n  updateConfig: (data: ConfigData) => void;\n  updateData: (data: DataData) => void;\n  updateProxy: (data: ProxyData) => void;\n  validation: ValidatePayloadResult;\n}\n\ninterface TestState {\n  isLoading: boolean;\n  hasRun: boolean;\n  response: {\n    headers?: Headers,\n    data?: string,\n    destination?: URL,\n  };\n}\n\nclass Test extends React.PureComponent<TestProps, TestState> {\n\n  baseState: TestState;\n\n  constructor(props: TestProps) {\n    super(props);\n    this.state = {\n      // is the request executing\n      isLoading: false,\n      // has there been an execution\n      hasRun: false,\n      // hold the response\n      response: {},\n    };\n    this.baseState = this.state;\n  }\n\n  componentDidUpdate(prevProps: TestProps) {\n    if (utils.hasProxyChanged(prevProps.proxy, this.props.proxy)) {\n      this.setState(this.baseState);\n    }\n  }\n\n\n  getDestination = (): string => {\n    const destination = this.props.config.domain + this.props.config.endpoint;\n    return this.props.proxy.isEnabled\n      ? this.props.proxy.url + destination\n      : destination;\n  }\n\n  getFetchData = () => {\n    const fetchData: RequestInit = {\n      method: this.props.config.method,\n      body: null,\n      headers: new Headers(\n        this.props.config.headers.map(header => [header.type, header.value]),\n      ),\n    };\n\n    if (utils.methodHasPayload(this.props.config.method)) {\n      fetchData.body = JSON.stringify(this.props.data.data[this.props.data.type]);\n    }\n    return fetchData;\n  }\n\n  onTest = async () => {\n    // Update the local state\n    this.setState(\n      {\n        isLoading: true,\n        hasRun: true,\n        response: {},\n      },\n      async () => {\n        // Store the request in the session history\n        this.props.addToHistory(\n          this.props.config,\n          this.props.data,\n        );\n        // Todo: Run our own proxy service instead of using this.\n        const dest = new URL(this.getDestination());\n        let data = null;\n        let response: Response | null = null;\n        try {\n          response = await fetch(\n            dest.href,\n            this.getFetchData(),\n          );\n          data = await response.text();\n          this.setState({\n            isLoading: false,\n            response: {\n              destination: dest,\n              headers: response.headers as Headers,\n              data,\n            }\n          });\n        } catch (_) {\n          this.setState({\n            isLoading: false,\n          });\n        }\n      }\n    );\n  }\n\n  render () {\n    if (!this.props.validation.success) {\n      return (\n        <div className=\"row\">\n          <div className=\"Test Disabled\">\n            {\n              this.props.validation.message.map(\n                (string, idx) => (\n                  <label key={`validation_${idx}`}> {string} </label>\n                ),\n              )\n            }\n          </div>\n        </div>\n      )\n    }\n    if (this.state.isLoading) {\n      return (\n        <div className=\"row\">\n          <Loading />\n        </div>\n      );\n    }\n\n    const proxyMessage = `${\n      this.props.proxy.isEnabled\n        ? 'through Proxy'\n        : ''\n      } to ${this.state.response.destination || this.getDestination()}`;\n\n    return (\n      <>\n        <Request\n          hasRun={this.state.hasRun}\n          proxy={this.props.proxy}\n          onUpdateProxy={this.props.updateProxy}\n          shouldConfirm={false} // Todo: We need to ensure that everything matches up\n          onRequest={this.onTest} />\n        {\n          this.state.hasRun && (\n            this.state.response.headers && this.state.response.data\n              ? (\n                <>\n                  <div className=\"row\">\n                    <Notice\n                      className=\"twelve columns u-full-width\"\n                      heading=\"Request complete\">\n                      Request sent {proxyMessage}\n                    </Notice>\n                  </div>\n                  <div className=\"row\">\n                    <FetchResponse\n                      headers={this.state.response.headers}\n                      data={this.state.response.data} />\n                  </div>\n                </>)\n              : (\n                <div className=\"row\">\n                  <Notice\n                    className=\"twelve columns u-full-width\"\n                    heading=\"Request Failed\">\n                    Request couldn't be sent {proxyMessage}\n                  </Notice>\n                </div>\n              )\n          )\n        }\n      </>\n    );\n  };\n}\n\nexport default Test;\n","import React from 'react';\nimport Config, {ConfigData} from './components/config/Config';\nimport Data, {DataData} from './components/data/Data';\nimport Heading from './components/heading/Heading';\nimport History, {HistoryEntry} from './components/history/History';\nimport Output from './components/output/Output';\nimport {ProxyData} from './components/test/request/proxy/Proxy';\nimport Test, {ValidatePayloadResult} from './components/test/Test';\n\nimport './css/App.css'\n\nimport * as utils from './utils';\n\nimport {\n  DataType,\n  HTTPMethods,\n  OutputType,\n} from './enums';\n\ninterface OutputState {\n  type: OutputType;\n}\n\ninterface AppState {\n  config: ConfigData;\n  data: DataData;\n  history: HistoryEntry[];\n  output: OutputState;\n  proxy: ProxyData;\n  validation: ValidatePayloadResult;\n}\n\ninterface AppProps {}\n\nexport default class App extends React.Component<AppProps, AppState> {\n  isStorageAvailable = false;\n\n  constructor(props: AppProps) {\n    super(props);\n    this.state = {\n      config: {\n        method: HTTPMethods.GET,\n        headers: [],\n        domain: 'https://api.github.com',\n        endpoint: '/users/octocat',\n      },\n      data: {\n        type: DataType.JSON,\n        data: {\n          json: {test: \"value\"},\n          graphQL: {query: \"query {viewer {username}}\"},\n          form: null,\n        },\n      },\n      history: utils.getHistory(),\n      output: {\n        type: OutputType.CURL,\n      },\n      proxy: {\n        url: utils.PROXY,\n        isEnabled: true,\n      },\n      validation: {\n        message: [],\n        success: true,\n      }\n    }\n    // Only called once, no need to add to state\n    this.isStorageAvailable = utils.isStorageAvailable();\n  }\n\n  addToHistory = (\n    config: ConfigData,\n    data: DataData\n  ): void => {\n    this.setState(_ => {\n      utils.addToHistory(\n        config,\n        data,\n      )\n      return {\n        history: utils.getHistory(),\n      };\n    });\n  }\n\n  clearHistory = (): void => {\n    window.localStorage.clear();\n    this.setState({\n      history: [],\n    });\n  }\n\n  onConfigChange = (config: ConfigData): void => {\n    this.setState({\n      config: {\n        method: config.method,\n        headers: config.headers,\n        domain: config.domain,\n        endpoint: config.endpoint,\n      }\n    }, () => this.setState({validation: this.validatePayload()}));\n  }\n\n  onDataChange = (data: DataData): void => {\n    this.setState({\n      data,\n    }, () => this.setState({validation: this.validatePayload()}));\n  }\n\n  onProxyChange = (proxy: ProxyData): void => {\n    this.setState({\n      proxy,\n    });\n  }\n\n  validatePayload = (): ValidatePayloadResult => {\n    const result = {\n      message: [] as string[],\n      success: true,\n    };\n    if (!utils.isValidMethod(this.state.config.method)) {\n      result.message.push(\n        `Invalid ${this.state.config.method}, check settings above`,\n      );\n      result.success = false;\n    }\n    if (!utils.isValidHeaders(this.state.config.headers)) {\n      result.message.push(\n        `Invalid headers, check settings above`,\n      );\n      result.success = false;\n    }\n    if (!utils.isValidURL(\n      this.state.config.domain,\n      this.state.config.endpoint,\n    )) {\n      result.message.push(\n        `Invalid URL ${this.state.config.domain} or ${this.state.config.endpoint}, check settings above`,\n      );\n      result.success = false;\n    }\n\n    if (\n      this.state.data.type === DataType.GQL\n      && !utils.isValidGraphQLString(this.state.data.data.graphQL.query)) {\n        result.message.push(\n          `Invalid GraphQL string, check settings above`,\n        );\n        result.success = false;\n    }\n    return result;\n  }\n\n\n\n  render () {\n    const showData = utils.methodHasPayload(this.state.config.method);\n    return (\n      <div className='container App'>\n        <div className=\"row\">\n          <Heading imageSrc={process.env.PUBLIC_URL + '/images/banner.png'} />\n        </div>\n        <div className=\"row\">\n          <Config\n            data={this.state.config}\n            updateConfig={this.onConfigChange} />\n        </div>\n        <div className=\"row\">\n          <div className={(showData ? 'six' : 'twelve') + ' columns'}>\n            <Output\n              className=\"u-full-width\"\n              config={this.state.config}\n              data={this.state.data}\n              output={this.state.output.type}\n              updateConfig={this.onConfigChange}\n              updateData={this.onDataChange} />\n          </div>\n            {\n              showData && (\n              <div className=\"six columns\">\n                <Data\n                  className=\"u-full-width\"\n                  data={this.state.data}\n                  updateData={this.onDataChange} />\n              </div>)\n            }\n        </div>\n        {\n          this.isStorageAvailable && (\n            <div className=\"row\">\n              <History\n                clearHistory={this.clearHistory}\n                history={this.state.history}\n                updateConfig={this.onConfigChange}\n                updateData={this.onDataChange} />\n            </div>\n          )\n        }\n        <div className=\"row\">\n          <Test\n            validation={this.state.validation}\n            config={this.state.config}\n            data={this.state.data}\n            proxy={this.state.proxy}\n            addToHistory={this.addToHistory}\n            updateConfig={this.onConfigChange}\n            updateData={this.onDataChange}\n            updateProxy={this.onProxyChange} />\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}