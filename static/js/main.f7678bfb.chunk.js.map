{"version":3,"sources":["enums/index.tsx","components/shared/Select.tsx","components/config/method/Method.tsx","components/data/graphql/GraphQL.tsx","components/shared/Button.tsx","components/config/headers/type/Types.tsx","components/shared/Input.tsx","components/config/headers/value/Value.tsx","components/config/headers/Headers.tsx","components/config/destination/domain/Domain.tsx","components/config/destination/endpoint/Endpoint.tsx","components/config/destination/Destination.tsx","components/shared/Notice.tsx","components/shared/Toggler.tsx","components/config/Config.tsx","components/shared/Copy.tsx","components/shared/Saving.tsx","components/shared/TextArea.tsx","components/data/graphql/type/Type.tsx","components/data/json/Json.tsx","components/data/selector/Selector.tsx","components/data/Data.tsx","components/heading/Heading.tsx","components/output/selector/Selector.tsx","utils/index.ts","components/output/curl/Curl.tsx","components/output/Output.tsx","components/shared/Checkbox.tsx","components/test/request/proxy/Proxy.tsx","components/shared/Confirm.tsx","components/test/request/Request.tsx","components/shared/Table.tsx","components/test/fetchresponse/responseheaders/ResponseHeaders.tsx","components/test/fetchresponse/responsejson/ResponseJson.tsx","components/test/fetchresponse/responseraw/ResponseRaw.tsx","components/test/fetchresponse/FetchResponse.tsx","components/shared/Loading.tsx","components/test/Test.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["HTTPMethods","HTTPHeaders","DataType","OutputType","InputTypes","ColumnCount","JsonValueTypes","Select","props","selected","react_default","a","createElement","Fragment","label","className","name","size","style","disabled","isDisabled","multiple","isMultiple","onChange","value","values","map","i","key","concat","GraphQLType","Method","width","shared_Select","e","target","onUpdate","Object","Button","isPrimary","id","onClick","onClickRaw","preventDefault","children","Types","isFullWidth","index","Input","type","TEXT","checked","isChecked","Value","shared_Input","Headers","updateType","header","updateValue","addHeader","length","removeHeader","currentTarget","split","pop","undefined","parseInt","filter","includes","shared_Button","index_es","icon","faMinus","type_Types","toConsumableArray","value_Value","faPlus","Domain","URL","Endpoint","Destination","domain","endpoint","domain_Domain","endpoint_Endpoint","Notice","heading","Toggler","isToggled","onToggle","Config","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateMethod","data","method","updateConfig","updateHeaders","headers","push","updateDestination","toggleConfigSettings","setState","prevState","showConfigSettings","state","destination","shared_Toggler","headers_Headers","TWELVE","method_Method","TWO","destination_Destination","TEN","shared_Notice","href","React","PureComponent","Copy","copy","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","navigator","clipboard","writeText","content","stop","apply","arguments","faCopy","Saving","react_transition_group","transitionName","transitionLeave","transitionEnter","transitionEnterTimeout","isSaved","faSave","TextArea","onChangeDirect","Component","Type","GraphQL","updateGraphQL","draft","getDocAndTypeFromGQLString","gql","onUpdateData","query","_","replace","pretty","PrettyMe","shared_Saving","type_Type","faMagic","shared_Copy","TextArea_TextArea","ref","background","process","backgroundAttachment","backgroundRepeat","backgroundColor","color","doc","parse","definitions","operation","print","newProps","Json","updateJson","hasDraft","object","JSON","stringify","Selector","Data","Json_Json","json","updateData","GQL","GraphQL_GraphQL","graphQL","selector_Selector","Heading","src","imageSrc","alt","methodHasPayload","GET","HEAD","PROXY","regEx","url","curlHeader","curlMethod","curlData","dateTimeZoneChars","jsonData","newLine","newLineAndTab","multipleSpaces","quotes","singleEscapedNewLine","isValidMethod","string","isValidURL","charAt","possUrl","match","isValidHeaders","types","reduce","curr","isValidGraphQLString","isStringANumber","isNaN","isStringADate","Date","isStringBooleanOrNull","toLowerCase","isStringAURL","Curl","serializerCurl","config","hasNewConfig","hasNewData","getMethod","getHeaders","newData","getData","domainAndEndpoint","getDomainAndEndpoint","FORM","updateCurl","curl","console","log","getValue","regex","utils","exec","payload","join","keys","parsePayloadString","Output","output","CURL","Curl_Curl","output_selector_Selector","Checkbox","isCheckedLabel","isNotCheckedLabel","CHECKBOX","Proxy","toggleProxySettings","showProxySettings","onUpdateProxyUrl","onUpdateProxy","isEnabled","proxy","onUpdateProxyEnabled","isExpanded","placeholder","shared_Checkbox","Confirm","window","confirm","message","onConfirm","onCancel","Request","onRequest","Proxy_Proxy","hasRun","shouldConfirm","shared_Confirm","Table","row","j","data-label","ResponseHeaders","toggleHeaders","showHeaders","_this2","shared_Table","Array","from","Header","get","ResponseJson","toggleJson","showJson","replacer","p1","p2","p3","p4","part","indent","end","valueClass","STRING","NUMBER","DATE","BOOLEAN","ReactDOMServer","renderToString","repeat","dangerouslySetInnerHTML","__html","ResponseRaw","toggleRaw","showRaw","FetchResponse","ResponseHeaders_ResponseHeaders","ResponseRaw_ResponseRaw","ResponseJson_ResponseJson","Loading","Test","baseState","getDestination","getFetchData","fetchData","body","onTest","_callee2","_context2","isLoading","response","dest","fetch","sent","text","t0","prevProps","prevProxy","newProxy","validation","success","idx","shared_Loading","proxyMessage","request_Request","updateProxy","fetchresponse_FetchResponse","App","onConfigChange","validatePayload","onDataChange","result","test","form","showData","heading_Heading","Config_Config","output_Output","data_Data","test_Test","Boolean","location","hostname","ReactDOM","render","App_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f7678bfb.chunk.js","sourcesContent":["export enum HTTPMethods {\n  DELETE = \"DELETE\",\n  GET = \"GET\",\n  HEAD = \"HEAD\",\n  PATCH = \"PATCH\",\n  POST = \"POST\",\n  PUT = \"PUT\",\n};\n\nexport enum HTTPHeaders {\n  \"A-IM\" = \"A-IM\",\n  Accept = \"Accept\",\n  \"Accept-Charset\" = \"Accept-Charset\",\n  \"Accept-Datetime\" = \"Accept-Datetime\",\n  \"Accept-Encoding\" = \"Accept-Encoding\",\n  \"Accept-Language\" = \"Accept-Language\",\n  \"Access-Control-Request-Method\" = \"Access-Control-Request-Method\",\n  \"Access-Control-Request-Headers\" = \"Access-Control-Request-Headers\",\n  Authorization = \"Authorization\",\n  Authentication = \"Authentication\",\n  \"Cache-Control\" = \"Cache-Control\",\n  \"Content-Length\" = \"Content-Length\",\n  \"Content-MD5\" = \"Content-MD5\",\n  \"Content-Type\" = \"Content-Type\",\n  Cookie = \"Cookie\",\n  Date = \"Date\",\n  Expect = \"Expect\",\n  Forwarded = \"Forwarded\",\n  From = \"From\",\n  Host = \"Host\",\n  \"HTTP2-Settings\" = \"HTTP2-Settings\",\n  \"If-Match\" = \"If-Match\",\n  \"If-Modified-Since\" = \"If-Modified-Since\",\n  \"If-None-Match\" = \"If-None-Match\",\n  \"If-Range\" = \"If-Range\",\n  \"If-Unmodified-Since\" = \"If-Unmodified-Since\",\n  \"Max-Forwards\" = \"Max-Forwards\",\n  Pragma = \"Pragma\",\n  \"Proxy-Authorization\" = \"Proxy-Authorization\",\n  Range = \"Range\",\n  Referer = \"Referer\",\n  TE = \"TE\",\n  Upgrade = \"Upgrade\",\n  \"User-Agent\" = \"User-Agent\",\n  Via = \"Via\",\n  Warning = \"Warning\",\n}\n\nexport enum DataType {\n  FORM = \"form\",\n  JSON = \"json\",\n  GQL = \"graphQL\",\n}\n\nexport enum OutputType {\n  CURL = \"curl\",\n}\n\nexport enum InputTypes {\n  BUTTON = \"button\",\n  CHECKBOX = \"checkbox\",\n  COLOR = \"color\",\n  DATE = \"date\",\n  DATETIME_LOCAL = \"datetime-local\",\n  EMAIL = \"email\",\n  FILE = \"file\",\n  HIDDEN = \"hidden\",\n  IMAGE = \"image\",\n  MONTH = \"month\",\n  NUMBER = \"number\",\n  PASSWORD = \"password\",\n  RADIO = \"radio\",\n  RANGE = \"range\",\n  RESET = \"reset\",\n  SEARCH = \"search\",\n  SUBMIT = \"submit\",\n  TEL = \"tel\",\n  TEXT = \"text\",\n  TIME = \"time\",\n  URL = \"url\",\n  WEEK = \"week\",\n}\n\nexport enum ColumnCount {\n  ONE = 'one column',\n  TWO = 'two columns',\n  THREE = 'three columns',\n  FOUR = 'four columns',\n  FIVE = 'five columns',\n  SIX = 'six columns',\n  SEVEN = 'seven columns',\n  EIGHT = 'eight columns',\n  NINE = 'nine columns',\n  TEN =  'ten columns',\n  ELEVEN = 'eleven columns',\n  TWELVE = 'twelve columns',\n}\n\nexport enum JsonValueTypes {\n  NUMBER = 'number',\n  DATE = 'date',\n  BOOLEAN = 'boolean',\n  URL = 'url',\n  STRING = 'string',\n}\n","import React from 'react';\n\ninterface selectProps {\n  className?: string;\n  isDisabled?: boolean;\n  label?: string;\n  name?: string;\n  onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n  selected?: string | string[] | null;\n  style?: {[key: string]: string};\n  values: string[];\n  isMultiple?: boolean;\n  size?: number;\n}\n\nconst Select: React.FunctionComponent<selectProps> = (props) => {\n  const selected = props.selected || '';\n  return (\n    <>\n    { props.label && (<label>{props.label}</label>) }\n    <select\n      className={props.className || ''}\n      name={props.name || ''}\n      size={props.size || 0}\n      style={props.style || {}}\n      disabled={props.isDisabled || false}\n      multiple={props.isMultiple || false}\n      onChange={props.onChange || null}\n      value={selected}>\n      <option value=\"\" disabled>Please Select</option>\n      {props.values.map((value: string, i:number) => (\n        <option\n          value={value}\n          key={`${value}_${i}`}>\n          {value}\n        </option>\n      ))}\n    </select>\n    </>\n  );\n}\n\nexport default Select;\n","import React from 'react';\n\nimport Select from '../../shared/Select';\n\nimport './css/Method.css'\n\nimport {\n  ColumnCount,\n  HTTPMethods,\n} from '../../../enums/';\n\ninterface methodProps {\n  onUpdate: (value: HTTPMethods) => void;\n  selected: HTTPMethods;\n  width: ColumnCount;\n};\n\nconst Method: React.FunctionComponent<methodProps> = (props) => {\n\n  const updateSelected = (\n    e: React.ChangeEvent<HTMLSelectElement>,\n  ): void => {\n    const value: HTTPMethods = e.target.value as HTTPMethods;\n    props.onUpdate(value);\n  }\n\n  return (\n    <div className={props.width}>\n      <Select\n        className=\"u-full-width Method\"\n        label=\"HTTP Method\"\n        onChange={updateSelected}\n        selected={props.selected}\n        values={Object.values(HTTPMethods)} />\n    </div>\n  );\n}\n\nexport default Method;\n","import React from 'react';\nimport {parse, print, OperationDefinitionNode} from 'graphql';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMagic } from '@fortawesome/free-solid-svg-icons';\n\nimport Button from '../../shared/Button';\nimport Copy from '../../shared/Copy';\nimport Saving from '../../shared/Saving';\nimport TextArea from '../../shared/TextArea';\nimport Type from './type/Type';\n\nimport './css/GraphQL.css';\n\nimport {gqlPayloadType} from '../Data';\n\nexport enum GraphQLType {\n  QUERY = 'query',\n  MUTATION = 'mutation',\n}\n\ninterface ParsedGQL {\n  gql: string;\n  type: GraphQLType;\n}\n\ninterface GraphQLProps {\n  data: gqlPayloadType;\n  onUpdateData: (value: gqlPayloadType) => void;\n}\n\ninterface GraphQLState {\n  draft: string;\n  isSaved: boolean;\n  type: GraphQLType;\n}\n\nexport default class GraphQL extends React.PureComponent<GraphQLProps, GraphQLState> {\n\n  constructor(props: GraphQLProps) {\n    super(props);\n    const gql = GraphQL.getDocAndTypeFromGQLString(props.data.query);\n    this.state = {\n      draft: gql.gql,\n      isSaved: true,\n      type: gql.type,\n    }\n  }\n\n  static getDocAndTypeFromGQLString(\n    gql: string\n  ): ParsedGQL {\n    const doc = parse(gql);\n    const def: OperationDefinitionNode = doc.definitions[0] as OperationDefinitionNode;\n    const type = def.operation as GraphQLType;\n    return {\n      gql: print(doc),\n      type\n    };\n  }\n\n  static getDerivedStateFromProps(newProps: GraphQLProps, state: GraphQLState): GraphQLState {\n    if (newProps.data.query !== state.draft && !state.isSaved) {\n      return state;\n    }\n    try {\n      const gql = GraphQL.getDocAndTypeFromGQLString(newProps.data.query);\n      return {\n        draft: newProps.data.query,\n        isSaved: true,\n        type: gql.type,\n      };\n\n    } catch (e) {\n      return state;\n    }\n  }\n\n  updateGraphQL = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const draft = e.target.value;\n    try {\n      const gql = GraphQL.getDocAndTypeFromGQLString(draft);\n      if (gql.gql !== this.state.draft) {\n        this.props.onUpdateData(\n          // replace any existing operation with an empty string\n          {query: draft}\n        );\n        this.setState({isSaved: true});\n      } else {\n        this.setState({\n          draft,\n          isSaved:false,\n        });\n      }\n    } catch (_) {\n      this.setState({\n        draft,\n        isSaved: false,\n      });\n    }\n\n\n  }\n\n  updateType = (type: GraphQLType): void => {\n    this.props.onUpdateData(\n      {query: type +  ' ' + this.state.draft.replace(this.state.type, '')},\n    );\n  }\n\n  pretty = () => {\n    this.props.onUpdateData(\n      {query: this.state.type + ' ' + GraphQL.PrettyMe(this.state.draft).replace(this.state.type, '')},\n    );\n  }\n\n  static PrettyMe(gql: string): string {\n    try {\n      return print(parse(gql));\n    } catch (_) {\n      return gql;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"GraphQL\">\n        <div className=\"row\">\n          <div className=\"two columns\">\n            <Saving isSaved={this.state.isSaved} />\n          </div>\n          <div className=\"two columns\">\n            <Type\n              className=\"u-full-width\"\n              selected={this.state.type}\n              onUpdate={this.updateType} />\n          </div>\n          <div className=\"two columns\">\n            <Button\n              className=\"u-full-width\"\n              onClick={this.pretty}\n              isDisabled={!this.state.isSaved}\n              isPrimary={false}>\n              <FontAwesomeIcon icon={faMagic} size=\"lg\" />\n            </Button>\n          </div>\n          <div className=\"two columns\">\n            <Copy\n              className=\"u-pull-right\"\n              content={GraphQL.PrettyMe(this.state.draft)} />\n          </div>\n        </div>\n        <div className=\"row\">\n          <TextArea\n            isFullWidth={true}\n            onChangeDirect={this.updateGraphQL}\n            ref=\"input_gql\"\n            style={{\n              background: `url('${process.env.PUBLIC_URL}/images/textarea.png')`,\n              backgroundAttachment: 'local',\n              backgroundRepeat: 'no-repeat',\n              backgroundColor: '#19404A',\n              color: '#EEE8D5',\n            }}\n            value={this.state.draft} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\ninterface ButtonProps {\n  className?: string;\n  id?: string;\n  isDisabled?: boolean;\n  isPrimary: boolean;\n  label?: string;\n  onClick: () => void;\n  onClickRaw?: (e: React.MouseEvent<HTMLElement>) => void;\n}\n\nconst Button: React.FunctionComponent<ButtonProps> = (props) => {\n  const clickHandler = (e: React.MouseEvent) => {\n    e.preventDefault();\n    props.onClick();\n  }\n\n  return (\n    <button\n      className={(props.isPrimary ? 'button-primary ' : ' ') + props.className || ' '}\n      disabled={props.isDisabled}\n      id={props.id}\n      onClick={props.onClickRaw || clickHandler}>\n      {props.children || props.label || ''}\n      </button>\n  );\n}\n\nexport default Button;\n","import React from 'react';\n\nimport Select from '../../../shared/Select';\n\nimport './css/Types.css';\n\nimport {HTTPHeaders} from '../../../../enums';\n\ninterface TypeProps {\n  index: number;\n  isFullWidth: boolean;\n  values: (HTTPHeaders | string)[];\n  selected: HTTPHeaders | string;\n  onUpdate: (value: HTTPHeaders, index: number) => void;\n}\n\nconst Types: React.FunctionComponent<TypeProps> = (props) => {\n  const updateSelected = (\n    e: React.ChangeEvent<HTMLSelectElement>,\n  ): void => {\n    const value: HTTPHeaders = e.target.value as HTTPHeaders;\n    props.onUpdate(value, props.index);\n  }\n\n  return (\n    <Select\n      className={(props.isFullWidth ? 'u-full-width' : '') + ' Types'}\n      onChange={updateSelected}\n      selected={props.selected}\n      values={props.values} />\n  );\n}\n\nexport default Types;\n","// Import React\nimport React from 'react';\n\n// Import Enums\nimport {InputTypes} from '../../enums';\n\n// Define Interfaces\ninterface InputProps {\n  className?: string;\n  isChecked?: boolean\n  isDisabled?: boolean;\n  label?: string;\n  name?: string;\n  id?: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  placeholder?: string;\n  type?: InputTypes;\n  value?: string;\n}\n\n// Input Component\nconst Input: React.FunctionComponent<InputProps> = (props) => (\n  <>\n  { props.label && (<label>{props.label}</label>) }\n  <input\n    type={props.type || InputTypes.TEXT}\n    checked={props.isChecked}\n    className={props.className || ''}\n    name={props.name || ''}\n    id={props.id || ''}\n    value={props.value || ''}\n    disabled={props.isDisabled}\n    onChange={props.onChange}\n     />\n  </>\n);\n\nexport default Input;\n","import React from 'react';\n\nimport Input from '../../../shared/Input'\n\nimport './css/Value.css'\n\ninterface ValueProps {\n  index: number;\n  isFullWidth: boolean;\n  value: string;\n  onUpdate: (value: string, index: number) => void;\n}\n\nconst Value: React.FunctionComponent<ValueProps> = (props) => {\n  const updateValue = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    props.onUpdate(e.target.value, props.index);\n  }\n\n  return (\n    <Input\n      className={(props.isFullWidth ? 'u-full-width' : '') + ' Value'}\n      onChange={updateValue}\n      value={props.value} />\n  );\n}\n\nexport default Value;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faMinus } from '@fortawesome/free-solid-svg-icons';\n\nimport Button from '../../shared/Button';\n\nimport Types from './type/Types';\nimport Value from './value/Value';\n\nimport './css/Headers.css';\n\nimport {\n  ColumnCount,\n  HTTPHeaders,\n} from '../../../enums';\n\nexport interface Header {\n  type: HTTPHeaders | string;\n  value: string;\n};\n\ninterface HeadersProps {\n  onUpdate: (value: Header | null, index: number) => void;\n  selected: Header[];\n  width: ColumnCount,\n}\n\n\nconst Headers: React.FunctionComponent<HeadersProps> = (props) => {\n\n  const updateType = (type: HTTPHeaders, index: number): void => {\n    const header = props.selected[index];\n    header.type = type;\n    props.onUpdate(header, index);\n  }\n\n  const updateValue = (value: string, index: number): void => {\n    const header = props.selected[index];\n    header.value = value;\n    props.onUpdate(header, index);\n  }\n\n  const addHeader = (e: React.MouseEvent<HTMLElement>): void => {\n    e.preventDefault();\n    // create a pending header, add this to the end of the index\n    props.onUpdate(\n      {\n        type: '',\n        value: '',\n      },\n      props.selected.length,\n    );\n  }\n\n  const removeHeader = (e: React.MouseEvent<HTMLElement>): void => {\n    e.preventDefault();\n    const index = e.currentTarget.id.split('_').pop();\n\n    if (index === undefined) {\n      // oh no...\n      return;\n    }\n    props.onUpdate(null, parseInt(index));\n  }\n\n  // Don't allow duplicate headers.\n  const selected = props.selected.map(header => header.type);\n  const values = Object.values(HTTPHeaders).filter(header => !selected.includes(header));\n\n  return (\n\n    <div className={props.width + ' Headers'}>\n      <div className=\"row\">\n        <div className=\"twelve rows\">\n          <label> HTTP Headers </label>\n        </div>\n      </div>\n\n        {\n          props\n            .selected\n            .map(\n              (header: Header, index: number) => (\n\n                <div className=\"row\" key={`${header.type}_${index}`}>\n                {\n                  // TODO: selected and values aren't behaving below\n                }\n                  <div className=\"two columns\">\n                    <Button\n                      id={`remove_${index}`}\n                      isPrimary={false}\n                      className='u-full-width'\n                      onClick={() => {}}\n                      onClickRaw={removeHeader}>\n                      <FontAwesomeIcon icon={faMinus} size=\"lg\" />\n                    </Button>\n                  </div>\n                  <div className=\"four columns\">\n                    <Types\n                      index={index}\n                      isFullWidth={true}\n                      values={[...values, header.type]}\n                      selected={header.type}\n                      onUpdate={updateType} />\n                  </div>\n                  <div className=\"four columns\">\n                    <Value\n                      index={index}\n                      isFullWidth={true}\n                      value={header.value || ''}\n                      onUpdate={updateValue} />\n                  </div>\n                  <div className=\"two columns\">\n                    <Button\n                      isPrimary={false}\n                      className='u-full-width'\n                      onClick={() => {}}\n                      onClickRaw={addHeader}>\n                      <FontAwesomeIcon icon={faPlus} size=\"lg\" />\n                    </Button>\n                  </div>\n                </div>\n            )\n          )\n        }\n        {\n          props.selected.length === 0 && (\n            <div className=\"row\">\n              <Button\n                isPrimary={false}\n                className='u-full-width'\n                onClick={() => {}}\n                onClickRaw={addHeader}>\n                <FontAwesomeIcon icon={faPlus} size=\"lg\" />\n              </Button>\n            </div>\n          )\n        }\n    </div>\n  );\n}\n\nexport default Headers;\n","import React from 'react';\n\nimport Input from '../../../shared/Input'\n\nimport './css/Domain.css';\n\nimport {InputTypes} from '../../../../enums';\n\ninterface DomainProps {\n  isFullWidth: boolean;\n  value: string;\n  onUpdate: (value: string) => void;\n}\n\nconst Domain: React.FunctionComponent<DomainProps> = (props) => {\n  const updateValue = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    props.onUpdate(e.target.value);\n  }\n\n  return (\n    <Input\n      className={(props.isFullWidth ? 'u-full-width' : '') + ' Domain'}\n      onChange={updateValue}\n      type={InputTypes.URL}\n      value={props.value} />\n  );\n}\n\nexport default Domain;\n","import React from 'react';\n\nimport Input from '../../../shared/Input'\n\nimport './css/Endpoint.css';\n\ninterface EndpointProps {\n  isFullWidth: boolean;\n  value: string;\n  onUpdate: (value: string) => void;\n}\n\nconst Endpoint: React.FunctionComponent<EndpointProps> = (props) => {\n  const updateValue = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    ;\n    props.onUpdate(e.target.value);\n  }\n\n  ;\n  return (\n    <Input\n      className={(props.isFullWidth ? 'u-full-width' : '') + ' Endpoint'}\n      onChange={updateValue}\n      value={props.value} />\n  );\n}\n\nexport default Endpoint;\n","import React from 'react';\n\nimport Domain from './domain/Domain';\nimport Endpoint from './endpoint/Endpoint';\n\nimport './css/Destination.css';\n\nimport {ColumnCount} from '../../../enums';\n\ntype DomainOrEndpoint = 'domain' | 'endpoint';\n\ninterface DestinationProps {\n  onUpdate: (domain: string, endpoint: string) => void;\n  domain: string;\n  endpoint: string;\n  width: ColumnCount;\n}\n\nconst Destination: React.FunctionComponent<DestinationProps> = (props) => {\n\n  const onUpdate = (value: string, type: DomainOrEndpoint): void => {\n    props.onUpdate(\n      (type === 'domain') ? value : props.domain,\n      (type === 'endpoint') ? value : props.endpoint,\n    );\n  }\n\n  const onUpdateEndpoint = (endpoint: string): void => {\n    onUpdate(endpoint, 'endpoint');\n  }\n\n  const onUpdateDomain = (domain: string): void => {\n    onUpdate(domain, 'domain');\n  }\n\n  return (\n    <div className={props.width + ' Destination'}>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n        <label> Destination </label>\n        </div>\n      </div>\n      <div className=\"row\">\n          <div className=\"six columns\">\n            <Domain\n              isFullWidth={true}\n              onUpdate={onUpdateDomain}\n              value={props.domain} />\n          </div>\n          <div className=\"six columns\">\n            <Endpoint\n              isFullWidth={true}\n              onUpdate={onUpdateEndpoint}\n              value={props.endpoint} />\n          </div>\n        </div>\n      </div>\n  );\n}\n\nexport default Destination;\n","/**\n * @file Notice component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport './css/Notice.css';\n\ninterface NoticeProps {\n  className?: string;\n  heading: string;\n}\n\nconst Notice: React.FunctionComponent<NoticeProps> = (props) => {\n\n  return (\n    <div className={(props.className || '') + ' Notice'}>\n      <h4> {props.heading} </h4>\n      <>\n        {props.children}\n      </>\n    </div>\n  )\n};\n\nexport default Notice;\n","import React from 'react';\n\nimport Button from './Button';\n\ninterface TogglerProps {\n  className?: string;\n  label: string;\n  onToggle: () => void;\n  isToggled: boolean;\n}\n\nconst Toggler: React.FunctionComponent<TogglerProps> = (props) => {\n\n  return (\n    <div className={props.className || ''}>\n      <div className=\"row\">\n      <Button\n        className=\"u-full-width\"\n        isPrimary={false}\n        label= {(!props.isToggled ? 'Show ' : 'Hide ') + props.label}\n        onClick={props.onToggle} />\n      </div>\n      {\n        props.isToggled && (\n          <div className=\"row\">{props.children}</div>\n        )\n      }\n    </div>\n  )\n}\n\nexport default Toggler;\n","import React from 'react';\n\nimport Method from './method/Method';\nimport Headers, { Header } from './headers/Headers';\nimport Destination from './destination/Destination';\n\nimport Notice from '../shared/Notice';\nimport Toggler from '../shared/Toggler';\n\nimport {\n  ColumnCount,\n  HTTPMethods,\n} from '../../enums';\n\nexport interface ConfigData {\n  method: HTTPMethods;\n  headers: Header[];\n  domain: string;\n  endpoint: string;\n}\n\ninterface ConfigProps {\n  data: ConfigData;\n  updateConfig: (data: ConfigData) => void;\n}\n\ninterface ConfigState {\n  showConfigSettings: boolean;\n}\n\nexport default class Config extends React.PureComponent <\n  ConfigProps,\n  ConfigState> {\n\n  constructor(props: ConfigProps) {\n    super(props);\n    this.state = {\n      showConfigSettings: true,\n    };\n  }\n\n  updateMethod = (value: HTTPMethods) => {\n    const data = this.props.data;\n    data.method = value;\n    this.props.updateConfig(data);\n  }\n\n  updateHeaders = (value: Header | null, index: number): void => {\n    const data = this.props.data;\n    if (!data.headers[index] && value) {\n      data.headers.push(value);\n    } else {\n      if (!value) {\n        delete data.headers[index];\n        data.headers = data.headers.filter(header => header);\n      } else {\n        data.headers[index] = value;\n      }\n    }\n    this.props.updateConfig(data);\n  }\n\n  updateDestination = (domain: string, endpoint: string) => {\n    const data = this.props.data;\n    data.domain = domain;\n    data.endpoint = endpoint;\n    this.props.updateConfig(data);\n  }\n\n  toggleConfigSettings = () => {\n    this.setState(prevState => ({\n      showConfigSettings: !prevState.showConfigSettings,\n    }));\n  }\n\n  render() {\n    const destination = this.props.data.domain + this.props.data.endpoint;\n    return (\n      <>\n        <div className=\"row\">\n          <Toggler\n            isToggled={this.state.showConfigSettings}\n            className=\"Config\"\n            label=\"Config Settings\"\n            onToggle={this.toggleConfigSettings}>\n            <div className=\"row\">\n              <Headers\n                onUpdate={this.updateHeaders}\n                selected={this.props.data.headers}\n                width={ColumnCount.TWELVE} />\n            </div>\n            <div className=\"row\">\n            <Method\n              selected={this.props.data.method}\n              width={ColumnCount.TWO}\n              onUpdate={this.updateMethod} />\n            <Destination\n              onUpdate={this.updateDestination}\n              domain={this.props.data.domain}\n              endpoint={this.props.data.endpoint}\n              width={ColumnCount.TEN} />\n            </div>\n          </Toggler>\n        </div>\n        {\n          !this.state.showConfigSettings && (\n            <Notice\n              heading=\"Request Config Settings\">\n              Sending a [<strong>{this.props.data.method}</strong>] request\n              to: [<strong><a href={destination}>{destination}</a></strong>]\n              {\n                this.props.data.headers.length > 0 && (\n                  <>\n                    , with the HTTP Headers: {\n                      this.props.data.headers.map(\n                        header => (\n                          <>\n                            <br />\n                            <strong>{header.type}</strong>: <em>{header.value}</em>\n                          </>\n                        )\n                      )\n                    }\n                  </>\n                )\n              }\n            </Notice>\n          )\n        }\n      </>\n    );\n  }\n\n}\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCopy } from '@fortawesome/free-solid-svg-icons';\n\nimport Button from './Button';\n\ninterface CopyProps {\n  className?: string;\n  label?: string;\n  content: string;\n}\n\nconst Copy: React.FunctionComponent<CopyProps> = (props) => {\n\n  const copy = async () => {\n    await navigator.clipboard.writeText(props.content);\n  }\n\n  return (\n    <Button\n      className={props.className || ''}\n      isPrimary={false}\n      onClick={copy}>\n      <FontAwesomeIcon icon={faCopy} size=\"lg\" />\n      </Button>\n  )\n}\n\nexport default Copy;\n","import React from 'react';\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSave } from '@fortawesome/free-solid-svg-icons';\n\nimport './css/Saving.css';\n\ninterface SavingProps {\n  className?: string;\n  isSaved: boolean;\n}\n\nconst Saving: React.FunctionComponent<SavingProps> = (props) => {\n  return (\n    <CSSTransitionGroup\n      transitionName=\"save-notice\"\n      transitionLeave={false}\n      transitionEnter={true}\n      transitionEnterTimeout={500}>\n      <div\n        className={\n          ((props.isSaved) ? 'Saved' : 'NotSaved')\n          +  \" SavingNotice \"\n          + (props.className || '')\n        }\n        key={\"notice-\" + props.isSaved}>\n        <FontAwesomeIcon icon={faSave} size=\"lg\" />\n      </div>\n    </CSSTransitionGroup>\n  )\n}\n\nexport default Saving;\n","import React from 'react';\n\ninterface TextAreaProps {\n  className?: string;\n  isFullWidth: boolean;\n  onChangeDirect?: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  onUpdate?: (value: string) => void;\n  style?: {\n    [key: string]: string,\n  };\n  value: string;\n}\n\ninterface TextAreaState {}\n\nexport default class TextArea extends React.Component<TextAreaProps, TextAreaState> {\n\n  constructor(props: TextAreaProps) {\n    super(props);\n    this.state = {};\n  }\n\n  onUpdate = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    if (this.props.onChangeDirect) {\n      this.props.onChangeDirect(e);\n    } else if (this.props.onUpdate) {\n      this.props.onUpdate(e.target.value);\n    }\n  }\n\n  render () {\n    return (\n      <textarea\n        className={((this.props.isFullWidth) ? 'u-full-width ' : ' ') + this.props.className || '' }\n        onChange={this.onUpdate}\n        style={this.props.style || {}}\n        value={this.props.value}>\n      </textarea>\n    );\n  }\n}\n","import React from 'react';\n\nimport Select from '../../../shared/Select';\n\nimport './css/Type.css';\n\nimport {GraphQLType} from '../GraphQL';\n\ninterface TypeProps {\n  className?: string;\n  selected: GraphQLType;\n  onUpdate: (type: GraphQLType) => void;\n}\n\nconst Type: React.FunctionComponent<TypeProps> = (props) => {\n  const updateSelected = (\n    e: React.ChangeEvent<HTMLSelectElement>,\n  ): void => {\n    const value: GraphQLType = e.target.value as GraphQLType;\n    props.onUpdate(value);\n  }\n\n  return (\n    <Select\n      className={(props.className || '') + \" Type\"}\n      onChange={updateSelected}\n      selected={props.selected}\n      values={Object.values(GraphQLType)} />\n  );\n}\n\nexport default Type\n","/**\n * @file Curl component\n * @author Mattamorphic\n */\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMagic } from '@fortawesome/free-solid-svg-icons';\n\n// Imported components\nimport Button from '../../shared/Button';\nimport Copy from '../../shared/Copy';\nimport Saving from '../../shared/Saving';\nimport TextArea from '../../shared/TextArea';\n\n// CSS imports\nimport './css/Json.css';\n\n// Type imports\nimport {payloadType} from '../Data';\n\ninterface JsonProps {\n  data: payloadType;\n  onUpdateData: (value: payloadType) => void;\n}\n\ninterface JsonState {\n  draft: string;\n  hasDraft: boolean;\n}\n\nexport default class Json extends React.PureComponent<JsonProps, JsonState> {\n\n  constructor(props: JsonProps) {\n    super(props);\n    this.state = {\n      draft: JSON.stringify(props.data, null, 2),\n      hasDraft: false,\n    };\n  }\n\n  /**\n   * @function We have to update the state based on the props, this needs removing\n   *\n   * @param {JsonProps} newProps The new received props\n   * @param {JsonState} state    The current state\n   *\n   * @return {JsonState}\n   */\n  static getDerivedStateFromProps(newProps: JsonProps, state: JsonState): JsonState {\n    let draft = state.draft;\n    let hasDraft = state.hasDraft;\n    if (!state.hasDraft && JSON.stringify(newProps.data) !== JSON.stringify(JSON.parse(state.draft))) {\n      draft = JSON.stringify(newProps.data, null, 2);\n      hasDraft = false;\n    } else {\n      try {\n        JSON.parse(draft);\n        hasDraft = false;\n      } catch(_) {}\n    }\n    return {\n      draft,\n      hasDraft,\n    };\n  }\n\n  /**\n   * @function Update the data from the json string\n   *\n   * @param {string} value The possible json string\n   */\n  updateJson = (value: string) => {\n    this.setState({\n      draft: value,\n      hasDraft: true\n    });\n    try {\n      const object = JSON.parse(value);\n      this.props.onUpdateData(object);\n    } catch (_) {}\n  }\n\n  /**\n   * @function Pretty print the json in the state\n   */\n  pretty = () => {\n    try {\n      this.setState({\n        draft: JSON.stringify(JSON.parse(this.state.draft), null, 2),\n        hasDraft: true,\n      });\n    } catch (_) {\n      return;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Json\">\n        <div className=\"row\">\n          <div className=\"two columns\">\n            <Saving\n              className=\"u-full-width\"\n              isSaved={!this.state.hasDraft} />\n          </div>\n          <div className=\"four columns\">\n            <Button\n              className=\"u-full-width\"\n              onClick={this.pretty}\n              isPrimary={false}>\n              <FontAwesomeIcon icon={faMagic} size=\"lg\" />\n            </Button>\n          </div>\n          <div className=\"four columns\">\n            <Copy\n              className=\"u-full-width\"\n              content={this.state.draft} />\n          </div>\n        </div>\n        <div className=\"row\">\n          <TextArea\n            isFullWidth={true}\n            onUpdate={this.updateJson}\n            style={{\n              background: `url('${process.env.PUBLIC_URL}/images/textarea.png')`,\n              backgroundAttachment: 'local',\n              backgroundRepeat: 'no-repeat',\n              backgroundColor: '#19404A',\n              color: '#EEE8D5',\n            }}\n            value={this.state.draft} />\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react';\n\nimport Select from '../../shared/Select';\n\nimport './css/Selector.css';\n\nimport {DataType} from '../../../enums';\n\ninterface SelectorProps {\n  className?: string;\n  selected: DataType;\n  onUpdate: (value: DataType) => void;\n}\n\nconst Selector: React.FunctionComponent<SelectorProps> = (props) => {\n  const updateSelected = (\n    e: React.ChangeEvent<HTMLSelectElement>,\n  ): void => {\n    const value: DataType = e.target.value as DataType;\n    props.onUpdate(value);\n  }\n\n  return (\n    <Select\n      className={(props.className || '') + \" Selector\"}\n      onChange={updateSelected}\n      selected={props.selected}\n      values={Object.values(DataType)} />\n  );\n}\n\nexport default Selector;\n","import React from 'react';\n\nimport GraphQL from './graphql/GraphQL';\nimport Json from './json/Json';\nimport Selector from './selector/Selector';\n\nimport './css/Data.css';\n\nimport {\n  DataType,\n} from '../../enums';\n\nexport type payloadType = {[key: string]: any}\nexport type gqlPayloadType = {query: string}\n\nexport interface DataData {\n  type: DataType;\n  data: {\n    [DataType.JSON]: payloadType;\n    [DataType.GQL]: gqlPayloadType;\n    [DataType.FORM]: null;\n  }\n}\n\ninterface DataProps {\n  className?: string;\n  data: DataData;\n  updateData: (data: DataData) => void;\n}\n\nconst Data: React.FunctionComponent<DataProps> = (props) => {\n  const updateType = (value: DataType) => {\n    const data = props.data;\n    data.type = value;\n    props.updateData(data);\n  }\n\n  const updateJsonData = (value: payloadType) => {\n    const data = props.data;\n    data.data.json = value;\n    props.updateData(data);\n  }\n\n  const updateGraphQLData = (value: gqlPayloadType) => {\n    const data = props.data;\n    data.data.graphQL = value\n    props.updateData(data);\n  }\n\n  return (\n    <div className={(props.className || '' ) + ' Data'}>\n      <label> Data </label>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n        {\n          props.data.type === DataType.JSON\n            && (<Json data={props.data.data.json} onUpdateData={updateJsonData} />)\n        }\n        {\n          props.data.type === DataType.GQL\n            && (<GraphQL\n              data={props.data.data.graphQL}\n              onUpdateData={updateGraphQLData} />)\n        }\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n          <Selector\n            className=\"u-full-width\"\n            selected={props.data.type}\n            onUpdate={updateType} />\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default Data;\n","import React from 'react';\n\nimport './css/Heading.css'\n\ninterface HeadingProps {\n  imageSrc: string;\n}\n\nconst Heading: React.FunctionComponent<HeadingProps> = (props) => {\n  return (\n    <div className=\"Heading\">\n      <img src={props.imageSrc} alt=\"curlify logo\" />\n\n    </div>\n  );\n}\n\nexport default Heading;\n","import React from 'react';\n\nimport Select from '../../shared/Select';\n\nimport './css/Selector.css';\n\nimport {OutputType} from '../../../enums';\n\ninterface SelectorProps {\n  className?: string;\n  selected: OutputType;\n  onUpdate: (value: OutputType) => void;\n}\n\nconst Selector: React.FunctionComponent<SelectorProps> = (props) => {\n  const updateSelected = (\n    e: React.ChangeEvent<HTMLSelectElement>,\n  ): void => {\n    const value: OutputType = e.target.value as OutputType;\n    props.onUpdate(value);\n  }\n\n  return (\n    <Select\n      className={(props.className || '') + \" Selector\"}\n      onChange={updateSelected}\n      selected={props.selected}\n      values={Object.values(OutputType)} />\n  );\n}\n\nexport default Selector;\n","import {parse} from 'graphql';\n\nimport {HTTPHeaders, HTTPMethods} from '../enums';\n\n// import {ConfigData} from '../components/config/Config';\n// import {DataData} from '../components/data/Data';\nimport {Header} from '../components/config/headers/Headers';\nimport {ProxyData} from '../components/test/request/proxy/Proxy';\n\nexport const methodHasPayload = (method: HTTPMethods) => (\n  ![HTTPMethods.GET, HTTPMethods.HEAD]\n    .includes(method)\n)\n\nexport const PROXY = \"https://curlify-proxy.herokuapp.com/\";\n\nexport const regEx = {\n  url: /^((?:http(?:s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+))+([\\w\\-\\._~:\\/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+)$/gim,\n  curlHeader: /(?:-H \")([\\w\\d]{1,})(?:\\s{0,}:\\s{0,})(.+?)(?=\")/gim,\n  curlMethod: /(?:-X\\s{0,})(\\w{3,6})/gim,\n  // Todo: convert to /gms https://github.com/babel/babel/pull/10347\n  curlData: /(?:-d\\s{0,}'|\")({.*})(?=['|\"])/gim,\n  dateTimeZoneChars: /[T|Z]/gim,\n  jsonData: /^( *)(\"[^\"]+\": )?(\"[^\"].*\"|[\\w.+-]*)?([{}[\\],]*)?$/mg,\n  newLine: /[\\r|\\n]/gm,\n  newLineAndTab: /[\\n|\\r|\\t]/gm,\n  multipleSpaces: / +/gm,\n  quotes:/[\\\"\\']/gim,\n  singleEscapedNewLine: /(?<!\\\\)\\\\n/gm,\n\n};\n\n// export const hasDataChanged = (\n//   prevData: DataData,\n//   newData: DataData\n// ): boolean => {\n//   return false;\n// }\n//\n// export const hasConfigChanged = (\n//   prevData: DataData,\n//   newData: DataData\n// ): boolean => {\n//   return false;\n// }\n\nexport const hasProxyChanged = (\n  prevProxy: ProxyData,\n  newProxy: ProxyData\n): boolean => {\n  return prevProxy.isEnabled !== newProxy.isEnabled\n    || prevProxy.url !== newProxy.url;\n}\n\nexport const isValidMethod = (string: string): boolean => (\n  Object\n  .values(HTTPMethods)\n  .includes(string)\n)\n\nexport const isValidURL = (domain: string, endpoint: string): boolean => {\n  const url = domain\n    + ((domain.charAt(domain.length-1) !== '/' && endpoint.charAt(0) !== '/')\n      ? '/'\n      : '')\n    + endpoint;\n\n  const possUrl = (url).match(regEx.url);\n  return (!possUrl || possUrl[0] !== url) ? false : true;\n}\n\nexport const isValidHeaders = (headers: Header[]): boolean => {\n  const types = Object.values(HTTPHeaders)\n  return headers.reduce(\n    (_: boolean, curr: Header) => {\n      return types.includes(curr.type); // TODO: validate the value\n    },\n    true,\n  );\n}\n\nexport const isValidJsonString = (json: string) => {\n  try {\n    JSON.parse(json);\n    return true;\n  } catch (_) {\n    return false;\n  }\n}\n\nexport const isValidGraphQLString = (gql: string) => {\n  try {\n    parse(gql);\n    return true;\n  } catch (_) {\n    return false;\n  }\n}\n\nexport const isStringANumber = (value: string): boolean => {\n  return !isNaN(parseInt(value));\n}\n\nexport const isStringADate = (value: string): boolean => {\n  return !isNaN(Date.parse(value.replace(regEx.dateTimeZoneChars, ' ')));\n}\n\nexport const isStringBooleanOrNull = (value: string): boolean => {\n  const permitted = ['true', 'false', 'null', 'nil', 'undefined'];\n  return (permitted.includes(value.toLowerCase()));\n}\n\nexport const isStringAURL = (value: string): boolean => {\n  return !!value.replace(regEx.quotes, '').match(regEx.url);\n}\n","/**\n * @file Curl component\n * @author Mattamorphic\n */\nimport React from 'react';\n\n// Imported components\nimport Copy from '../../shared/Copy';\nimport Saving from '../../shared/Saving';\nimport TextArea from '../../shared/TextArea';\n\n// Resuable helper functions / objects\nimport * as utils from '../../../utils';\n\n// Imported types / interfaces\nimport {ConfigData} from '../../config/Config';\nimport {DataData, payloadType} from '../../data/Data';\nimport {Header} from '../../config/headers/Headers';\n\n// CSS imports\nimport './css/Curl.css';\n\n// Enum imports\nimport {\n  DataType,\n  HTTPHeaders,\n  HTTPMethods,\n} from '../../../enums';\n\ninterface DomainAndEndpoint {\n  domain: string | null;\n  endpoint: string | null;\n}\n\ninterface SerializedCurl {\n  config: ConfigData;\n  data: DataData;\n  hasNewConfig: boolean;\n  hasNewData: boolean;\n}\n\ninterface CurlProps {\n  config: ConfigData;\n  data: DataData;\n  updateConfig: (data: ConfigData) => void;\n  updateData: (data: DataData) => void;\n}\n\ninterface CurlState {\n  draft: string;\n  hasDraft: boolean;\n}\n\nexport default class Curl extends React.Component<CurlProps, CurlState>  {\n\n  constructor(props: CurlProps) {\n    super(props);\n    this.state = {\n      draft: Curl.getValue(props.config, props.data),\n      hasDraft: false,\n    };\n  }\n\n  /**\n   * @function Get the headers from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {Header[] | null}\n   */\n  getHeaders(value: string): Header[] | null {\n    const regex = utils.regEx.curlHeader;\n    const headers = [];\n    let match = null;\n    while (match = regex.exec(value)) {\n      headers.push({\n        type: match[1] as HTTPHeaders,\n        value: match[2] as string,\n      });\n    }\n    if (headers.length === 0) {\n      return null;\n    }\n    return headers;\n  }\n\n  /**\n   * @function Get the method from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {HTTPMethods | null}\n   */\n  getMethod(value: string): HTTPMethods | null {\n    const regex = utils.regEx.curlMethod;\n    if (!value.match(regex)) {\n      return null;\n    }\n    const match = regex.exec(value);\n    if (!match) {\n      return null;\n    }\n    return match[1] as HTTPMethods;\n  }\n\n  /**\n   * @function Get the data from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {payloadType | null}\n   */\n  getData(value: string): payloadType | null {\n    const regex = utils.regEx.curlData;\n    if (!value.match(regex)) {\n      return null;\n    }\n    const match = regex.exec(value);\n    if (!match) {\n      return null;\n    }\n    try {\n      return JSON.parse(match[1]);\n    } catch (_) {\n      return null;\n    }\n  }\n\n  /**\n   * @function Get the domain and endpoint from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {DomainAndEndpoint | null}\n   */\n  getDomainAndEndpoint(value: string): DomainAndEndpoint | null {\n    const regex = utils.regEx.url;\n    if (!value.match(regex)) {\n      return null;\n    }\n    const match = regex.exec(value);\n    if (!match) {\n      return null;\n    }\n    return {\n      domain: match[1] || null,\n      endpoint: match[2] || null,\n    };\n  }\n\n  /**\n   * @function Serialize a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {SerializedCurl}\n   */\n  serializerCurl = (value: string): SerializedCurl => {\n    // Get the current values\n    const config = this.props.config;\n    const data = this.props.data;\n\n    let hasNewConfig = false;\n    let hasNewData = false;\n\n     // decide which method to use\n    const method = this.getMethod(value);\n\n    // decide which headers to use\n    const headers = this.getHeaders(value);\n\n    // decide which data to use\n    const newData = this.getData(value);\n\n    // decide which domain and endpoint to use\n    const domainAndEndpoint = this.getDomainAndEndpoint(value);\n\n    if (\n      method\n      && method !== config.method\n      && Object.values(HTTPMethods).includes(method)\n    ) {\n      hasNewConfig = true;\n      config.method = method;\n    }\n\n    // Todo - this needs to actually check the header\n    if (headers) {\n      hasNewConfig = true;\n      config.headers = headers;\n    }\n    if (newData && JSON.stringify(newData) !== JSON.stringify(data.data[data.type])) {\n      hasNewData = true;\n      switch (data.type) {\n        case DataType.GQL:\n          data.data.graphQL.query = newData.query;\n          break;\n        case DataType.JSON:\n          data.data.json = newData;\n          break;\n        case DataType.FORM:\n          break;\n      }\n    }\n    if (domainAndEndpoint) {\n      if (domainAndEndpoint.domain && domainAndEndpoint.domain !== config.domain) {\n        hasNewConfig = true;\n        config.domain = domainAndEndpoint.domain;\n      }\n      if (domainAndEndpoint.endpoint && domainAndEndpoint.endpoint !== config.endpoint) {\n        hasNewConfig = true;\n        config.endpoint = domainAndEndpoint.endpoint;\n      }\n    }\n\n    return {\n      config,\n      data,\n      hasNewConfig,\n      hasNewData,\n    };\n  }\n\n  /**\n   * @function Update the data from the curl string\n   *\n   * @param {string} value The curl string\n   */\n  updateCurl = (value: string): void => {\n    const curl = this.serializerCurl(value);\n    console.log(curl);\n    if (curl.hasNewData || curl.hasNewConfig) {\n      // set draft to null, we'll update with the new props\n      this.setState({hasDraft: false}, () => {\n        curl.hasNewData && this.props.updateData(curl.data);\n        curl.hasNewConfig && this.props.updateConfig(curl.config);\n      });\n    }\n    // set the draft to true, let's use this\n    if (!curl.hasNewData && !curl.hasNewConfig) {\n      this.setState({draft: value, hasDraft: true});\n    }\n  }\n\n  /**\n   * @function Pass the config and data into a curl string\n   *\n   * @params {ConfigData} config The Configuration data for the curl request\n   * @params {DataData}   data   The data for the curl request\n   */\n  static getValue(\n    config: ConfigData,\n    data: DataData,\n  ): string {\n    let payload = {};\n    switch (data.type) {\n      case DataType.JSON:\n        payload = data.data.json;\n        break;\n      case DataType.GQL:\n        payload = data.data.graphQL;\n        break;\n      case DataType.FORM:\n        break;\n    }\n\n    return (\n      `curl -X ${config.method} \\\\ \\n`\n      + `${config.headers\n        .map(\n          header => `-H \"${header.type}\": \"${header.value }\" \\\\ \\n`\n        ).join('')}`\n      + `${(payload\n          && Object.keys(payload).length > 0\n          && utils.methodHasPayload(config.method)\n        )\n         ? `-d '${Curl.parsePayloadString(JSON.stringify(payload))}' \\\\ \\n`\n         : ''}`\n      + `${config.domain + config.endpoint}`);\n  }\n\n  /**\n   * @function Parse a string remove new line / tab and remove multiple spaces\n   *\n   * @param {string} value\n   */\n  static parsePayloadString(value: string): string {\n    return value\n      .replace(utils.regEx.newLineAndTab, '')\n      .replace(utils.regEx.multipleSpaces, ' ')\n      .replace(utils.regEx.singleEscapedNewLine, '');\n  }\n\n  render () {\n    const draft = this.state.hasDraft\n      ? this.state.draft\n      : Curl.getValue(\n        this.props.config,\n        this.props.data,\n      );\n    return (\n      <div className=\"Curl\">\n        <div className=\"row\">\n          <div className=\"two columns\">\n            <Saving\n              className=\"u-full-width\"\n              isSaved={!this.state.hasDraft} />\n          </div>\n          <div className=\"six columns\">\n            <div className=\"u-full-width\" />\n          </div>\n          <div className=\"four columns\">\n            <Copy\n              className=\"u-full-width\"\n              content={draft} />\n          </div>\n        </div>\n        <div className=\"row\">\n          <TextArea\n            isFullWidth={true}\n            onUpdate={this.updateCurl}\n            style={{\n              background: `url('${process.env.PUBLIC_URL}/images/textarea.png')`,\n              backgroundAttachment: 'local',\n              backgroundRepeat: 'no-repeat',\n              backgroundColor: '#19404A',\n              color: '#EEE8D5',\n            }}\n            value={draft} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport Toggler from '../shared/Toggler'\n\nimport Selector from './selector/Selector';\n\nimport {ConfigData} from '../config/Config';\nimport Curl from './curl/Curl';\nimport {DataData} from '../data/Data';\n\nimport './css/Output.css';\n\nimport {OutputType} from '../../enums';\n\ninterface OutputProps {\n  className?: string;\n  config: ConfigData;\n  data: DataData;\n  output: OutputType;\n  updateConfig: (data: ConfigData) => void;\n  updateData: (data: DataData) => void;\n}\n\nconst Output: React.FunctionComponent<OutputProps> = (props) => {\n  const updateType = (_: OutputType) => {\n    // Todo : Implement changer here in future.\n  }\n\n  return (\n    <div className={(props.className || '' ) + ' Output'}>\n      <label> {props.output} </label>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n          {\n            (props.output === OutputType.CURL) && (\n              <Curl\n                config={props.config}\n                data={props.data}\n                updateConfig={props.updateConfig}\n                updateData={props.updateData} />\n            )\n          }\n        </div>\n      </div>\n      <div className=\"row\">\n      <div className=\"twelve columns\">\n        <Selector\n          className=\"u-full-width\"\n          selected={props.output}\n          onUpdate={updateType} />\n      </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Output;\n","/**\n * @file Checkbox component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport Input from './Input';\nimport {InputTypes} from '../../enums';\n\ninterface CheckboxProps {\n  className?: string;\n  isDisabled?: boolean;\n  label?: string;\n  isCheckedLabel?: string;\n  isNotCheckedLabel?: string;\n  name?: string;\n  id?: string;\n  isChecked: boolean;\n  onChange: (value: boolean) => void;\n  value?: string;\n}\n\nconst Checkbox: React.FunctionComponent<CheckboxProps> = (props) => {\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    props.onChange(e.target.checked)\n  }\n\n  const label = props.isChecked\n    ? props.isCheckedLabel || props.label\n    : props.isNotCheckedLabel || props.label\n\n  return (\n    <div className={props.className || ''}>\n      <Input\n        type={InputTypes.CHECKBOX}\n        isChecked={props.isChecked}\n        isDisabled={props.isDisabled || false}\n        name={props.name || ''}\n        id={props.id || ''}\n        onChange={onChange}\n        value={props.value || ''} />\n      <span> {label} </span>\n    </div>\n  )\n};\n\nexport default Checkbox;\n","/**\n * @file Proxy component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport Checkbox from '../../../shared/Checkbox';\nimport Toggler from '../../../shared/Toggler';\nimport Input from '../../../shared/Input';\nimport Notice from '../../../shared/Notice';\nimport {InputTypes} from '../../../../enums';\n\nimport './css/Proxy.css'\n\nimport * as utils from '../../../../utils';\n\nexport interface ProxyData {\n  url: string,\n  isEnabled: boolean\n}\n\ninterface ProxyProps {\n  isExpanded: boolean;\n  proxy: ProxyData;\n  onUpdateProxy: (data: ProxyData) => void;\n}\n\ninterface ProxyState {\n  showProxySettings: boolean;\n}\n\nexport default class Proxy extends React.PureComponent<ProxyProps, ProxyState> {\n\n  constructor(props: ProxyProps) {\n    super(props);\n    this.state = {\n      showProxySettings: props.isExpanded,\n    };\n  }\n\n  toggleProxySettings = () => {\n    this.setState(prevState => ({\n      showProxySettings: !prevState.showProxySettings,\n    }));\n  }\n\n  onUpdateProxyUrl = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.props.onUpdateProxy({\n      url: e.target.value,\n      isEnabled: this.props.proxy.isEnabled,\n    })\n  }\n\n  onUpdateProxyEnabled = (isEnabled: boolean) => {\n    this.props.onUpdateProxy({\n      url: this.props.proxy.url,\n      isEnabled\n    })\n  }\n\n  render() {\n\n    return (\n      <Toggler\n        isToggled={this.state.showProxySettings}\n        className=\"Proxy\"\n        label=\"Proxy Settings\"\n        onToggle={this.toggleProxySettings}>\n        <div className=\"row\">\n          <Notice\n            className=\"twelve columns u-full-width\"\n            heading=\"Proxy Overview\">\n            Requests are proxied through a copy of cors-anywhere <br />\n            This is hosted on: <a href={utils.PROXY}>{utils.PROXY}</a> <br />\n            You can find the code for this at <a href=\"https://github.com/Mattamorphic/curlify/tree/proxy\">GitHub</a> <br />\n            If you'd like to use your own proxy, simply replace the URL <br />\n            This should follow cors-anywhere entry design <br />\n            This proxy forwards request, gets around the cors issue, and allows us to return headers <br />\n            No data is recorded in the proxy\n          </Notice>\n        </div>\n        <div className=\"row\">\n          <Input\n            className=\"six columns u-full-width\"\n            isDisabled={!this.props.proxy.isEnabled}\n            type={InputTypes.URL}\n            onChange={this.onUpdateProxyUrl}\n            placeholder=\"Proxy Url\"\n            value={this.props.proxy.url} />\n          <Checkbox\n            className=\"checkbox six columns u-full-width\"\n            isChecked={this.props.proxy.isEnabled}\n            isCheckedLabel=\"Proxy is enabled\"\n            isNotCheckedLabel=\"Proxy is not enabled\"\n            onChange={this.onUpdateProxyEnabled}\n            value=\"proxy\" />\n        </div>\n      </Toggler>\n    );\n  }\n}\n","/**\n * @file $COMPONENT component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport Button from './Button';\n\nimport './css/Confirm.css';\n\ninterface ConfirmProps {\n  className?: string;\n  label: string;\n  message: string;\n  onConfirm: () => void;\n  onCancel: () => void;\n  isPrimary?: boolean;\n}\n\nconst Confirm: React.FunctionComponent<ConfirmProps> = (props) => {\n\n  const onConfirm = () => {\n    const result = window.confirm(props.message);\n    result ? props.onConfirm() : props.onCancel();\n  }\n\n  return (\n    <Button\n      className={props.className || ''}\n      isPrimary={props.isPrimary || false}\n      label={props.label}\n      onClick={onConfirm} />\n  )\n};\n\nexport default Confirm;\n","import React from 'react';\n\nimport Proxy, {ProxyData} from './proxy/Proxy';\n\nimport './css/Request.css';\n\nimport Button from '../../shared/Button';\nimport Confirm from '../../shared/Confirm';\n\n\ninterface RequestProps {\n  shouldConfirm: boolean;\n  incompleteData?: string;\n  hasRun: boolean;\n  proxy: ProxyData;\n  onRequest: () => void;\n  onUpdateProxy: (data: ProxyData) => void;\n}\n\nconst Request: React.FunctionComponent<RequestProps> = (props) => {\n  const onConfirm = props.onRequest;\n  const onCancel = () => {};\n\n\n  return (\n    <div className=\"row\">\n      <div className=\"Request\">\n        <Proxy\n          isExpanded={!props.hasRun}\n          proxy={props.proxy}\n          onUpdateProxy={props.onUpdateProxy} />\n        {\n          props.shouldConfirm\n            ? <Confirm\n                className=\"u-full-width\"\n                label=\"Test\"\n                onConfirm={onConfirm}\n                onCancel={onCancel}\n                message=\"Are you sure?\" />\n            :  <Button\n                className=\"u-full-width\"\n                isPrimary={false}\n                label=\"Test\"\n                onClick={props.onRequest} />\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default Request;\n","/**\n * @file Table component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport './css/Table.css';\n\nexport interface TableRow {\n  [key: string]: string | JSX.Element;\n}\n\ninterface TableProps {\n  className?: string\n  data: TableRow[]\n}\n\nconst Table: React.FunctionComponent<TableProps> = (props) => {\n  if (props.data.length === 0) {\n    return <table className={props.className || ''} />\n  }\n\n  const headers = Object.keys(props.data[0])\n\n  return (\n    <table className={props.className || ''}>\n      <thead>\n        {\n          headers.map(\n            (header: string, i: number) => (\n              <th key={`header_${i}`}>{header}</th>\n            )\n          )\n        }\n      </thead>\n      <tbody>\n      {\n\n        props.data.map(\n          (row: TableRow, i: number) => (\n            <tr key={`tr_${i}`}>\n              {\n                headers.map(\n                  (header: string, j: number) => (\n                    <td key={`tr_${i}_${j}`} data-label={header}>\n                      {row[header]}\n                    </td>\n                  )\n                )\n              }\n            </tr>\n          )\n        )\n      }\n      </tbody>\n    </table>\n  );\n};\n\nexport default Table;\n","/**\n * @file ResponseHeaders component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport Table from '../../../shared/Table';\nimport Toggler from '../../../shared/Toggler';\n\nimport './css/ResponseHeaders.css';\n\nimport * as utils from '../../../../utils';\n\ninterface ResponseHeadersProps {\n  headers: Headers;\n}\n\ninterface ResponseHeadersState {\n  showHeaders: boolean\n}\n\nexport default class ResponseHeaders extends React.PureComponent<\n  ResponseHeadersProps,\n  ResponseHeadersState> {\n  constructor(props: ResponseHeadersProps) {\n    super(props);\n    this.state = {\n      showHeaders: false,\n    };\n  }\n\n  parse = (value: string): string | JSX.Element => {\n\n    if (utils.isStringANumber(value)) {\n      return (<span className='header-value header-number'>{value}</span>);\n    }\n    if (utils.isStringADate(value)) {\n      return (<span className='header-value header-date'>{value}</span>);\n    }\n    if (utils.isStringAURL(value)) {\n      return (\n        <span className='header-value header-url'>\n          <a href={value}>{value}</a>\n        </span>\n      );\n    }\n    if (utils.isStringBooleanOrNull(value)) {\n      return (<span className='header-value header-boolean'>{value}</span>);\n    }\n    return <span className='header-value header-string'>{value}</span>;\n  }\n\n  toggleHeaders = () => {\n    this.setState(prevState => ({\n      showHeaders: !prevState.showHeaders\n    }));\n  }\n\n  render() {\n\n    return (\n      <Toggler\n        isToggled={this.state.showHeaders}\n        className=\"ResponseHeaders\"\n        label=\"Headers\"\n        onToggle={this.toggleHeaders}>\n        <Table\n          className=\"u-max-full-width ResponseHeadersTable\"\n          data={\n            Array.from(this.props.headers.keys()).map(\n              key => ({\n                Header: this.parse(key),\n                Value: this.parse(this.props.headers.get(key) || ''),\n              })\n            )\n          } />\n      </Toggler>\n    );\n  }\n}\n","/**\n * @file ResponseJson component\n * @author Mattamorphic\n */\nimport React from 'react';\nimport ReactDOMServer from 'react-dom/server';\n\nimport Toggler from '../../../shared/Toggler';\n\nimport './css/ResponseJson.css'\n\nimport * as utils from '../../../../utils';\n\nimport {JsonValueTypes} from '../../../../enums';\n\ninterface ResponseJsonProps {\n  data: {[key: string]: any}\n}\n\ninterface ResponseJsonState {\n  showJson: boolean;\n}\n\nexport default class ResponseJson extends React.PureComponent<\n  ResponseJsonProps,\n  ResponseJsonState> {\n\n  constructor(props: ResponseJsonProps) {\n    super(props);\n    this.state = {\n      showJson: false,\n    };\n  }\n\n  toggleJson = () => {\n    this.setState(prevState => ({\n      showJson: !prevState.showJson,\n    }));\n  }\n\n  replacer = (_: string, p1: string, p2: string, p3: string, p4: string) => {\n    const part = { indent: p1, key: p2, value: p3, end: p4 };\n\n    let valueClass = \"json-value\";\n    let type = JsonValueTypes.STRING;\n    if (part.value !== undefined && part.value !== null) {\n      if (utils.isStringANumber(part.value)) {\n        valueClass = \"json-number\";\n        type = JsonValueTypes.NUMBER;\n      } else if (utils.isStringADate(part.value)) {\n        valueClass = \"json-date\";\n        type = JsonValueTypes.DATE;\n      } else if (utils.isStringBooleanOrNull(part.value)) {\n        valueClass = \"json-boolean\";\n        type = JsonValueTypes.BOOLEAN;\n      } else if (utils.isStringAURL(part.value)) {\n        valueClass = \"json-url\";\n        type = JsonValueTypes.URL;\n      } else {\n        valueClass = \"json-string\";\n        type = JsonValueTypes.STRING;\n      }\n    }\n    return ReactDOMServer.renderToString(\n      <>\n        {\"\\u00a0\".repeat(part.indent.length)}\n        {part.key && <span className=\"json-key\"> {part.key} </span>}\n        {\n          part.value\n          &&\n            <span className={valueClass}>\n              {\n                type === JsonValueTypes.URL\n                  ? (\n                    <a href={part.value.replace(utils.regEx.quotes, '')}>\n                      {part.value}\n                    </a>\n                  )\n                  : part.value\n              }\n            </span>\n        }\n        {part.end && <span className=\"json-key\"> {part.end} </span>}\n        <br />\n      </>\n    );\n  }\n\n  render() {\n    return (\n      <Toggler\n        isToggled={this.state.showJson}\n        label=\"Data\"\n        onToggle={this.toggleJson}>\n        <div\n          className=\"ResponseJson\"\n          dangerouslySetInnerHTML={{__html:\n            JSON.stringify(this.props.data, null, 3)\n              .replace(\n                utils.regEx.jsonData,\n                this.replacer,\n              )\n          }} />\n      </Toggler>\n    );\n  }\n\n}\n","/**\n * @file ResponseRaw component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport Toggler from '../../../shared/Toggler';\n\nimport './css/ResponseRaw.css';\n\ninterface ResponseRawProps {\n  data: string;\n}\n\ninterface ResponseRawState {\n  showRaw: boolean;\n}\n\nexport default class ResponseRaw extends React.PureComponent<\n  ResponseRawProps,\n  ResponseRawState> {\n\n  constructor(props: ResponseRawProps) {\n    super(props);\n    this.state = {\n      showRaw: false,\n    };\n  }\n\n  toggleRaw = () => {\n    this.setState(prevState => ({\n      showRaw: !prevState.showRaw,\n    }));\n  }\n\n  render() {\n    return (\n      <Toggler\n        isToggled={this.state.showRaw}\n        label=\"Raw\"\n        onToggle={this.toggleRaw}>\n          <div className=\"ResponseRaw\">\n            {this.props.data}\n          </div>\n      </Toggler>\n    );\n  }\n\n}\n","import React from 'react';\n\nimport ResponseHeaders from './responseheaders/ResponseHeaders';\nimport ResponseJson from './responsejson/ResponseJson';\nimport ResponseRaw from './responseraw/ResponseRaw';\n\nimport './css/FetchResponse.css';\n\ninterface FetchResponseProps {\n  headers: Headers,\n  data: string;\n}\n\nconst FetchResponse: React.FunctionComponent<FetchResponseProps> = (props) => {\n  let json = {}\n  try {\n    json = JSON.parse(props.data)\n  } catch (_) {}\n\n  return (\n    <div className=\"FetchResponse\">\n      <ResponseHeaders headers={props.headers} />\n      <ResponseRaw data={props.data} />\n      <ResponseJson data={json} />\n    </div>\n  );\n}\n\nexport default FetchResponse;\n","import React from 'react';\n\nimport './css/Loading.css';\n\ninterface LoadingProps {\n  className?: string;\n}\n\nconst Loading: React.FunctionComponent<LoadingProps> = (props) => {\n  return (\n    <div className={(props.className || '') + \" LoadingContainer\"}>\n      <div className=\"Loading\">\n        <div />\n      </div>\n      <div>\n        Loading\n      </div>\n    </div>\n  );\n}\n\nexport default Loading;\n","import React from 'react';\n\nimport Request from './request/Request';\nimport FetchResponse from './fetchresponse/FetchResponse';\nimport Loading from '../shared/Loading';\nimport Notice from '../shared/Notice';\n\nimport './css/Test.css';\n\nimport {ConfigData} from '../config/Config';\nimport {DataData} from '../data/Data';\nimport {ProxyData} from './request/proxy/Proxy';\n\nimport * as utils from '../../utils';\n\nexport interface ValidatePayloadResult {\n  message: string[];\n  success: boolean;\n}\n\ninterface TestProps {\n  config: ConfigData;\n  data: DataData;\n  proxy: ProxyData;\n  updateConfig: (data: ConfigData) => void;\n  updateData: (data: DataData) => void;\n  updateProxy: (data: ProxyData) => void;\n  validation: ValidatePayloadResult;\n}\n\ninterface TestState {\n  isLoading: boolean;\n  hasRun: boolean;\n  response: {\n    headers?: Headers,\n    data?: string,\n    destination?: URL,\n  };\n}\n\nclass Test extends React.PureComponent<TestProps, TestState> {\n\n  baseState: TestState;\n\n  constructor(props: TestProps) {\n    super(props);\n    this.state = {\n      // is the request executing\n      isLoading: false,\n      // has there been an execution\n      hasRun: false,\n      // hold the response\n      response: {},\n    };\n    this.baseState = this.state;\n  }\n\n  componentDidUpdate(prevProps: TestProps) {\n    if (utils.hasProxyChanged(prevProps.proxy, this.props.proxy)) {\n      this.setState(this.baseState);\n    }\n  }\n\n\n  getDestination = (): string => {\n    const destination = this.props.config.domain + this.props.config.endpoint;\n    return this.props.proxy.isEnabled\n      ? this.props.proxy.url + destination\n      : destination;\n  }\n\n  getFetchData = () => {\n    const fetchData: RequestInit = {\n      method: this.props.config.method,\n      body: null,\n      headers: new Headers(\n        this.props.config.headers.map(header => [header.type, header.value]),\n      ),\n    };\n\n    if (utils.methodHasPayload(this.props.config.method)) {\n      fetchData.body = JSON.stringify(this.props.data.data[this.props.data.type]);\n    }\n    return fetchData;\n  }\n\n  onTest = async () => {\n    this.setState(\n      {\n        isLoading: true,\n        hasRun: true,\n        response: {}\n      },\n      async () => {\n      // Todo: Run our own proxy service instead of using this.\n      const dest = new URL(this.getDestination());\n      let data = null;\n      let response: Response | null = null;\n      try {\n        response = await fetch(\n          dest.href,\n          this.getFetchData(),\n        );\n        data = await response.text();\n        this.setState({\n          isLoading: false,\n          response: {\n            destination: dest,\n            headers: response.headers as Headers,\n            data,\n          }\n        });\n      } catch (_) {\n        this.setState({\n          isLoading: false,\n        });\n      }\n    });\n  }\n\n  render () {\n    if (!this.props.validation.success) {\n      return (\n        <div className=\"row\">\n          <div className=\"Test Disabled\">\n            {\n              this.props.validation.message.map(\n                (string, idx) => (\n                  <label key={`validation_${idx}`}> {string} </label>\n                ),\n              )\n            }\n          </div>\n        </div>\n      )\n    }\n    if (this.state.isLoading) {\n      return (\n        <div className=\"row\">\n          <Loading />\n        </div>\n      );\n    }\n\n    const proxyMessage = `${\n      this.props.proxy.isEnabled\n        ? 'through Proxy'\n        : ''\n      } to ${this.state.response.destination || this.getDestination()}`;\n\n    return (\n      <>\n        <Request\n          hasRun={this.state.hasRun}\n          proxy={this.props.proxy}\n          onUpdateProxy={this.props.updateProxy}\n          shouldConfirm={false} // Todo: We need to ensure that everything matches up\n          onRequest={this.onTest} />\n        {\n          this.state.hasRun && (\n            this.state.response.headers && this.state.response.data\n              ? (\n                <>\n                  <div className=\"row\">\n                    <Notice\n                      className=\"twelve columns u-full-width\"\n                      heading=\"Request complete\">\n                      Request sent {proxyMessage}\n                    </Notice>\n                  </div>\n                  <div className=\"row\">\n                    <FetchResponse\n                      headers={this.state.response.headers}\n                      data={this.state.response.data} />\n                  </div>\n                </>)\n              : (\n                <div className=\"row\">\n                  <Notice\n                    className=\"twelve columns u-full-width\"\n                    heading=\"Request Failed\">\n                    Request couldn't be sent {proxyMessage}\n                  </Notice>\n                </div>\n              )\n          )\n        }\n      </>\n    );\n  };\n}\n\nexport default Test;\n","import React from 'react';\nimport Config, {ConfigData} from './components/config/Config';\nimport Data, {DataData} from './components/data/Data';\nimport Heading from './components/heading/Heading';\nimport Output from './components/output/Output';\nimport {ProxyData} from './components/test/request/proxy/Proxy';\nimport Test, {ValidatePayloadResult} from './components/test/Test';\n\nimport './css/App.css'\n\nimport * as utils from './utils';\n\nimport {\n  DataType,\n  HTTPMethods,\n  OutputType,\n} from './enums';\n\ninterface OutputState {\n  type: OutputType;\n}\n\ninterface AppState {\n  config: ConfigData;\n  data: DataData;\n  output: OutputState;\n  proxy: ProxyData;\n  validation: ValidatePayloadResult;\n}\n\ninterface AppProps {}\n\nexport default class App extends React.Component<AppProps, AppState> {\n\n  onConfigChange = (config: ConfigData): void => {\n    this.setState({\n      config: {\n        method: config.method,\n        headers: config.headers,\n        domain: config.domain,\n        endpoint: config.endpoint,\n      }\n    }, () => this.setState({validation: this.validatePayload()}));\n  }\n\n  onDataChange = (data: DataData): void => {\n    this.setState({\n      data,\n    }, () => this.setState({validation: this.validatePayload()}));\n  }\n\n  onUpdateProxy = (proxy: ProxyData): void => {\n    this.setState({\n      proxy,\n    });\n  }\n\n  constructor(props: AppProps) {\n    super(props);\n    this.state = {\n      config: {\n        method: HTTPMethods.GET,\n        headers: [],\n        domain: 'https://api.github.com',\n        endpoint: '/users/octocat',\n      },\n      data: {\n        type: DataType.JSON,\n        data: {\n          json: {test: \"value\"},\n          graphQL: {query: \"query {viewer {username}}\"},\n          form: null,\n        },\n      },\n      output: {\n        type: OutputType.CURL,\n      },\n      proxy: {\n        url: utils.PROXY,\n        isEnabled: true,\n      },\n      validation: {\n        message: [],\n        success: true,\n      }\n    }\n  }\n\n  validatePayload = (): ValidatePayloadResult => {\n    const result = {\n      message: [] as string[],\n      success: true,\n    };\n    if (!utils.isValidMethod(this.state.config.method)) {\n      result.message.push(\n        `Invalid ${this.state.config.method}, check settings above`,\n      );\n      result.success = false;\n    }\n    if (!utils.isValidHeaders(this.state.config.headers)) {\n      result.message.push(\n        `Invalid headers, check settings above`,\n      );\n      result.success = false;\n    }\n    if (!utils.isValidURL(\n      this.state.config.domain,\n      this.state.config.endpoint,\n    )) {\n      result.message.push(\n        `Invalid URL ${this.state.config.domain} or ${this.state.config.endpoint}, check settings above`,\n      );\n      result.success = false;\n    }\n\n    if (\n      this.state.data.type === DataType.GQL\n      && !utils.isValidGraphQLString(this.state.data.data.graphQL.query)) {\n        result.message.push(\n          `Invalid GraphQL string, check settings above`,\n        );\n        result.success = false;\n    }\n    return result;\n  }\n\n\n\n  render () {\n    const showData = utils.methodHasPayload(this.state.config.method);\n    return (\n      <div className='container App'>\n        <div className=\"row\">\n          <Heading imageSrc={process.env.PUBLIC_URL + '/images/banner.png'} />\n        </div>\n        <div className=\"row\">\n          <Config\n            data={this.state.config}\n            updateConfig={this.onConfigChange} />\n        </div>\n        <div className=\"row\">\n          <div className={(showData ? 'six' : 'twelve') + ' columns'}>\n            <Output\n              className=\"u-full-width\"\n              config={this.state.config}\n              data={this.state.data}\n              output={this.state.output.type}\n              updateConfig={this.onConfigChange}\n              updateData={this.onDataChange} />\n          </div>\n            {\n              showData && (\n              <div className=\"six columns\">\n                <Data\n                  className=\"u-full-width\"\n                  data={this.state.data}\n                  updateData={this.onDataChange} />\n              </div>)\n            }\n        </div>\n        <div className=\"row\">\n          <Test\n            validation={this.state.validation}\n            config={this.state.config}\n            data={this.state.data}\n            proxy={this.state.proxy}\n            updateConfig={this.onConfigChange}\n            updateData={this.onDataChange}\n            updateProxy={this.onUpdateProxy} />\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}