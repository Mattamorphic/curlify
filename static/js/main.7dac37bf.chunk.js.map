{"version":3,"sources":["serviceWorker.ts","enums/index.tsx","utils/index.ts","components/data/graphql/GraphQL.tsx","components/heading/Heading.tsx","components/shared/Button.tsx","components/shared/Copy.tsx","components/shared/Saving.tsx","components/shared/TextArea.tsx","components/output/curl/Curl.tsx","components/shared/Select.tsx","components/output/selector/Selector.tsx","components/output/Output.tsx","components/shared/Input.tsx","components/config/destination/domain/Domain.tsx","components/config/destination/endpoint/Endpoint.tsx","components/config/destination/Destination.tsx","components/config/method/Method.tsx","components/shared/Notice.tsx","components/shared/Toggler.tsx","components/config/headers/type/Types.tsx","components/config/headers/value/Value.tsx","components/config/headers/Headers.tsx","components/config/Config.tsx","components/data/graphql/type/Type.tsx","components/data/json/Json.tsx","components/data/selector/Selector.tsx","components/data/Data.tsx","components/history/clearhistory/ClearHistory.tsx","components/history/listhistory/listhistoryentry/loadhistoryentry/LoadHistoryEntry.tsx","components/history/listhistory/listhistoryentry/ListHistoryEntry.tsx","components/history/listhistory/ListHistory.tsx","components/history/History.tsx","components/shared/Table.tsx","components/test/fetchresponse/responseheaders/ResponseHeaders.tsx","components/test/fetchresponse/responsejson/ResponseJson.tsx","components/test/fetchresponse/responseraw/ResponseRaw.tsx","components/test/fetchresponse/FetchResponse.tsx","components/shared/Loading.tsx","components/shared/Confirm.tsx","components/shared/Checkbox.tsx","components/test/request/proxy/Proxy.tsx","components/test/request/Request.tsx","components/test/Test.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","HTTPMethods","HTTPHeaders","DataType","OutputType","InputTypes","ColumnCount","JsonValueTypes","GraphQLType","methodHasPayload","method","GET","HEAD","includes","PROXY","regEx","curlData","curlHeader","curlMethod","dateTimeZoneChars","jsonData","multipleSpaces","newLine","newLineAndTab","quotes","singleEscapedNewLine","url","isValidMethod","string","Object","values","isValidURL","domain","endpoint","charAt","length","possUrl","isValidHeaders","headers","types","reduce","_","curr","type","isValidGraphQLString","gql","parse","isStringANumber","value","isNaN","parseInt","isStringADate","Date","replace","isStringBooleanOrNull","toLowerCase","isStringAURL","isStorageAvailable","storage","x","setItem","removeItem","e","addToHistory","config","data","localStorage","keys","i","key","push","removeKey","sort","shift","id","getTime","toString","item","JSON","stringify","getHistory","requestHistory","getItem","a","b","a_id","b_id","Heading","props","react_default","createElement","className","alt","src","imageSrc","Button","isPrimary","disabled","isDisabled","onClick","onClickRaw","preventDefault","clickValue","children","label","Copy","copy","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","navigator","clipboard","writeText","content","stop","apply","this","arguments","shared_Button","react_fontawesome_index_es","icon","faCopy","size","Saving","react_transition_group","transitionEnter","transitionEnterTimeout","transitionLeave","transitionName","isSaved","faSave","TextArea","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onUpdate","onChangeDirect","target","state","isFullWidth","onChange","style","React","Component","Curl","serializerCurl","hasNewConfig","hasNewData","getMethod","getHeaders","newData","getData","domainAndEndpoint","getDomainAndEndpoint","GQL","graphQL","query","json","FORM","updateCurl","curl","setState","hasDraft","updateData","updateConfig","draft","getValue","regex","utils","exec","shared_Saving","shared_Copy","TextArea_TextArea","background","concat","process","backgroundAttachment","backgroundColor","backgroundRepeat","color","payload","map","header","join","parsePayloadString","Select","selected","Fragment","multiple","isMultiple","name","Selector","shared_Select","Output","output","CURL","Curl_Curl","selector_Selector","Input","checked","isChecked","TEXT","Domain","shared_Input","URL","Endpoint","Destination","width","domain_Domain","endpoint_Endpoint","Method","Notice","heading","Toggler","onToggle","isToggled","Types","index","Value","Headers","updateType","updateValue","addHeader","removeHeader","currentTarget","split","pop","undefined","filter","faMinus","type_Types","toConsumableArray","value_Value","faPlus","Config","updateMethod","updateHeaders","updateDestination","toggleConfigSettings","prevState","showConfigSettings","destination","shared_Toggler","headers_Headers","TWELVE","method_Method","TWO","destination_Destination","TEN","shared_Notice","href","PureComponent","Type","GraphQL","updateGraphQL","getDocAndTypeFromGQLString","onUpdateData","pretty","PrettyMe","type_Type","faMagic","doc","definitions","operation","print","newProps","Json","updateJson","object","Data","Json_Json","GraphQL_GraphQL","data_selector_Selector","ClearHistory","clear","faTrash","LoadHistoryEntry","faUpload","ListHistoryEntry","loadhistoryentry_LoadHistoryEntry","ListHistory","history","historyEntry","listhistoryentry_ListHistoryEntry","History","loadHistory","toggleHistory","showHistory","faHistory","listhistory_ListHistory","clearhistory_ClearHistory","clearHistory","Table","row","j","data-label","ResponseHeaders","toggleHeaders","showHeaders","_this2","shared_Table","Array","from","Header","get","ResponseJson","toggleJson","showJson","replacer","p1","p2","p3","p4","part","end","indent","valueClass","STRING","NUMBER","DATE","BOOLEAN","ReactDOMServer","renderToString","repeat","dangerouslySetInnerHTML","__html","ResponseRaw","toggleRaw","showRaw","FetchResponse","ResponseHeaders_ResponseHeaders","ResponseRaw_ResponseRaw","ResponseJson_ResponseJson","Loading","Confirm","confirm","message","onConfirm","onCancel","Checkbox","isCheckedLabel","isNotCheckedLabel","CHECKBOX","Proxy","toggleProxySettings","showProxySettings","onUpdateProxyUrl","onUpdateProxy","isEnabled","proxy","onUpdateProxyEnabled","isExpanded","placeholder","shared_Checkbox","Request","onRequest","Proxy_Proxy","hasRun","shouldConfirm","shared_Confirm","Test","baseState","getDestination","getFetchData","fetchData","body","onTest","_callee2","_context2","isLoading","response","dest","fetch","sent","text","t0","prevProps","prevProxy","newProxy","validation","success","idx","shared_Loading","proxyMessage","request_Request","updateProxy","fetchresponse_FetchResponse","App","onConfigChange","validatePayload","onDataChange","onProxyChange","result","form","test","showData","heading_Heading","Config_Config","output_Output","data_Data","History_History","test_Test","ReactDOM","render","App_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7dac37bf.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export enum HTTPMethods {\n  DELETE = 'DELETE',\n  GET = 'GET',\n  HEAD = 'HEAD',\n  PATCH = 'PATCH',\n  POST = 'POST',\n  PUT = 'PUT'\n}\n\nexport enum HTTPHeaders {\n  'A-IM' = 'A-IM',\n  Accept = 'Accept',\n  'Accept-Charset' = 'Accept-Charset',\n  'Accept-Datetime' = 'Accept-Datetime',\n  'Accept-Encoding' = 'Accept-Encoding',\n  'Accept-Language' = 'Accept-Language',\n  'Access-Control-Request-Method' = 'Access-Control-Request-Method',\n  'Access-Control-Request-Headers' = 'Access-Control-Request-Headers',\n  Authorization = 'Authorization',\n  Authentication = 'Authentication',\n  'Cache-Control' = 'Cache-Control',\n  'Content-Length' = 'Content-Length',\n  'Content-MD5' = 'Content-MD5',\n  'Content-Type' = 'Content-Type',\n  Cookie = 'Cookie',\n  Date = 'Date',\n  Expect = 'Expect',\n  Forwarded = 'Forwarded',\n  From = 'From',\n  Host = 'Host',\n  'HTTP2-Settings' = 'HTTP2-Settings',\n  'If-Match' = 'If-Match',\n  'If-Modified-Since' = 'If-Modified-Since',\n  'If-None-Match' = 'If-None-Match',\n  'If-Range' = 'If-Range',\n  'If-Unmodified-Since' = 'If-Unmodified-Since',\n  'Max-Forwards' = 'Max-Forwards',\n  Pragma = 'Pragma',\n  'Proxy-Authorization' = 'Proxy-Authorization',\n  Range = 'Range',\n  Referer = 'Referer',\n  TE = 'TE',\n  Upgrade = 'Upgrade',\n  'User-Agent' = 'User-Agent',\n  Via = 'Via',\n  Warning = 'Warning'\n}\n\nexport enum DataType {\n  FORM = 'form',\n  JSON = 'json',\n  GQL = 'graphQL'\n}\n\nexport enum OutputType {\n  CURL = 'curl'\n}\n\nexport enum InputTypes {\n  BUTTON = 'button',\n  CHECKBOX = 'checkbox',\n  COLOR = 'color',\n  DATE = 'date',\n  DATETIME_LOCAL = 'datetime-local',\n  EMAIL = 'email',\n  FILE = 'file',\n  HIDDEN = 'hidden',\n  IMAGE = 'image',\n  MONTH = 'month',\n  NUMBER = 'number',\n  PASSWORD = 'password',\n  RADIO = 'radio',\n  RANGE = 'range',\n  RESET = 'reset',\n  SEARCH = 'search',\n  SUBMIT = 'submit',\n  TEL = 'tel',\n  TEXT = 'text',\n  TIME = 'time',\n  URL = 'url',\n  WEEK = 'week'\n}\n\nexport enum ColumnCount {\n  ONE = 'one column',\n  TWO = 'two columns',\n  THREE = 'three columns',\n  FOUR = 'four columns',\n  FIVE = 'five columns',\n  SIX = 'six columns',\n  SEVEN = 'seven columns',\n  EIGHT = 'eight columns',\n  NINE = 'nine columns',\n  TEN = 'ten columns',\n  ELEVEN = 'eleven columns',\n  TWELVE = 'twelve columns'\n}\n\nexport enum JsonValueTypes {\n  NUMBER = 'number',\n  DATE = 'date',\n  BOOLEAN = 'boolean',\n  URL = 'url',\n  STRING = 'string'\n}\n","import { ConfigData } from '../components/config/Config';\nimport { DataData } from '../components/data/Data';\nimport { Header } from '../components/config/headers/Headers';\nimport { HistoryEntry } from '../components/history/History';\nimport { parse } from 'graphql';\nimport { ProxyData } from '../components/test/request/proxy/Proxy';\n\nimport { HTTPHeaders, HTTPMethods } from '../enums';\n\nexport const methodHasPayload = (method: HTTPMethods) =>\n  ![HTTPMethods.GET, HTTPMethods.HEAD].includes(method);\n\nexport const PROXY = 'https://curlify-proxy.herokuapp.com/';\n\nexport const regEx = {\n  // Todo: convert to /gms https://github.com/babel/babel/pull/10347\n  curlData: /(?:-d\\s{0,}'|\")({.*})(?=['|\"])/gim,\n  curlHeader: /(?:-H \")([\\w\\d]{1,})(?:\\s{0,}:\\s{0,})(.+?)(?=\")/gim,\n  curlMethod: /(?:-X\\s{0,})(\\w{3,6})/gim,\n  dateTimeZoneChars: /[T|Z]/gim,\n  jsonData: /^( *)(\"[^\"]+\": )?(\"[^\"].*\"|[\\w.+-]*)?([{}[\\],]*)?$/gm,\n  multipleSpaces: / +/gm,\n  newLine: /[\\r|\\n]/gm,\n  newLineAndTab: /[\\n|\\r|\\t]/gm,\n  quotes: /[\"']/gim,\n  singleEscapedNewLine: /(?<!\\\\)\\\\n/gm,\n  url: /^((?:http(?:s)?:\\/\\/)?[\\w.-]+(?:.[\\w.-]+))+([\\w-._~:/?#[\\]@!$&'()*+,;=.]+)$/gim\n};\n\n// export const hasDataChanged = (\n//   prevData: DataData,\n//   newData: DataData\n// ): boolean => {\n//   return false;\n// }\n//\n// export const hasConfigChanged = (\n//   prevData: DataData,\n//   newData: DataData\n// ): boolean => {\n//   return false;\n// }\n\nexport const hasProxyChanged = (\n  prevProxy: ProxyData,\n  newProxy: ProxyData\n): boolean => {\n  return (\n    prevProxy.isEnabled !== newProxy.isEnabled || prevProxy.url !== newProxy.url\n  );\n};\n\nexport const isValidMethod = (string: string): boolean =>\n  Object.values(HTTPMethods).includes(string);\n\nexport const isValidURL = (domain: string, endpoint: string): boolean => {\n  const url =\n    domain +\n    (domain.charAt(domain.length - 1) !== '/' && endpoint.charAt(0) !== '/'\n      ? '/'\n      : '') +\n    endpoint;\n\n  const possUrl = url.match(regEx.url);\n  return !possUrl || possUrl[0] !== url ? false : true;\n};\n\nexport const isValidHeaders = (headers: Header[]): boolean => {\n  const types = Object.values(HTTPHeaders);\n  return headers.reduce((_: boolean, curr: Header) => {\n    return types.includes(curr.type); // TODO: validate the value\n  }, true);\n};\n\nexport const isValidJsonString = (json: string) => {\n  try {\n    JSON.parse(json);\n    return true;\n  } catch (_) {\n    return false;\n  }\n};\n\nexport const isValidGraphQLString = (gql: string) => {\n  try {\n    parse(gql);\n    return true;\n  } catch (_) {\n    return false;\n  }\n};\n\nexport const isStringANumber = (value: string): boolean => {\n  return !isNaN(parseInt(value));\n};\n\nexport const isStringADate = (value: string): boolean => {\n  return !isNaN(Date.parse(value.replace(regEx.dateTimeZoneChars, ' ')));\n};\n\nexport const isStringBooleanOrNull = (value: string): boolean => {\n  const permitted = ['true', 'false', 'null', 'nil', 'undefined'];\n  return permitted.includes(value.toLowerCase());\n};\n\nexport const isStringAURL = (value: string): boolean => {\n  return !!value.replace(regEx.quotes, '').match(regEx.url);\n};\n\nexport const isStorageAvailable = (): boolean => {\n  let storage;\n  try {\n    storage = window['localStorage'];\n    var x = '__storage_test__';\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\nexport const addToHistory = (config: ConfigData, data: DataData): string => {\n  const storage = window.localStorage;\n\n  if (storage.length + 1 === 20) {\n    let keys = [];\n    for (let i = 0; i < storage.length; i++) {\n      const key = storage.key(i);\n      if (key) {\n        keys.push(key);\n      }\n    }\n    const removeKey = keys.sort().shift();\n    if (removeKey) {\n      storage.removeItem(removeKey);\n    }\n  }\n  const id = new Date().getTime().toString();\n  const item = JSON.stringify({\n    config,\n    data,\n    id\n  });\n  storage.setItem(id, item);\n  return id;\n};\n\nexport const getHistory = () => {\n  if (!isStorageAvailable()) {\n    return [];\n  }\n  const requestHistory = [] as HistoryEntry[];\n  const storage = window.localStorage;\n  for (let i = 0; i < storage.length; i++) {\n    const key = storage.key(i);\n    if (!key) {\n      break;\n    }\n    const data = storage.getItem(key);\n    if (!data) {\n      break;\n    }\n    try {\n      requestHistory.push(JSON.parse(data));\n    } catch (_) {\n      storage.removeItem(key);\n    }\n  }\n  return requestHistory.sort((a, b) => {\n    const a_id = parseInt(a.id);\n    const b_id = parseInt(b.id);\n    return a_id > b_id ? -1 : a_id < b_id ? 1 : 0;\n  });\n};\n","import './css/GraphQL.css';\n\nimport Button from '../../shared/Button';\nimport Copy from '../../shared/Copy';\nimport { faMagic } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { gqlPayloadType } from '../Data';\nimport React from 'react';\nimport Saving from '../../shared/Saving';\nimport TextArea from '../../shared/TextArea';\nimport Type from './type/Type';\n\nimport { OperationDefinitionNode, parse, print } from 'graphql';\n\nexport enum GraphQLType {\n  QUERY = 'query',\n  MUTATION = 'mutation'\n}\n\ninterface ParsedGQL {\n  gql: string;\n  type: GraphQLType;\n}\n\ninterface GraphQLProps {\n  data: gqlPayloadType;\n  onUpdateData: (value: gqlPayloadType) => void;\n}\n\ninterface GraphQLState {\n  draft: string;\n  isSaved: boolean;\n  type: GraphQLType;\n}\n\nexport default class GraphQL extends React.PureComponent<\n  GraphQLProps,\n  GraphQLState\n> {\n  constructor(props: GraphQLProps) {\n    super(props);\n    const gql = GraphQL.getDocAndTypeFromGQLString(props.data.query);\n    this.state = {\n      draft: gql.gql,\n      isSaved: true,\n      type: gql.type\n    };\n  }\n\n  static getDocAndTypeFromGQLString(gql: string): ParsedGQL {\n    const doc = parse(gql);\n    const def: OperationDefinitionNode = doc\n      .definitions[0] as OperationDefinitionNode;\n    const type = def.operation as GraphQLType;\n    return {\n      gql: print(doc),\n      type\n    };\n  }\n\n  static getDerivedStateFromProps(\n    newProps: GraphQLProps,\n    state: GraphQLState\n  ): GraphQLState {\n    if (newProps.data.query !== state.draft && !state.isSaved) {\n      return state;\n    }\n    try {\n      const gql = GraphQL.getDocAndTypeFromGQLString(newProps.data.query);\n      return {\n        draft: newProps.data.query,\n        isSaved: true,\n        type: gql.type\n      };\n    } catch (e) {\n      return state;\n    }\n  }\n\n  updateGraphQL = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const draft = e.target.value;\n    try {\n      const gql = GraphQL.getDocAndTypeFromGQLString(draft);\n      if (gql.gql !== this.state.draft) {\n        this.props.onUpdateData(\n          // replace any existing operation with an empty string\n          { query: draft }\n        );\n        this.setState({ isSaved: true });\n      } else {\n        this.setState({\n          draft,\n          isSaved: false\n        });\n      }\n    } catch (_) {\n      this.setState({\n        draft,\n        isSaved: false\n      });\n    }\n  };\n\n  updateType = (type: GraphQLType): void => {\n    this.props.onUpdateData({\n      query: type + ' ' + this.state.draft.replace(this.state.type, '')\n    });\n  };\n\n  pretty = () => {\n    this.props.onUpdateData({\n      query:\n        this.state.type +\n        ' ' +\n        GraphQL.PrettyMe(this.state.draft).replace(this.state.type, '')\n    });\n  };\n\n  static PrettyMe(gql: string): string {\n    try {\n      return print(parse(gql));\n    } catch (_) {\n      // Todo: print errors\n      return gql;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"GraphQL\">\n        <div className=\"row\">\n          <div className=\"two columns\">\n            <Saving isSaved={this.state.isSaved} />\n          </div>\n          <div className=\"two columns\">\n            <Type\n              className=\"u-full-width\"\n              onUpdate={this.updateType}\n              selected={this.state.type}\n            />\n          </div>\n          <div className=\"two columns\">\n            <Button\n              className=\"u-full-width\"\n              isDisabled={!this.state.isSaved}\n              isPrimary={false}\n              onClick={this.pretty}\n            >\n              <FontAwesomeIcon icon={faMagic} size=\"lg\" />\n            </Button>\n          </div>\n          <div className=\"two columns\">\n            <Copy\n              className=\"u-pull-right\"\n              content={GraphQL.PrettyMe(this.state.draft)}\n            />\n          </div>\n        </div>\n        <div className=\"row\">\n          <TextArea\n            isFullWidth={true}\n            onChangeDirect={this.updateGraphQL}\n            style={{\n              background: `url('${process.env.PUBLIC_URL}/images/textarea.png')`,\n              backgroundAttachment: 'local',\n              backgroundColor: '#19404A',\n              backgroundRepeat: 'no-repeat',\n              color: '#EEE8D5'\n            }}\n            value={this.state.draft}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import './css/Heading.css';\n\nimport React from 'react';\n\ninterface HeadingProps {\n  imageSrc: string;\n}\n\nconst Heading: React.FunctionComponent<HeadingProps> = props => {\n  return (\n    <div className=\"Heading\">\n      <img alt=\"curlify logo\" src={props.imageSrc} />\n    </div>\n  );\n};\n\nexport default Heading;\n","import React from 'react';\n\ninterface ButtonProps {\n  className?: string;\n  id?: string;\n  isDisabled?: boolean;\n  isPrimary: boolean;\n  label?: string;\n  onClick: (val: any) => void;\n  onClickRaw?: (e: React.MouseEvent<HTMLElement>) => void;\n  clickValue?: any;\n}\n\nconst Button: React.FunctionComponent<ButtonProps> = props => {\n  const clickHandler = (e: React.MouseEvent) => {\n    e.preventDefault();\n    props.onClick(props.clickValue);\n  };\n\n  return (\n    <button\n      className={\n        (props.isPrimary ? 'button-primary ' : ' ') + props.className || ' '\n      }\n      disabled={props.isDisabled}\n      id={props.id}\n      onClick={props.onClickRaw || clickHandler}\n    >\n      {props.children || props.label || ''}\n    </button>\n  );\n};\n\nexport default Button;\n","import Button from './Button';\nimport { faCopy } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\n\ninterface CopyProps {\n  className?: string;\n  label?: string;\n  content: string;\n}\n\nconst Copy: React.FunctionComponent<CopyProps> = props => {\n  const copy = async () => {\n    await navigator.clipboard.writeText(props.content);\n  };\n\n  return (\n    <Button className={props.className || ''} isPrimary={false} onClick={copy}>\n      <FontAwesomeIcon icon={faCopy} size=\"lg\" />\n    </Button>\n  );\n};\n\nexport default Copy;\n","import './css/Saving.css';\n\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport { faSave } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\n\ninterface SavingProps {\n  className?: string;\n  isSaved: boolean;\n}\n\nconst Saving: React.FunctionComponent<SavingProps> = props => {\n  return (\n    <CSSTransitionGroup\n      transitionEnter={true}\n      transitionEnterTimeout={500}\n      transitionLeave={false}\n      transitionName=\"save-notice\"\n    >\n      <div\n        key={'notice-' + props.isSaved}\n        className={\n          (props.isSaved ? 'Saved' : 'NotSaved') +\n          ' SavingNotice ' +\n          (props.className || '')\n        }\n      >\n        <FontAwesomeIcon icon={faSave} size=\"lg\" />\n      </div>\n    </CSSTransitionGroup>\n  );\n};\n\nexport default Saving;\n","import React from 'react';\n\ninterface TextAreaProps {\n  className?: string;\n  isFullWidth: boolean;\n  onChangeDirect?: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  onUpdate?: (value: string) => void;\n  style?: {\n    [key: string]: string;\n  };\n  value: string;\n}\n\ninterface TextAreaState {}\n\nexport default class TextArea extends React.Component<\n  TextAreaProps,\n  TextAreaState\n> {\n  constructor(props: TextAreaProps) {\n    super(props);\n    this.state = {};\n  }\n\n  onUpdate = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    if (this.props.onChangeDirect) {\n      this.props.onChangeDirect(e);\n    } else if (this.props.onUpdate) {\n      this.props.onUpdate(e.target.value);\n    }\n  };\n\n  render() {\n    return (\n      <textarea\n        className={\n          (this.props.isFullWidth ? 'u-full-width ' : ' ') +\n            this.props.className || ''\n        }\n        onChange={this.onUpdate}\n        style={this.props.style || {}}\n        value={this.props.value}\n      ></textarea>\n    );\n  }\n}\n","/**\n * @file Curl component\n * @author Mattamorphic\n */\nimport './css/Curl.css';\n\nimport * as utils from '../../../utils';\n\nimport { ConfigData } from '../../config/Config';\nimport Copy from '../../shared/Copy';\nimport { Header } from '../../config/headers/Headers';\nimport React from 'react';\nimport Saving from '../../shared/Saving';\nimport TextArea from '../../shared/TextArea';\n\nimport { DataData, payloadType } from '../../data/Data';\nimport { DataType, HTTPHeaders, HTTPMethods } from '../../../enums';\n\ninterface DomainAndEndpoint {\n  domain: string | null;\n  endpoint: string | null;\n}\n\ninterface SerializedCurl {\n  config: ConfigData;\n  data: DataData;\n  hasNewConfig: boolean;\n  hasNewData: boolean;\n}\n\ninterface CurlProps {\n  config: ConfigData;\n  data: DataData;\n  updateConfig: (data: ConfigData) => void;\n  updateData: (data: DataData) => void;\n}\n\ninterface CurlState {\n  draft: string;\n  hasDraft: boolean;\n}\n\nexport default class Curl extends React.Component<CurlProps, CurlState> {\n  constructor(props: CurlProps) {\n    super(props);\n    this.state = {\n      draft: Curl.getValue(props.config, props.data),\n      hasDraft: false\n    };\n  }\n\n  /**\n   * @function Get the headers from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {Header[] | null}\n   */\n  getHeaders(value: string): Header[] | null {\n    const regex = utils.regEx.curlHeader;\n    const headers = [];\n    let match = null;\n    while ((match = regex.exec(value))) {\n      headers.push({\n        type: match[1] as HTTPHeaders,\n        value: match[2] as string\n      });\n    }\n    if (headers.length === 0) {\n      return null;\n    }\n    return headers;\n  }\n\n  /**\n   * @function Get the method from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {HTTPMethods | null}\n   */\n  getMethod(value: string): HTTPMethods | null {\n    const regex = utils.regEx.curlMethod;\n    if (!value.match(regex)) {\n      return null;\n    }\n    const match = regex.exec(value);\n    if (!match) {\n      return null;\n    }\n    return match[1] as HTTPMethods;\n  }\n\n  /**\n   * @function Get the data from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {payloadType | null}\n   */\n  getData(value: string): payloadType | null {\n    const regex = utils.regEx.curlData;\n    if (!value.match(regex)) {\n      return null;\n    }\n    const match = regex.exec(value);\n    if (!match) {\n      return null;\n    }\n    try {\n      return JSON.parse(match[1]);\n    } catch (_) {\n      return null;\n    }\n  }\n\n  /**\n   * @function Get the domain and endpoint from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {DomainAndEndpoint | null}\n   */\n  getDomainAndEndpoint(value: string): DomainAndEndpoint | null {\n    const regex = utils.regEx.url;\n    if (!value.match(regex)) {\n      return null;\n    }\n    const match = regex.exec(value);\n    if (!match) {\n      return null;\n    }\n    return {\n      domain: match[1] || null,\n      endpoint: match[2] || null\n    };\n  }\n\n  /**\n   * @function Serialize a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {SerializedCurl}\n   */\n  serializerCurl = (value: string): SerializedCurl => {\n    // Get the current values\n    const config = this.props.config;\n    const data = this.props.data;\n\n    let hasNewConfig = false;\n    let hasNewData = false;\n\n    // decide which method to use\n    const method = this.getMethod(value);\n\n    // decide which headers to use\n    const headers = this.getHeaders(value);\n\n    // decide which data to use\n    const newData = this.getData(value);\n\n    // decide which domain and endpoint to use\n    const domainAndEndpoint = this.getDomainAndEndpoint(value);\n\n    if (\n      method &&\n      method !== config.method &&\n      Object.values(HTTPMethods).includes(method)\n    ) {\n      hasNewConfig = true;\n      config.method = method;\n    }\n\n    // Todo - this needs to actually check the header\n    if (headers) {\n      hasNewConfig = true;\n      config.headers = headers;\n    }\n    if (\n      newData &&\n      JSON.stringify(newData) !== JSON.stringify(data.data[data.type])\n    ) {\n      hasNewData = true;\n      switch (data.type) {\n        case DataType.GQL:\n          data.data.graphQL.query = newData.query;\n          break;\n        case DataType.JSON:\n          data.data.json = newData;\n          break;\n        case DataType.FORM:\n          break;\n      }\n    }\n    if (domainAndEndpoint) {\n      if (\n        domainAndEndpoint.domain &&\n        domainAndEndpoint.domain !== config.domain\n      ) {\n        hasNewConfig = true;\n        config.domain = domainAndEndpoint.domain;\n      }\n      if (\n        domainAndEndpoint.endpoint &&\n        domainAndEndpoint.endpoint !== config.endpoint\n      ) {\n        hasNewConfig = true;\n        config.endpoint = domainAndEndpoint.endpoint;\n      }\n    }\n\n    return {\n      config,\n      data,\n      hasNewConfig,\n      hasNewData\n    };\n  };\n\n  /**\n   * @function Update the data from the curl string\n   *\n   * @param {string} value The curl string\n   */\n  updateCurl = (value: string): void => {\n    const curl = this.serializerCurl(value);\n    if (curl.hasNewData || curl.hasNewConfig) {\n      // set draft to null, we'll update with the new props\n      this.setState({ hasDraft: false }, () => {\n        curl.hasNewData && this.props.updateData(curl.data);\n        curl.hasNewConfig && this.props.updateConfig(curl.config);\n      });\n    }\n    // set the draft to true, let's use this\n    if (!curl.hasNewData && !curl.hasNewConfig) {\n      this.setState({ draft: value, hasDraft: true });\n    }\n  };\n\n  /**\n   * @function Pass the config and data into a curl string\n   *\n   * @params {ConfigData} config The Configuration data for the curl request\n   * @params {DataData}   data   The data for the curl request\n   */\n  static getValue(config: ConfigData, data: DataData): string {\n    let payload = {};\n    switch (data.type) {\n      case DataType.JSON:\n        payload = data.data.json;\n        break;\n      case DataType.GQL:\n        payload = data.data.graphQL;\n        break;\n      case DataType.FORM:\n        break;\n    }\n\n    return (\n      `curl -X ${config.method} \\\\${'\\n'}` +\n      `${config.headers\n        .map(header => `-H \"${header.type}: ${header.value}\" \\\\${'\\n'}`)\n        .join('')}` +\n      `${\n        payload &&\n        Object.keys(payload).length > 0 &&\n        utils.methodHasPayload(config.method)\n          ? `-d '${Curl.parsePayloadString(JSON.stringify(payload))}' \\\\${'\\n'}`\n          : ''\n      }` +\n      `${config.domain + config.endpoint}`\n    );\n  }\n\n  /**\n   * @function Parse a string remove new line / tab and remove multiple spaces\n   *\n   * @param {string} value\n   */\n  static parsePayloadString(value: string): string {\n    return value\n      .replace(utils.regEx.newLineAndTab, '')\n      .replace(utils.regEx.multipleSpaces, ' ')\n      .replace(utils.regEx.singleEscapedNewLine, '');\n  }\n\n  render() {\n    const draft = this.state.hasDraft\n      ? this.state.draft\n      : Curl.getValue(this.props.config, this.props.data);\n    return (\n      <div className=\"Curl\">\n        <div className=\"row\">\n          <div className=\"two columns\">\n            <Saving className=\"u-full-width\" isSaved={!this.state.hasDraft} />\n          </div>\n          <div className=\"six columns\">\n            <div className=\"u-full-width\" />\n          </div>\n          <div className=\"four columns\">\n            <Copy className=\"u-full-width\" content={draft} />\n          </div>\n        </div>\n        <div className=\"row\">\n          <TextArea\n            isFullWidth={true}\n            onUpdate={this.updateCurl}\n            style={{\n              background: `url('${process.env.PUBLIC_URL}/images/textarea.png')`,\n              backgroundAttachment: 'local',\n              backgroundColor: '#19404A',\n              backgroundRepeat: 'no-repeat',\n              color: '#EEE8D5'\n            }}\n            value={draft}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\ninterface selectProps {\n  className?: string;\n  isDisabled?: boolean;\n  label?: string;\n  name?: string;\n  onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n  selected?: string | string[] | null;\n  style?: { [key: string]: string };\n  values: string[];\n  isMultiple?: boolean;\n  size?: number;\n}\n\nconst Select: React.FunctionComponent<selectProps> = props => {\n  const selected = props.selected || '';\n  return (\n    <>\n      {props.label && <label>{props.label}</label>}\n      <select\n        className={props.className || ''}\n        disabled={props.isDisabled || false}\n        multiple={props.isMultiple || false}\n        name={props.name || ''}\n        onChange={props.onChange || null}\n        size={props.size || 0}\n        style={props.style || {}}\n        value={selected}\n      >\n        <option value=\"\" disabled>\n          Please Select\n        </option>\n        {props.values.map((value: string, i: number) => (\n          <option key={`${value}_${i}`} value={value}>\n            {value}\n          </option>\n        ))}\n      </select>\n    </>\n  );\n};\n\nexport default Select;\n","import './css/Selector.css';\n\nimport { OutputType } from '../../../enums';\nimport React from 'react';\nimport Select from '../../shared/Select';\n\ninterface SelectorProps {\n  className?: string;\n  selected: OutputType;\n  onUpdate: (value: OutputType) => void;\n}\n\nconst Selector: React.FunctionComponent<SelectorProps> = props => {\n  const updateSelected = (e: React.ChangeEvent<HTMLSelectElement>): void => {\n    const value: OutputType = e.target.value as OutputType;\n    props.onUpdate(value);\n  };\n\n  return (\n    <Select\n      className={(props.className || '') + ' Selector'}\n      onChange={updateSelected}\n      selected={props.selected}\n      values={Object.values(OutputType)}\n    />\n  );\n};\n\nexport default Selector;\n","import './css/Output.css';\n\nimport { ConfigData } from '../config/Config';\nimport Curl from './curl/Curl';\nimport { DataData } from '../data/Data';\nimport { OutputType } from '../../enums';\nimport React from 'react';\nimport Selector from './selector/Selector';\n\ninterface OutputProps {\n  className?: string;\n  config: ConfigData;\n  data: DataData;\n  output: OutputType;\n  updateConfig: (data: ConfigData) => void;\n  updateData: (data: DataData) => void;\n}\n\nconst Output: React.FunctionComponent<OutputProps> = props => {\n  const updateType = (_: OutputType) => {\n    // Todo : Implement changer here in future.\n  };\n\n  return (\n    <div className={(props.className || '') + ' Output'}>\n      <label> {props.output} </label>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n          {props.output === OutputType.CURL && (\n            <Curl\n              config={props.config}\n              data={props.data}\n              updateConfig={props.updateConfig}\n              updateData={props.updateData}\n            />\n          )}\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n          <Selector\n            className=\"u-full-width\"\n            onUpdate={updateType}\n            selected={props.output}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Output;\n","import { InputTypes } from '../../enums';\nimport React from 'react';\n\n// Define Interfaces\ninterface InputProps {\n  className?: string;\n  isChecked?: boolean;\n  isDisabled?: boolean;\n  label?: string;\n  name?: string;\n  id?: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  placeholder?: string;\n  type?: InputTypes;\n  value?: string;\n}\n\n// Input Component\nconst Input: React.FunctionComponent<InputProps> = props => (\n  <>\n    {props.label && <label>{props.label}</label>}\n    <input\n      checked={props.isChecked}\n      className={props.className || ''}\n      disabled={props.isDisabled}\n      id={props.id || ''}\n      name={props.name || ''}\n      onChange={props.onChange}\n      type={props.type || InputTypes.TEXT}\n      value={props.value || ''}\n    />\n  </>\n);\n\nexport default Input;\n","import './css/Domain.css';\n\nimport Input from '../../../shared/Input';\nimport { InputTypes } from '../../../../enums';\nimport React from 'react';\n\ninterface DomainProps {\n  isFullWidth: boolean;\n  value: string;\n  onUpdate: (value: string) => void;\n}\n\nconst Domain: React.FunctionComponent<DomainProps> = props => {\n  const updateValue = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    props.onUpdate(e.target.value);\n  };\n\n  return (\n    <Input\n      className={(props.isFullWidth ? 'u-full-width' : '') + ' Domain'}\n      onChange={updateValue}\n      type={InputTypes.URL}\n      value={props.value}\n    />\n  );\n};\n\nexport default Domain;\n","import './css/Endpoint.css';\n\nimport Input from '../../../shared/Input';\nimport React from 'react';\n\ninterface EndpointProps {\n  isFullWidth: boolean;\n  value: string;\n  onUpdate: (value: string) => void;\n}\n\nconst Endpoint: React.FunctionComponent<EndpointProps> = props => {\n  const updateValue = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    props.onUpdate(e.target.value);\n  };\n  return (\n    <Input\n      className={(props.isFullWidth ? 'u-full-width' : '') + ' Endpoint'}\n      onChange={updateValue}\n      value={props.value}\n    />\n  );\n};\n\nexport default Endpoint;\n","import './css/Destination.css';\n\nimport { ColumnCount } from '../../../enums';\nimport Domain from './domain/Domain';\nimport Endpoint from './endpoint/Endpoint';\nimport React from 'react';\n\ntype DomainOrEndpoint = 'domain' | 'endpoint';\n\ninterface DestinationProps {\n  onUpdate: (domain: string, endpoint: string) => void;\n  domain: string;\n  endpoint: string;\n  width: ColumnCount;\n}\n\nconst Destination: React.FunctionComponent<DestinationProps> = props => {\n  const onUpdate = (value: string, type: DomainOrEndpoint): void => {\n    props.onUpdate(\n      type === 'domain' ? value : props.domain,\n      type === 'endpoint' ? value : props.endpoint\n    );\n  };\n\n  const onUpdateEndpoint = (endpoint: string): void => {\n    onUpdate(endpoint, 'endpoint');\n  };\n\n  const onUpdateDomain = (domain: string): void => {\n    onUpdate(domain, 'domain');\n  };\n\n  return (\n    <div className={props.width + ' Destination'}>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n          <label> Destination </label>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"six columns\">\n          <Domain\n            isFullWidth={true}\n            onUpdate={onUpdateDomain}\n            value={props.domain}\n          />\n        </div>\n        <div className=\"six columns\">\n          <Endpoint\n            isFullWidth={true}\n            onUpdate={onUpdateEndpoint}\n            value={props.endpoint}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Destination;\n","import './css/Method.css';\n\nimport React from 'react';\nimport Select from '../../shared/Select';\n\nimport { ColumnCount, HTTPMethods } from '../../../enums/';\n\ninterface methodProps {\n  onUpdate: (value: HTTPMethods) => void;\n  selected: HTTPMethods;\n  width: ColumnCount;\n}\n\nconst Method: React.FunctionComponent<methodProps> = props => {\n  const updateSelected = (e: React.ChangeEvent<HTMLSelectElement>): void => {\n    const value: HTTPMethods = e.target.value as HTTPMethods;\n    props.onUpdate(value);\n  };\n\n  return (\n    <div className={props.width}>\n      <Select\n        className=\"u-full-width Method\"\n        label=\"HTTP Method\"\n        onChange={updateSelected}\n        selected={props.selected}\n        values={Object.values(HTTPMethods)}\n      />\n    </div>\n  );\n};\n\nexport default Method;\n","/**\n * @file Notice component\n * @author Mattamorphic\n */\nimport './css/Notice.css';\n\nimport React from 'react';\n\ninterface NoticeProps {\n  className?: string;\n  heading: string;\n}\n\nconst Notice: React.FunctionComponent<NoticeProps> = props => {\n  return (\n    <div className={(props.className || '') + ' Notice'}>\n      <h4> {props.heading} </h4>\n      <>{props.children}</>\n    </div>\n  );\n};\n\nexport default Notice;\n","import Button from './Button';\nimport React from 'react';\n\ninterface TogglerProps {\n  className?: string;\n  label: string | JSX.Element;\n  onToggle: () => void;\n  isToggled: boolean;\n}\n\nconst Toggler: React.FunctionComponent<TogglerProps> = props => {\n  return (\n    <div>\n      <div className=\"row\">\n        <Button\n          className=\"u-full-width\"\n          isPrimary={false}\n          onClick={props.onToggle}\n        >\n          {typeof props.label === 'string'\n            ? (!props.isToggled ? 'Show ' : 'Hide ') + props.label\n            : props.label}\n        </Button>\n      </div>\n      {props.isToggled && (\n        <div className={props.className || ''}>\n          <div className=\"row\">{props.children}</div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Toggler;\n","import './css/Types.css';\n\nimport { HTTPHeaders } from '../../../../enums';\nimport React from 'react';\nimport Select from '../../../shared/Select';\n\ninterface TypeProps {\n  index: number;\n  isFullWidth: boolean;\n  values: (HTTPHeaders | string)[];\n  selected: HTTPHeaders | string;\n  onUpdate: (value: HTTPHeaders, index: number) => void;\n}\n\nconst Types: React.FunctionComponent<TypeProps> = props => {\n  const updateSelected = (e: React.ChangeEvent<HTMLSelectElement>): void => {\n    const value: HTTPHeaders = e.target.value as HTTPHeaders;\n    props.onUpdate(value, props.index);\n  };\n\n  return (\n    <Select\n      className={(props.isFullWidth ? 'u-full-width' : '') + ' Types'}\n      onChange={updateSelected}\n      selected={props.selected}\n      values={props.values}\n    />\n  );\n};\n\nexport default Types;\n","import './css/Value.css';\n\nimport Input from '../../../shared/Input';\nimport React from 'react';\n\ninterface ValueProps {\n  index: number;\n  isFullWidth: boolean;\n  value: string;\n  onUpdate: (value: string, index: number) => void;\n}\n\nconst Value: React.FunctionComponent<ValueProps> = props => {\n  const updateValue = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    props.onUpdate(e.target.value, props.index);\n  };\n\n  return (\n    <Input\n      className={(props.isFullWidth ? 'u-full-width' : '') + ' Value'}\n      onChange={updateValue}\n      value={props.value}\n    />\n  );\n};\n\nexport default Value;\n","import './css/Headers.css';\n\nimport Button from '../../shared/Button';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport Types from './type/Types';\nimport Value from './value/Value';\n\nimport { ColumnCount, HTTPHeaders } from '../../../enums';\nimport { faMinus, faPlus } from '@fortawesome/free-solid-svg-icons';\n\nexport interface Header {\n  type: HTTPHeaders | string;\n  value: string;\n}\n\ninterface HeadersProps {\n  onUpdate: (value: Header | null, index: number) => void;\n  selected: Header[];\n  width: ColumnCount;\n}\n\nconst Headers: React.FunctionComponent<HeadersProps> = props => {\n  const updateType = (type: HTTPHeaders, index: number): void => {\n    const header = props.selected[index];\n    header.type = type;\n    props.onUpdate(header, index);\n  };\n\n  const updateValue = (value: string, index: number): void => {\n    const header = props.selected[index];\n    header.value = value;\n    props.onUpdate(header, index);\n  };\n\n  const addHeader = (e: React.MouseEvent<HTMLElement>): void => {\n    e.preventDefault();\n    // create a pending header, add this to the end of the index\n    props.onUpdate(\n      {\n        type: '',\n        value: ''\n      },\n      props.selected.length\n    );\n  };\n\n  const removeHeader = (e: React.MouseEvent<HTMLElement>): void => {\n    e.preventDefault();\n    const index = e.currentTarget.id.split('_').pop();\n\n    if (index === undefined) {\n      // oh no...\n      return;\n    }\n    props.onUpdate(null, parseInt(index));\n  };\n\n  // Don't allow duplicate headers.\n  const selected = props.selected.map(header => header.type);\n  const values = Object.values(HTTPHeaders).filter(\n    header => !selected.includes(header)\n  );\n\n  return (\n    <div className={props.width + ' Headers'}>\n      <div className=\"row\">\n        <div className=\"twelve rows\">\n          <label> HTTP Headers </label>\n        </div>\n      </div>\n\n      {props.selected.map((header: Header, index: number) => (\n        <div key={`${header.type}_${index}`} className=\"row\">\n          {\n            // TODO: selected and values aren't behaving below\n          }\n          <div className=\"two columns\">\n            <Button\n              className=\"u-full-width\"\n              id={`remove_${index}`}\n              isPrimary={false}\n              onClick={() => {}}\n              onClickRaw={removeHeader}\n            >\n              <FontAwesomeIcon icon={faMinus} size=\"lg\" />\n            </Button>\n          </div>\n          <div className=\"four columns\">\n            <Types\n              index={index}\n              isFullWidth={true}\n              onUpdate={updateType}\n              selected={header.type}\n              values={[...values, header.type]}\n            />\n          </div>\n          <div className=\"four columns\">\n            <Value\n              index={index}\n              isFullWidth={true}\n              onUpdate={updateValue}\n              value={header.value || ''}\n            />\n          </div>\n          <div className=\"two columns\">\n            <Button\n              className=\"u-full-width\"\n              isPrimary={false}\n              onClick={() => {}}\n              onClickRaw={addHeader}\n            >\n              <FontAwesomeIcon icon={faPlus} size=\"lg\" />\n            </Button>\n          </div>\n        </div>\n      ))}\n      {props.selected.length === 0 && (\n        <div className=\"row\">\n          <Button\n            className=\"u-full-width\"\n            isPrimary={false}\n            onClick={() => {}}\n            onClickRaw={addHeader}\n          >\n            <FontAwesomeIcon icon={faPlus} size=\"lg\" />\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Headers;\n","import Destination from './destination/Destination';\nimport Method from './method/Method';\nimport Notice from '../shared/Notice';\nimport React from 'react';\nimport Toggler from '../shared/Toggler';\n\nimport { ColumnCount, HTTPMethods } from '../../enums';\nimport Headers, { Header } from './headers/Headers';\n\nexport interface ConfigData {\n  method: HTTPMethods;\n  headers: Header[];\n  domain: string;\n  endpoint: string;\n}\n\ninterface ConfigProps {\n  data: ConfigData;\n  updateConfig: (data: ConfigData) => void;\n}\n\ninterface ConfigState {\n  showConfigSettings: boolean;\n}\n\nexport default class Config extends React.PureComponent<\n  ConfigProps,\n  ConfigState\n> {\n  constructor(props: ConfigProps) {\n    super(props);\n    this.state = {\n      showConfigSettings: true\n    };\n  }\n\n  updateMethod = (value: HTTPMethods) => {\n    const data = this.props.data;\n    data.method = value;\n    this.props.updateConfig(data);\n  };\n\n  updateHeaders = (value: Header | null, index: number): void => {\n    const data = this.props.data;\n    if (!data.headers[index] && value) {\n      data.headers.push(value);\n    } else {\n      if (!value) {\n        delete data.headers[index];\n        data.headers = data.headers.filter(header => header);\n      } else {\n        data.headers[index] = value;\n      }\n    }\n    this.props.updateConfig(data);\n  };\n\n  updateDestination = (domain: string, endpoint: string) => {\n    const data = this.props.data;\n    data.domain = domain;\n    data.endpoint = endpoint;\n    this.props.updateConfig(data);\n  };\n\n  toggleConfigSettings = () => {\n    this.setState(prevState => ({\n      showConfigSettings: !prevState.showConfigSettings\n    }));\n  };\n\n  render() {\n    const destination = this.props.data.domain + this.props.data.endpoint;\n    return (\n      <>\n        <div className=\"row\">\n          <Toggler\n            className=\"Config\"\n            isToggled={this.state.showConfigSettings}\n            label=\"Config Settings\"\n            onToggle={this.toggleConfigSettings}\n          >\n            <div className=\"row\">\n              <Headers\n                onUpdate={this.updateHeaders}\n                selected={this.props.data.headers}\n                width={ColumnCount.TWELVE}\n              />\n            </div>\n            <div className=\"row\">\n              <Method\n                onUpdate={this.updateMethod}\n                selected={this.props.data.method}\n                width={ColumnCount.TWO}\n              />\n              <Destination\n                domain={this.props.data.domain}\n                endpoint={this.props.data.endpoint}\n                onUpdate={this.updateDestination}\n                width={ColumnCount.TEN}\n              />\n            </div>\n          </Toggler>\n        </div>\n        {!this.state.showConfigSettings && (\n          <Notice heading=\"Request Config Settings\">\n            Sending a [<strong>{this.props.data.method}</strong>] request to: [\n            <strong>\n              <a href={destination}>{destination}</a>\n            </strong>\n            ]\n            {this.props.data.headers.length > 0 && (\n              <>\n                , with the HTTP Headers:{' '}\n                {this.props.data.headers.map(header => (\n                  <>\n                    <br />\n                    <strong>{header.type}</strong>: <em>{header.value}</em>\n                  </>\n                ))}\n              </>\n            )}\n          </Notice>\n        )}\n      </>\n    );\n  }\n}\n","import './css/Type.css';\n\nimport { GraphQLType } from '../GraphQL';\nimport React from 'react';\nimport Select from '../../../shared/Select';\n\ninterface TypeProps {\n  className?: string;\n  selected: GraphQLType;\n  onUpdate: (type: GraphQLType) => void;\n}\n\nconst Type: React.FunctionComponent<TypeProps> = props => {\n  const updateSelected = (e: React.ChangeEvent<HTMLSelectElement>): void => {\n    const value: GraphQLType = e.target.value as GraphQLType;\n    props.onUpdate(value);\n  };\n\n  return (\n    <Select\n      className={(props.className || '') + ' Type'}\n      onChange={updateSelected}\n      selected={props.selected}\n      values={Object.values(GraphQLType)}\n    />\n  );\n};\n\nexport default Type;\n","/**\n * @file Curl component\n * @author Mattamorphic\n */\nimport './css/Json.css';\n\nimport Button from '../../shared/Button';\nimport Copy from '../../shared/Copy';\nimport { faMagic } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { payloadType } from '../Data';\nimport React from 'react';\nimport Saving from '../../shared/Saving';\nimport TextArea from '../../shared/TextArea';\n\ninterface JsonProps {\n  data: payloadType;\n  onUpdateData: (value: payloadType) => void;\n}\n\ninterface JsonState {\n  draft: string;\n  hasDraft: boolean;\n}\n\nexport default class Json extends React.PureComponent<JsonProps, JsonState> {\n  constructor(props: JsonProps) {\n    super(props);\n    this.state = {\n      draft: JSON.stringify(props.data, null, 2),\n      hasDraft: false\n    };\n  }\n\n  /**\n   * @function We have to update the state based on the props, this needs removing\n   *\n   * @param {JsonProps} newProps The new received props\n   * @param {JsonState} state    The current state\n   *\n   * @return {JsonState}\n   */\n  static getDerivedStateFromProps(\n    newProps: JsonProps,\n    state: JsonState\n  ): JsonState {\n    let draft = state.draft;\n    let hasDraft = state.hasDraft;\n    if (\n      !state.hasDraft &&\n      JSON.stringify(newProps.data) !== JSON.stringify(JSON.parse(state.draft))\n    ) {\n      draft = JSON.stringify(newProps.data, null, 2);\n      hasDraft = false;\n    } else {\n      try {\n        JSON.parse(draft);\n        hasDraft = false;\n      } catch (_) {}\n    }\n    return {\n      draft,\n      hasDraft\n    };\n  }\n\n  /**\n   * @function Update the data from the json string\n   *\n   * @param {string} value The possible json string\n   */\n  updateJson = (value: string) => {\n    this.setState({\n      draft: value,\n      hasDraft: true\n    });\n    try {\n      const object = JSON.parse(value);\n      this.props.onUpdateData(object);\n    } catch (_) {\n      // Todo: print the error\n    }\n  };\n\n  /**\n   * @function Pretty print the json in the state\n   */\n  pretty = () => {\n    try {\n      this.setState({\n        draft: JSON.stringify(JSON.parse(this.state.draft), null, 2),\n        hasDraft: true\n      });\n    } catch (_) {\n      // Todo: Print the error;\n      return;\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"Json\">\n        <div className=\"row\">\n          <div className=\"two columns\">\n            <Saving className=\"u-full-width\" isSaved={!this.state.hasDraft} />\n          </div>\n          <div className=\"four columns\">\n            <Button\n              className=\"u-full-width\"\n              isPrimary={false}\n              onClick={this.pretty}\n            >\n              <FontAwesomeIcon icon={faMagic} size=\"lg\" />\n            </Button>\n          </div>\n          <div className=\"four columns\">\n            <Copy className=\"u-full-width\" content={this.state.draft} />\n          </div>\n        </div>\n        <div className=\"row\">\n          <TextArea\n            isFullWidth={true}\n            onUpdate={this.updateJson}\n            style={{\n              background: `url('${process.env.PUBLIC_URL}/images/textarea.png')`,\n              backgroundAttachment: 'local',\n              backgroundColor: '#19404A',\n              backgroundRepeat: 'no-repeat',\n              color: '#EEE8D5'\n            }}\n            value={this.state.draft}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import './css/Selector.css';\n\nimport { DataType } from '../../../enums';\nimport React from 'react';\nimport Select from '../../shared/Select';\n\ninterface SelectorProps {\n  className?: string;\n  selected: DataType;\n  onUpdate: (value: DataType) => void;\n}\n\nconst Selector: React.FunctionComponent<SelectorProps> = props => {\n  const updateSelected = (e: React.ChangeEvent<HTMLSelectElement>): void => {\n    const value: DataType = e.target.value as DataType;\n    props.onUpdate(value);\n  };\n\n  return (\n    <Select\n      className={(props.className || '') + ' Selector'}\n      onChange={updateSelected}\n      selected={props.selected}\n      values={Object.values(DataType)}\n    />\n  );\n};\n\nexport default Selector;\n","import './css/Data.css';\n\nimport { DataType } from '../../enums';\nimport GraphQL from './graphql/GraphQL';\nimport Json from './json/Json';\nimport React from 'react';\nimport Selector from './selector/Selector';\n\nexport type payloadType = { [key: string]: any };\nexport type gqlPayloadType = { query: string };\n\nexport interface DataData {\n  type: DataType;\n  data: {\n    [DataType.JSON]: payloadType;\n    [DataType.GQL]: gqlPayloadType;\n    [DataType.FORM]: null;\n  };\n}\n\ninterface DataProps {\n  className?: string;\n  data: DataData;\n  updateData: (data: DataData) => void;\n}\n\nconst Data: React.FunctionComponent<DataProps> = props => {\n  const updateType = (value: DataType) => {\n    const data = props.data;\n    data.type = value;\n    props.updateData(data);\n  };\n\n  const updateJsonData = (value: payloadType) => {\n    const data = props.data;\n    data.data.json = value;\n    props.updateData(data);\n  };\n\n  const updateGraphQLData = (value: gqlPayloadType) => {\n    const data = props.data;\n    data.data.graphQL = value;\n    props.updateData(data);\n  };\n\n  return (\n    <div className={(props.className || '') + ' Data'}>\n      <label> Data </label>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n          {props.data.type === DataType.JSON && (\n            <Json data={props.data.data.json} onUpdateData={updateJsonData} />\n          )}\n          {props.data.type === DataType.GQL && (\n            <GraphQL\n              data={props.data.data.graphQL}\n              onUpdateData={updateGraphQLData}\n            />\n          )}\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n          <Selector\n            className=\"u-full-width\"\n            onUpdate={updateType}\n            selected={props.data.type}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default Data;\n","/**\n * @file ClearHistory component\n * @author Mattamorphic\n */\nimport Button from '../../shared/Button';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\n\ninterface ClearHistoryProps {\n  clear: () => void;\n}\n\nconst ClearHistory: React.FunctionComponent<ClearHistoryProps> = props => {\n  return (\n    <Button isPrimary={false} onClick={props.clear}>\n      <FontAwesomeIcon icon={faTrash} size=\"lg\" />\n    </Button>\n  );\n};\n\nexport default ClearHistory;\n","/**\n * @file LoadHistoryEntry component\n * @author Mattamorphic\n */\nimport './css/LoadHistoryEntry.css';\n\nimport Button from '../../../../shared/Button';\nimport { ConfigData } from '../../../../config/Config';\nimport { DataData } from '../../../../data/Data';\nimport { faUpload } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\n\ninterface LoadHistoryEntryProps {\n  className?: string;\n  config: ConfigData;\n  data: DataData;\n  updateConfig: (config: ConfigData) => void;\n  updateData: (data: DataData) => void;\n}\n\nconst LoadHistoryEntry: React.FunctionComponent<\n  LoadHistoryEntryProps\n> = props => {\n  const load = () => {\n    props.updateConfig(props.config);\n    props.updateData(props.data);\n  };\n\n  return (\n    <Button className={props.className} isPrimary={false} onClick={load}>\n      <FontAwesomeIcon icon={faUpload} size=\"lg\" />\n    </Button>\n  );\n};\n\nexport default LoadHistoryEntry;\n","/**\n * @file ListHistoryEntry component\n * @author Mattamorphic\n */\nimport './css/ListHistoryEntry.css';\n\nimport { ConfigData } from '../../../config/Config';\nimport { DataData } from '../../../data/Data';\nimport LoadHistoryEntry from './loadhistoryentry/LoadHistoryEntry';\nimport React from 'react';\n\ninterface ListHistoryEntryProps {\n  className?: string;\n  config: ConfigData;\n  data: DataData;\n  id: string;\n  updateConfig: (config: ConfigData) => void;\n  updateData: (data: DataData) => void;\n}\n\nconst ListHistoryEntry: React.FunctionComponent<\n  ListHistoryEntryProps\n> = props => {\n  const url = props.config.domain + props.config.endpoint;\n\n  return (\n    <div className={(props.className || '') + ' ListHistoryEntry'}>\n      <div className=\"row\">\n        <div className=\"two columns\">\n          <div\n            className={\n              props.config.method.toLowerCase() +\n              ' u-full-width ListHistoryEntryMethod'\n            }\n          >\n            {props.config.method}\n          </div>\n        </div>\n        <div className=\"two columns\">\n          <div\n            className={\n              props.config.method.toLowerCase() +\n              ' u-full-width ListHistoryEntryID'\n            }\n          >\n            {props.id}\n          </div>\n        </div>\n        <div className=\"six columns\">\n          <div className=\"u-full-width ListHistoryEntryDest\">\n            <a href={url}>{url}</a>\n          </div>\n        </div>\n        <div className=\"two columns ListHistoryEntryAction\">\n          <LoadHistoryEntry\n            className=\"u-full-width\"\n            config={props.config}\n            data={props.data}\n            updateConfig={props.updateConfig}\n            updateData={props.updateData}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ListHistoryEntry;\n","/**\n * @file ListHistory component\n * @author Mattamorphic\n */\nimport './css/ListHistory.css';\n\nimport { ConfigData } from '../../config/Config';\nimport { DataData } from '../../data/Data';\nimport { HistoryEntry } from '../History';\nimport ListHistoryEntry from './listhistoryentry/ListHistoryEntry';\nimport React from 'react';\n\ninterface ListHistoryProps {\n  history: HistoryEntry[];\n  updateConfig: (config: ConfigData) => void;\n  updateData: (data: DataData) => void;\n}\n\nconst ListHistory: React.FunctionComponent<ListHistoryProps> = props => {\n  return (\n    <div className=\"ListHistory\">\n      {props.history.map((historyEntry: HistoryEntry, i: number) => (\n        <ListHistoryEntry\n          className={i % 2 === 0 ? 'dark' : 'light'}\n          config={historyEntry.config}\n          data={historyEntry.data}\n          id={historyEntry.id}\n          key={historyEntry.id}\n          updateConfig={props.updateConfig}\n          updateData={props.updateData}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default ListHistory;\n","/**\n * @file History component\n * @author Mattamorphic\n */\nimport './css/History.css';\n\nimport ClearHistory from './clearhistory/ClearHistory';\nimport { ConfigData } from '../config/Config';\nimport { DataData } from '../data/Data';\nimport { faHistory } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport ListHistory from './listhistory/ListHistory';\nimport React from 'react';\nimport Toggler from '../shared/Toggler';\n\nexport interface HistoryEntry {\n  id: string;\n  config: ConfigData;\n  data: DataData;\n}\n\ninterface HistoryProps {\n  history: HistoryEntry[];\n  clearHistory: () => void;\n  updateConfig: (config: ConfigData) => void;\n  updateData: (data: DataData) => void;\n}\n\ninterface HistoryState {\n  showHistory: boolean;\n}\n\nexport default class History extends React.PureComponent<\n  HistoryProps,\n  HistoryState\n> {\n  constructor(props: HistoryProps) {\n    super(props);\n    this.state = {\n      showHistory: false\n    };\n  }\n\n  loadHistory = (id: string): boolean => {\n    const item = window.localStorage.getItem(id);\n    if (item === null) {\n      return false;\n    }\n    const payload = JSON.parse(item);\n    this.props.updateConfig(payload.config);\n    this.props.updateData(payload.data);\n    return true;\n  };\n\n  toggleHistory = (): void => {\n    this.setState(prevState => ({\n      showHistory: !prevState.showHistory\n    }));\n  };\n\n  render() {\n    return (\n      <Toggler\n        className=\"History\"\n        isToggled={this.state.showHistory}\n        label={<FontAwesomeIcon icon={faHistory} size=\"lg\" />}\n        onToggle={this.toggleHistory}\n      >\n        <h4> History</h4>\n        <ListHistory\n          history={this.props.history}\n          updateConfig={this.props.updateConfig}\n          updateData={this.props.updateData}\n        />\n        <ClearHistory clear={this.props.clearHistory} />\n      </Toggler>\n    );\n  }\n}\n","/**\n * @file Table component\n * @author Mattamorphic\n */\nimport './css/Table.css';\n\nimport React from 'react';\n\nexport interface TableRow {\n  [key: string]: string | JSX.Element;\n}\n\ninterface TableProps {\n  className?: string;\n  data: TableRow[];\n}\n\nconst Table: React.FunctionComponent<TableProps> = props => {\n  if (props.data.length === 0) {\n    return <table className={props.className || ''} />;\n  }\n\n  const headers = Object.keys(props.data[0]);\n\n  return (\n    <table className={props.className || ''}>\n      <thead>\n        {headers.map((header: string, i: number) => (\n          <th key={`header_${i}`}>{header}</th>\n        ))}\n      </thead>\n      <tbody>\n        {props.data.map((row: TableRow, i: number) => (\n          <tr key={`tr_${i}`}>\n            {headers.map((header: string, j: number) => (\n              <td key={`tr_${i}_${j}`} data-label={header}>\n                {row[header]}\n              </td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Table;\n","/**\n * @file ResponseHeaders component\n * @author Mattamorphic\n */\n\nimport './css/ResponseHeaders.css';\n\nimport * as utils from '../../../../utils';\n\nimport React from 'react';\nimport Table from '../../../shared/Table';\nimport Toggler from '../../../shared/Toggler';\n\ninterface ResponseHeadersProps {\n  headers: Headers;\n}\n\ninterface ResponseHeadersState {\n  showHeaders: boolean;\n}\n\nexport default class ResponseHeaders extends React.PureComponent<\n  ResponseHeadersProps,\n  ResponseHeadersState\n> {\n  constructor(props: ResponseHeadersProps) {\n    super(props);\n    this.state = {\n      showHeaders: false\n    };\n  }\n\n  parse = (value: string): string | JSX.Element => {\n    if (utils.isStringANumber(value)) {\n      return <span className=\"header-value header-number\">{value}</span>;\n    }\n    if (utils.isStringADate(value)) {\n      return <span className=\"header-value header-date\">{value}</span>;\n    }\n    if (utils.isStringAURL(value)) {\n      return (\n        <span className=\"header-value header-url\">\n          <a href={value}>{value}</a>\n        </span>\n      );\n    }\n    if (utils.isStringBooleanOrNull(value)) {\n      return <span className=\"header-value header-boolean\">{value}</span>;\n    }\n    return <span className=\"header-value header-string\">{value}</span>;\n  };\n\n  toggleHeaders = () => {\n    this.setState(prevState => ({\n      showHeaders: !prevState.showHeaders\n    }));\n  };\n\n  render() {\n    return (\n      <Toggler\n        className=\"ResponseHeaders\"\n        isToggled={this.state.showHeaders}\n        label=\"Headers\"\n        onToggle={this.toggleHeaders}\n      >\n        <Table\n          className=\"u-max-full-width ResponseHeadersTable\"\n          data={Array.from(this.props.headers.keys()).map(key => ({\n            Header: this.parse(key),\n            Value: this.parse(this.props.headers.get(key) || '')\n          }))}\n        />\n      </Toggler>\n    );\n  }\n}\n","/**\n * @file ResponseJson component\n * @author Mattamorphic\n */\nimport './css/ResponseJson.css';\n\nimport * as utils from '../../../../utils';\n\nimport { JsonValueTypes } from '../../../../enums';\n\nimport React from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport Toggler from '../../../shared/Toggler';\n\ninterface ResponseJsonProps {\n  data: { [key: string]: any };\n}\n\ninterface ResponseJsonState {\n  showJson: boolean;\n}\n\nexport default class ResponseJson extends React.PureComponent<\n  ResponseJsonProps,\n  ResponseJsonState\n> {\n  constructor(props: ResponseJsonProps) {\n    super(props);\n    this.state = {\n      showJson: false\n    };\n  }\n\n  toggleJson = () => {\n    this.setState(prevState => ({\n      showJson: !prevState.showJson\n    }));\n  };\n\n  replacer = (_: string, p1: string, p2: string, p3: string, p4: string) => {\n    const part = { end: p4, indent: p1, key: p2, value: p3 };\n\n    let valueClass = 'json-value';\n    let type = JsonValueTypes.STRING;\n    if (part.value !== undefined && part.value !== null) {\n      if (utils.isStringANumber(part.value)) {\n        valueClass = 'json-number';\n        type = JsonValueTypes.NUMBER;\n      } else if (utils.isStringADate(part.value)) {\n        valueClass = 'json-date';\n        type = JsonValueTypes.DATE;\n      } else if (utils.isStringBooleanOrNull(part.value)) {\n        valueClass = 'json-boolean';\n        type = JsonValueTypes.BOOLEAN;\n      } else if (utils.isStringAURL(part.value)) {\n        valueClass = 'json-url';\n        type = JsonValueTypes.URL;\n      } else {\n        valueClass = 'json-string';\n        type = JsonValueTypes.STRING;\n      }\n    }\n    return ReactDOMServer.renderToString(\n      <>\n        {'\\u00a0'.repeat(part.indent.length)}\n        {part.key && <span className=\"json-key\"> {part.key} </span>}\n        {part.value && (\n          <span className={valueClass}>\n            {type === JsonValueTypes.URL ? (\n              <a href={part.value.replace(utils.regEx.quotes, '')}>\n                {part.value}\n              </a>\n            ) : (\n              part.value\n            )}\n          </span>\n        )}\n        {part.end && <span className=\"json-key\"> {part.end} </span>}\n        <br />\n      </>\n    );\n  };\n\n  render() {\n    return (\n      <Toggler\n        isToggled={this.state.showJson}\n        label=\"Data\"\n        onToggle={this.toggleJson}\n      >\n        <div\n          className=\"ResponseJson\"\n          dangerouslySetInnerHTML={{\n            __html: JSON.stringify(this.props.data, null, 3).replace(\n              utils.regEx.jsonData,\n              this.replacer\n            )\n          }}\n        />\n      </Toggler>\n    );\n  }\n}\n","/**\n * @file ResponseRaw component\n * @author Mattamorphic\n */\nimport './css/ResponseRaw.css';\n\nimport React from 'react';\nimport Toggler from '../../../shared/Toggler';\n\ninterface ResponseRawProps {\n  data: string;\n}\n\ninterface ResponseRawState {\n  showRaw: boolean;\n}\n\nexport default class ResponseRaw extends React.PureComponent<\n  ResponseRawProps,\n  ResponseRawState\n> {\n  constructor(props: ResponseRawProps) {\n    super(props);\n    this.state = {\n      showRaw: false\n    };\n  }\n\n  toggleRaw = () => {\n    this.setState(prevState => ({\n      showRaw: !prevState.showRaw\n    }));\n  };\n\n  render() {\n    return (\n      <Toggler\n        isToggled={this.state.showRaw}\n        label=\"Raw\"\n        onToggle={this.toggleRaw}\n      >\n        <div className=\"ResponseRaw\">{this.props.data}</div>\n      </Toggler>\n    );\n  }\n}\n","import './css/FetchResponse.css';\n\nimport React from 'react';\nimport ResponseHeaders from './responseheaders/ResponseHeaders';\nimport ResponseJson from './responsejson/ResponseJson';\nimport ResponseRaw from './responseraw/ResponseRaw';\n\ninterface FetchResponseProps {\n  headers: Headers;\n  data: string;\n}\n\nconst FetchResponse: React.FunctionComponent<FetchResponseProps> = props => {\n  let json = {};\n  try {\n    json = JSON.parse(props.data);\n  } catch (_) {\n    json = {};\n  }\n\n  return (\n    <div className=\"FetchResponse\">\n      <ResponseHeaders headers={props.headers} />\n      <ResponseRaw data={props.data} />\n      <ResponseJson data={json} />\n    </div>\n  );\n};\n\nexport default FetchResponse;\n","import './css/Loading.css';\n\nimport React from 'react';\n\ninterface LoadingProps {\n  className?: string;\n}\n\nconst Loading: React.FunctionComponent<LoadingProps> = props => {\n  return (\n    <div className={(props.className || '') + ' LoadingContainer'}>\n      <div className=\"Loading\">\n        <div />\n      </div>\n      <div>Loading</div>\n    </div>\n  );\n};\n\nexport default Loading;\n","/**\n * @file $COMPONENT component\n * @author Mattamorphic\n */\nimport './css/Confirm.css';\n\nimport Button from './Button';\nimport React from 'react';\n\ninterface ConfirmProps {\n  className?: string;\n  label: string;\n  message: string;\n  onConfirm: () => void;\n  onCancel: () => void;\n  isPrimary?: boolean;\n}\n\nconst Confirm: React.FunctionComponent<ConfirmProps> = props => {\n  const onConfirm = () => {\n    const result = window.confirm(props.message);\n    result ? props.onConfirm() : props.onCancel();\n  };\n\n  return (\n    <Button\n      className={props.className || ''}\n      isPrimary={props.isPrimary || false}\n      label={props.label}\n      onClick={onConfirm}\n    />\n  );\n};\n\nexport default Confirm;\n","/**\n * @file Checkbox component\n * @author Mattamorphic\n */\nimport Input from './Input';\nimport { InputTypes } from '../../enums';\nimport React from 'react';\n\ninterface CheckboxProps {\n  className?: string;\n  isDisabled?: boolean;\n  label?: string;\n  isCheckedLabel?: string;\n  isNotCheckedLabel?: string;\n  name?: string;\n  id?: string;\n  isChecked: boolean;\n  onChange: (value: boolean) => void;\n  value?: string;\n}\n\nconst Checkbox: React.FunctionComponent<CheckboxProps> = props => {\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    props.onChange(e.target.checked);\n  };\n\n  const label = props.isChecked\n    ? props.isCheckedLabel || props.label\n    : props.isNotCheckedLabel || props.label;\n\n  return (\n    <div className={props.className || ''}>\n      <Input\n        id={props.id || ''}\n        isChecked={props.isChecked}\n        isDisabled={props.isDisabled || false}\n        name={props.name || ''}\n        onChange={onChange}\n        type={InputTypes.CHECKBOX}\n        value={props.value || ''}\n      />\n      <span> {label} </span>\n    </div>\n  );\n};\n\nexport default Checkbox;\n","/**\n * @file Proxy component\n * @author Mattamorphic\n */\n\nimport './css/Proxy.css';\n\nimport * as utils from '../../../../utils';\n\nimport Checkbox from '../../../shared/Checkbox';\nimport Input from '../../../shared/Input';\nimport { InputTypes } from '../../../../enums';\nimport Notice from '../../../shared/Notice';\nimport React from 'react';\nimport Toggler from '../../../shared/Toggler';\n\nexport interface ProxyData {\n  url: string;\n  isEnabled: boolean;\n}\n\ninterface ProxyProps {\n  isExpanded: boolean;\n  proxy: ProxyData;\n  onUpdateProxy: (data: ProxyData) => void;\n}\n\ninterface ProxyState {\n  showProxySettings: boolean;\n}\n\nexport default class Proxy extends React.PureComponent<ProxyProps, ProxyState> {\n  constructor(props: ProxyProps) {\n    super(props);\n    this.state = {\n      showProxySettings: props.isExpanded\n    };\n  }\n\n  toggleProxySettings = () => {\n    this.setState(prevState => ({\n      showProxySettings: !prevState.showProxySettings\n    }));\n  };\n\n  onUpdateProxyUrl = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.props.onUpdateProxy({\n      isEnabled: this.props.proxy.isEnabled,\n      url: e.target.value\n    });\n  };\n\n  onUpdateProxyEnabled = (isEnabled: boolean) => {\n    this.props.onUpdateProxy({\n      isEnabled,\n      url: this.props.proxy.url\n    });\n  };\n\n  render() {\n    return (\n      <Toggler\n        className=\"Proxy\"\n        isToggled={this.state.showProxySettings}\n        label=\"Proxy Settings\"\n        onToggle={this.toggleProxySettings}\n      >\n        <div className=\"row\">\n          <Notice\n            className=\"twelve columns u-full-width\"\n            heading=\"Proxy Overview\"\n          >\n            Requests are proxied through a copy of cors-anywhere <br />\n            This is hosted on: <a href={utils.PROXY}>{utils.PROXY}</a> <br />\n            You can find the code for this at{' '}\n            <a href=\"https://github.com/Mattamorphic/curlify/tree/proxy\">\n              GitHub\n            </a>{' '}\n            <br />\n            If you&apos;d like to use your own proxy, simply replace the URL{' '}\n            <br />\n            This should follow cors-anywhere entry design <br />\n            This proxy forwards request, gets around the cors issue, and allows\n            us to return headers <br />\n            No data is recorded in the proxy\n          </Notice>\n        </div>\n        <div className=\"row\">\n          <Input\n            className=\"six columns u-full-width\"\n            isDisabled={!this.props.proxy.isEnabled}\n            onChange={this.onUpdateProxyUrl}\n            placeholder=\"Proxy Url\"\n            type={InputTypes.URL}\n            value={this.props.proxy.url}\n          />\n          <Checkbox\n            className=\"checkbox six columns u-full-width\"\n            isChecked={this.props.proxy.isEnabled}\n            isCheckedLabel=\"Proxy is enabled\"\n            isNotCheckedLabel=\"Proxy is not enabled\"\n            onChange={this.onUpdateProxyEnabled}\n            value=\"proxy\"\n          />\n        </div>\n      </Toggler>\n    );\n  }\n}\n","import './css/Request.css';\n\nimport Button from '../../shared/Button';\nimport Confirm from '../../shared/Confirm';\nimport React from 'react';\n\nimport Proxy, { ProxyData } from './proxy/Proxy';\n\ninterface RequestProps {\n  shouldConfirm: boolean;\n  incompleteData?: string;\n  hasRun: boolean;\n  proxy: ProxyData;\n  onRequest: () => void;\n  onUpdateProxy: (data: ProxyData) => void;\n}\n\nconst Request: React.FunctionComponent<RequestProps> = props => {\n  const onConfirm = props.onRequest;\n  const onCancel = () => {};\n\n  return (\n    <div className=\"row\">\n      <div className=\"Request\">\n        <Proxy\n          isExpanded={!props.hasRun}\n          onUpdateProxy={props.onUpdateProxy}\n          proxy={props.proxy}\n        />\n        {props.shouldConfirm ? (\n          <Confirm\n            className=\"u-full-width\"\n            label=\"Test\"\n            message=\"Are you sure?\"\n            onCancel={onCancel}\n            onConfirm={onConfirm}\n          />\n        ) : (\n          <Button\n            className=\"u-full-width\"\n            isPrimary={false}\n            label=\"Test\"\n            onClick={props.onRequest}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Request;\n","import './css/Test.css';\n\nimport * as utils from '../../utils';\n\nimport { ConfigData } from '../config/Config';\nimport { DataData } from '../data/Data';\nimport FetchResponse from './fetchresponse/FetchResponse';\nimport Loading from '../shared/Loading';\nimport Notice from '../shared/Notice';\nimport { ProxyData } from './request/proxy/Proxy';\nimport React from 'react';\nimport Request from './request/Request';\n\nexport interface ValidatePayloadResult {\n  message: string[];\n  success: boolean;\n}\n\ninterface TestProps {\n  config: ConfigData;\n  data: DataData;\n  proxy: ProxyData;\n  addToHistory: (config: ConfigData, data: DataData) => void;\n  updateConfig: (data: ConfigData) => void;\n  updateData: (data: DataData) => void;\n  updateProxy: (data: ProxyData) => void;\n  validation: ValidatePayloadResult;\n}\n\ninterface TestState {\n  isLoading: boolean;\n  hasRun: boolean;\n  response: {\n    headers?: Headers;\n    data?: string;\n    destination?: URL;\n  };\n}\n\nclass Test extends React.PureComponent<TestProps, TestState> {\n  baseState: TestState;\n\n  constructor(props: TestProps) {\n    super(props);\n    this.state = {\n      // has there been an execution\n      hasRun: false,\n      // is the request executing\n      isLoading: false,\n      // hold the response\n      response: {}\n    };\n    this.baseState = this.state;\n  }\n\n  componentDidUpdate(prevProps: TestProps) {\n    if (utils.hasProxyChanged(prevProps.proxy, this.props.proxy)) {\n      this.setState(this.baseState);\n    }\n  }\n\n  getDestination = (): string => {\n    const destination = this.props.config.domain + this.props.config.endpoint;\n    return this.props.proxy.isEnabled\n      ? this.props.proxy.url + destination\n      : destination;\n  };\n\n  getFetchData = () => {\n    const fetchData: RequestInit = {\n      body: null,\n      headers: new Headers(\n        this.props.config.headers.map(header => [header.type, header.value])\n      ),\n      method: this.props.config.method\n    };\n\n    if (utils.methodHasPayload(this.props.config.method)) {\n      fetchData.body = JSON.stringify(\n        this.props.data.data[this.props.data.type]\n      );\n    }\n    return fetchData;\n  };\n\n  onTest = async () => {\n    // Update the local state\n    this.setState(\n      {\n        hasRun: true,\n        isLoading: true,\n        response: {}\n      },\n      async () => {\n        // Store the request in the session history\n        this.props.addToHistory(this.props.config, this.props.data);\n        // Todo: Run our own proxy service instead of using this.\n        const dest = new URL(this.getDestination());\n        let data = null;\n        let response: Response | null = null;\n        try {\n          response = await fetch(dest.href, this.getFetchData());\n          data = await response.text();\n          this.setState({\n            isLoading: false,\n            response: {\n              data,\n              destination: dest,\n              headers: response.headers as Headers\n            }\n          });\n        } catch (_) {\n          this.setState({\n            isLoading: false\n          });\n        }\n      }\n    );\n  };\n\n  render() {\n    if (!this.props.validation.success) {\n      return (\n        <div className=\"row\">\n          <div className=\"Test Disabled\">\n            {this.props.validation.message.map((string, idx) => (\n              <label key={`validation_${idx}`}> {string} </label>\n            ))}\n          </div>\n        </div>\n      );\n    }\n    if (this.state.isLoading) {\n      return (\n        <div className=\"row\">\n          <Loading />\n        </div>\n      );\n    }\n\n    const proxyMessage = `${\n      this.props.proxy.isEnabled ? 'through Proxy' : ''\n    } to ${this.state.response.destination || this.getDestination()}`;\n\n    return (\n      <>\n        <Request\n          hasRun={this.state.hasRun}\n          onRequest={this.onTest}\n          onUpdateProxy={this.props.updateProxy}\n          proxy={this.props.proxy} // Todo: We need to ensure that everything matches up\n          shouldConfirm={false}\n        />\n        {this.state.hasRun &&\n          (this.state.response.headers && this.state.response.data ? (\n            <>\n              <div className=\"row\">\n                <Notice\n                  className=\"twelve columns u-full-width\"\n                  heading=\"Request complete\"\n                >\n                  Request sent {proxyMessage}\n                </Notice>\n              </div>\n              <div className=\"row\">\n                <FetchResponse\n                  data={this.state.response.data}\n                  headers={this.state.response.headers}\n                />\n              </div>\n            </>\n          ) : (\n            <div className=\"row\">\n              <Notice\n                className=\"twelve columns u-full-width\"\n                heading=\"Request Failed\"\n              >\n                Request couldn&apos;t be sent {proxyMessage}\n              </Notice>\n            </div>\n          ))}\n      </>\n    );\n  }\n}\n\nexport default Test;\n","// 'None' imports\nimport './css/App.css';\n\n// 'All' imports\nimport * as utils from './utils';\n\n// 'Single' Imports\nimport Heading from './components/heading/Heading';\nimport Output from './components/output/Output';\nimport { ProxyData } from './components/test/request/proxy/Proxy';\nimport React from 'react';\n\n// 'Multiple' imports\nimport Config, { ConfigData } from './components/config/Config';\nimport Data, { DataData } from './components/data/Data';\nimport { DataType, HTTPMethods, OutputType } from './enums';\nimport History, { HistoryEntry } from './components/history/History';\nimport Test, { ValidatePayloadResult } from './components/test/Test';\n\ninterface OutputState {\n  type: OutputType;\n}\n\ninterface AppState {\n  config: ConfigData;\n  data: DataData;\n  history: HistoryEntry[];\n  output: OutputState;\n  proxy: ProxyData;\n  validation: ValidatePayloadResult;\n}\n\ninterface AppProps {}\n\nexport default class App extends React.Component<AppProps, AppState> {\n  isStorageAvailable = false;\n\n  constructor(props: AppProps) {\n    super(props);\n    this.state = {\n      config: {\n        domain: 'https://api.github.com',\n        endpoint: '/users/octocat',\n        headers: [],\n        method: HTTPMethods.GET\n      },\n      data: {\n        data: {\n          form: null,\n          graphQL: { query: 'query {viewer {username}}' },\n          json: { test: 'value' }\n        },\n        type: DataType.JSON\n      },\n      history: utils.getHistory(),\n      output: {\n        type: OutputType.CURL\n      },\n      proxy: {\n        isEnabled: true,\n        url: utils.PROXY\n      },\n      validation: {\n        message: [],\n        success: true\n      }\n    };\n    // Only called once, no need to add to state\n    this.isStorageAvailable = utils.isStorageAvailable();\n  }\n\n  addToHistory = (config: ConfigData, data: DataData): void => {\n    this.setState(_ => {\n      utils.addToHistory(config, data);\n      return {\n        history: utils.getHistory()\n      };\n    });\n  };\n\n  clearHistory = (): void => {\n    window.localStorage.clear();\n    this.setState({\n      history: []\n    });\n  };\n\n  onConfigChange = (config: ConfigData): void => {\n    this.setState(\n      {\n        config: {\n          domain: config.domain,\n          endpoint: config.endpoint,\n          headers: config.headers,\n          method: config.method\n        }\n      },\n      () => this.setState({ validation: this.validatePayload() })\n    );\n  };\n\n  onDataChange = (data: DataData): void => {\n    this.setState(\n      {\n        data\n      },\n      () => this.setState({ validation: this.validatePayload() })\n    );\n  };\n\n  onProxyChange = (proxy: ProxyData): void => {\n    this.setState({\n      proxy\n    });\n  };\n\n  validatePayload = (): ValidatePayloadResult => {\n    const result = {\n      message: [] as string[],\n      success: true\n    };\n    if (!utils.isValidMethod(this.state.config.method)) {\n      result.message.push(\n        `Invalid ${this.state.config.method}, check settings above`\n      );\n      result.success = false;\n    }\n    if (!utils.isValidHeaders(this.state.config.headers)) {\n      result.message.push(`Invalid headers, check settings above`);\n      result.success = false;\n    }\n    if (\n      !utils.isValidURL(this.state.config.domain, this.state.config.endpoint)\n    ) {\n      result.message.push(\n        `Invalid URL ${this.state.config.domain} or ${this.state.config.endpoint}, check settings above`\n      );\n      result.success = false;\n    }\n\n    if (\n      this.state.data.type === DataType.GQL &&\n      !utils.isValidGraphQLString(this.state.data.data.graphQL.query)\n    ) {\n      result.message.push(`Invalid GraphQL string, check settings above`);\n      result.success = false;\n    }\n    return result;\n  };\n\n  render() {\n    const showData = utils.methodHasPayload(this.state.config.method);\n    return (\n      <div className=\"container App\">\n        <div className=\"row\">\n          <Heading imageSrc={process.env.PUBLIC_URL + '/images/banner.png'} />\n        </div>\n        <div className=\"row\">\n          <Config data={this.state.config} updateConfig={this.onConfigChange} />\n        </div>\n        <div className=\"row\">\n          <div className={(showData ? 'six' : 'twelve') + ' columns'}>\n            <Output\n              className=\"u-full-width\"\n              config={this.state.config}\n              data={this.state.data}\n              output={this.state.output.type}\n              updateConfig={this.onConfigChange}\n              updateData={this.onDataChange}\n            />\n          </div>\n          {showData && (\n            <div className=\"six columns\">\n              <Data\n                className=\"u-full-width\"\n                data={this.state.data}\n                updateData={this.onDataChange}\n              />\n            </div>\n          )}\n        </div>\n        {this.isStorageAvailable && (\n          <div className=\"row\">\n            <History\n              clearHistory={this.clearHistory}\n              history={this.state.history}\n              updateConfig={this.onConfigChange}\n              updateData={this.onDataChange}\n            />\n          </div>\n        )}\n        <div className=\"row\">\n          <Test\n            addToHistory={this.addToHistory}\n            config={this.state.config}\n            data={this.state.data}\n            proxy={this.state.proxy}\n            updateConfig={this.onConfigChange}\n            updateData={this.onDataChange}\n            updateProxy={this.onProxyChange}\n            validation={this.state.validation}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}