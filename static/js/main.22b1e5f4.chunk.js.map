{"version":3,"sources":["enums/index.tsx","components/shared/Select.tsx","components/config/method/Method.tsx","components/data/graphql/GraphQL.tsx","components/config/headers/type/Types.tsx","components/shared/Input.tsx","components/config/headers/value/Value.tsx","components/config/headers/Headers.tsx","components/config/destination/domain/Domain.tsx","components/config/destination/endpoint/Endpoint.tsx","components/config/destination/Destination.tsx","components/config/Config.tsx","components/shared/Button.tsx","components/shared/Copy.tsx","components/shared/Saving.tsx","components/shared/TextArea.tsx","components/data/graphql/type/Type.tsx","components/data/json/Json.tsx","components/data/selector/Selector.tsx","components/data/Data.tsx","components/heading/Heading.tsx","utils/index.ts","components/output/curl/Curl.tsx","components/output/Output.tsx","components/shared/Confirm.tsx","components/test/request/Request.tsx","components/shared/Toggler.tsx","components/test/fetchresponse/FetchResponse.tsx","components/shared/Loading.tsx","components/test/Test.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["HTTPMethods","HTTPHeaders","DataType","OutputType","InputTypes","ColumnCount","JsonValueTypes","Select","props","selected","react_default","a","createElement","Fragment","label","className","name","size","style","disabled","isDisabled","multiple","isMultiple","onChange","value","values","map","i","key","concat","GraphQLType","Method","width","shared_Select","e","target","onUpdate","Object","Types","isFullWidth","index","Input","type","TEXT","id","Value","shared_Input","Headers","updateType","header","updateValue","addHeader","preventDefault","length","removeHeader","currentTarget","split","pop","undefined","parseInt","filter","includes","onClick","type_Types","toConsumableArray","value_Value","Domain","URL","Endpoint","Destination","domain","endpoint","domain_Domain","endpoint_Endpoint","Config","headers_Headers","data","headers","push","updateConfig","TWELVE","method_Method","method","TWO","destination_Destination","TEN","Button","isPrimary","Copy","copy","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","navigator","clipboard","writeText","content","stop","apply","this","arguments","shared_Button","Saving","react_transition_group","transitionName","transitionLeave","transitionEnter","transitionEnterTimeout","isSaved","TextArea","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChangeDirect","state","React","Component","Type","GraphQL","updateGraphQL","draft","getDocAndTypeFromGQLString","gql","onUpdateData","query","setState","_","replace","pretty","PrettyMe","shared_Saving","type_Type","shared_Copy","TextArea_TextArea","ref","doc","parse","definitions","operation","print","newProps","PureComponent","Json","updateJson","console","log","hasDraft","object","JSON","stringify","Selector","Data","selector_Selector","updateData","Json_Json","json","GQL","GraphQL_GraphQL","graphQL","Heading","src","imageSrc","alt","methodHasPayload","GET","HEAD","regEx","url","curlHeader","curlMethod","curlData","newLine","newLineAndTab","multipleSpaces","isValidMethod","string","isValidURL","possUrl","match","isValidGraphQLString","Curl","serializerCurl","config","hasNewConfig","hasNewData","getMethod","getHeaders","newData","getData","domainAndEndpoint","getDomainAndEndpoint","FORM","updateCurl","curl","getValue","regex","utils","exec","height","payload","join","keys","parsePayloadString","Output","output","CURL","Curl_Curl","Confirm","window","confirm","message","onConfirm","onCancel","Request","onRequest","shouldConfirm","shared_Confirm","Toggler","isToggled","onToggle","children","FetchResponse","replacer","p1","p2","p3","p4","part","indent","end","valueClass","STRING","isNaN","Date","toLowerCase","BOOLEAN","DATE","NUMBER","ReactDOMServer","renderToString","repeat","href","toggleHeaders","prevState","showHeaders","toggleData","showData","_this2","shared_Toggler","Array","from","get","dangerouslySetInnerHTML","__html","Loading","Test","getFetchData","fetchData","body","onTest","_callee2","_context2","isLoading","dest","response","fetch","sent","t0","validation","success","shared_Loading","request_Request","FetchResponse_FetchResponse","App","onConfigChange","validatePayload","onDataChange","result","test","form","heading_Heading","process","config_Config","data_Data","output_Output","test_Test","Boolean","location","hostname","ReactDOM","render","App_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"mkBAAYA,EASAC,EAuCAC,EAMAC,EAIAC,EAyBAC,EAeAC,8ECxDGC,EA3BsC,SAACC,GACpD,IAAMC,EAAWD,EAAMC,UAAY,GACnC,OACEC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEL,EAAMM,OAAUJ,EAAAC,EAAAC,cAAA,aAAQJ,EAAMM,OAChCJ,EAAAC,EAAAC,cAAA,UACEG,UAAWP,EAAMO,WAAa,GAC9BC,KAAMR,EAAMQ,MAAQ,GACpBC,KAAMT,EAAMS,MAAQ,EACpBC,MAAOV,EAAMU,OAAS,GACtBC,SAAUX,EAAMY,aAAc,EAC9BC,SAAUb,EAAMc,aAAc,EAC9BC,SAAUf,EAAMe,UAAY,KAC5BC,MAAOf,GACPC,EAAAC,EAAAC,cAAA,UAAQY,MAAM,GAAGL,UAAQ,GAAzB,iBACCX,EAAMiB,OAAOC,IAAI,SAACF,EAAeG,GAAhB,OAChBjB,EAAAC,EAAAC,cAAA,UACEY,MAAOA,EACPI,IAAG,GAAAC,OAAKL,EAAL,KAAAK,OAAcF,IAChBH,wBDlCCxB,8GASAC,kkCAuCAC,oEAMAC,sCAIAC,8YAyBAC,qSAeAC,iGEjFZ,ICJYwB,EDyBGC,EArBsC,SAACvB,GASpD,OACEE,EAAAC,EAAAC,cAAA,OAAKG,UAAWP,EAAMwB,OACpBtB,EAAAC,EAAAC,cAACqB,EAAD,CACElB,UAAU,sBACVD,MAAM,cACNS,SAZiB,SACrBW,GAEA,IAAMV,EAAqBU,EAAEC,OAAOX,MACpChB,EAAM4B,SAASZ,IASXf,SAAUD,EAAMC,SAChBgB,OAAQY,OAAOZ,OAAOzB,eEAfsC,SAjBmC,SAAC9B,GAQjD,OACEE,EAAAC,EAAAC,cAACqB,EAAD,CACElB,WAAYP,EAAM+B,YAAc,eAAiB,IAAM,SACvDhB,SAVmB,SACrBW,GAEA,IAAMV,EAAqBU,EAAEC,OAAOX,MACpChB,EAAM4B,SAASZ,EAAOhB,EAAMgC,QAO1B/B,SAAUD,EAAMC,SAChBgB,OAAQjB,EAAMiB,WCMLgB,EAfoC,SAACjC,GAAD,OACjDE,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEL,EAAMM,OAAUJ,EAAAC,EAAAC,cAAA,aAAQJ,EAAMM,OAChCJ,EAAAC,EAAAC,cAAA,SACE8B,KAAMlC,EAAMkC,MAAQtC,EAAWuC,KAC/B5B,UAAWP,EAAMO,WAAa,GAC9BC,KAAMR,EAAMQ,MAAQ,GACpB4B,GAAIpC,EAAMoC,IAAM,GAChBpB,MAAOhB,EAAMgB,OAAS,GACtBL,SAAUX,EAAMY,aAAc,EAC9BG,SAAUf,EAAMe,aCJLsB,SAboC,SAACrC,GAKlD,OACEE,EAAAC,EAAAC,cAACkC,EAAD,CACE/B,WAAYP,EAAM+B,YAAc,eAAiB,IAAM,SACvDhB,SAPgB,SAACW,GACnB1B,EAAM4B,SAASF,EAAEC,OAAOX,MAAOhB,EAAMgC,QAOnChB,MAAOhB,EAAMgB,UC+GJuB,SA7GwC,SAACvC,GAEtD,IAAMwC,EAAa,SAACN,EAAmBF,GACrC,IAAMS,EAASzC,EAAMC,SAAS+B,GAC9BS,EAAOP,KAAOA,EACdlC,EAAM4B,SAASa,EAAQT,IAGnBU,EAAc,SAAC1B,EAAegB,GAClC,IAAMS,EAASzC,EAAMC,SAAS+B,GAC9BS,EAAOzB,MAAQA,EACfhB,EAAM4B,SAASa,EAAQT,IAGnBW,EAAY,SAACjB,GACjBA,EAAEkB,iBAEF5C,EAAM4B,SACJ,CACEM,KAAM,GACNlB,MAAO,IAEThB,EAAMC,SAAS4C,SAIbC,EAAe,SAACpB,GACpBA,EAAEkB,iBACF,IAAMZ,EAAQN,EAAEqB,cAAcX,GAAGY,MAAM,KAAKC,WAE9BC,IAAVlB,GAIJhC,EAAM4B,SAAS,KAAMuB,SAASnB,KAI1B/B,EAAWD,EAAMC,SAASiB,IAAI,SAAAuB,GAAM,OAAIA,EAAOP,OAC/CjB,EAASY,OAAOZ,OAAOxB,GAAa2D,OAAO,SAAAX,GAAM,OAAKxC,EAASoD,SAASZ,KAE9E,OAEEvC,EAAAC,EAAAC,cAAA,OAAKG,UAAWP,EAAMwB,MAAQ,YAC5BtB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAAA,iCAKAJ,EACGC,SACAiB,IACC,SAACuB,EAAgBT,GAAjB,OAEE9B,EAAAC,EAAAC,cAAA,OAAKG,UAAU,MAAMa,IAAG,GAAAC,OAAKoB,EAAOP,KAAZ,KAAAb,OAAoBW,IAI1C9B,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAAA,UACEG,UAAU,eACV+C,QAASR,EACTV,GAAE,UAAAf,OAAYW,IAHhB,WAOF9B,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACbL,EAAAC,EAAAC,cAACmD,EAAD,CACEvB,MAAOA,EACPD,aAAa,EACbd,OAAM,GAAAI,OAAAQ,OAAA2B,EAAA,EAAA3B,CAAMZ,GAAN,CAAcwB,EAAOP,OAC3BjC,SAAUwC,EAAOP,KACjBN,SAAUY,KAEdtC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACbL,EAAAC,EAAAC,cAACqD,EAAD,CACEzB,MAAOA,EACPD,aAAa,EACbf,MAAOyB,EAAOzB,OAAS,GACvBY,SAAUc,KAEdxC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAAA,UACEG,UAAU,eACV+C,QAASX,GAFX,WAWgB,IAA1B3C,EAAMC,SAAS4C,QACb3C,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,UACEG,UAAU,eACV+C,QAASX,GAFX,2BC7FCe,SAdsC,SAAC1D,GAKpD,OACEE,EAAAC,EAAAC,cAACkC,EAAD,CACE/B,WAAYP,EAAM+B,YAAc,eAAiB,IAAM,UACvDhB,SAPgB,SAACW,GACnB1B,EAAM4B,SAASF,EAAEC,OAAOX,QAOtBkB,KAAMtC,EAAW+D,IACjB3C,MAAOhB,EAAMgB,UCGJ4C,SAf0C,SAAC5D,GAOxD,OACEE,EAAAC,EAAAC,cAACkC,EAAD,CACE/B,WAAYP,EAAM+B,YAAc,eAAiB,IAAM,YACvDhB,SATgB,SAACW,GAEnB1B,EAAM4B,SAASF,EAAEC,OAAOX,QAQtBA,MAAOhB,EAAMgB,UCuCJ6C,SA5CgD,SAAC7D,GAE9D,IAAM4B,EAAW,SAACZ,EAAekB,GAE/BlC,EAAM4B,SACM,WAATM,EAAqBlB,EAAQhB,EAAM8D,OAC1B,aAAT5B,EAAuBlB,EAAQhB,EAAM+D,WAa1C,OACE7D,EAAAC,EAAAC,cAAA,OAAKG,UAAWP,EAAMwB,MAAQ,gBAC5BtB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACfL,EAAAC,EAAAC,cAAA,gCAGFF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAAC4D,EAAD,CACEjC,aAAa,EACbH,SApBW,SAACkC,GACtBlC,EAASkC,EAAQ,WAoBP9C,MAAOhB,EAAM8D,UAEjB5D,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAAC6D,EAAD,CACElC,aAAa,EACbH,SAtBa,SAACmC,GACxBnC,EAASmC,EAAU,aAsBT/C,MAAOhB,EAAM+D,gBCwBZG,EAxDsC,SAAClE,GAkCpD,OACEE,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAC+D,EAAD,CACEvC,SA9Bc,SAACZ,EAAsBgB,GAE3C,IAAMoC,EAAOpE,EAAMoE,MACdA,EAAKC,QAAQrC,IAAUhB,EAC1BoD,EAAKC,QAAQC,KAAKtD,GAEbA,EAMHoD,EAAKC,QAAQrC,GAAShB,UALfoD,EAAKC,QAAQrC,GAEpBoC,EAAKC,QAAUD,EAAKC,QAAQjB,OAAO,SAAAX,GAAM,OAAIA,KAMjDzC,EAAMuE,aAAaH,IAgBbnE,SAAUD,EAAMoE,KAAKC,QACrB7C,MAAO3B,EAAY2E,UAEvBtE,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACfL,EAAAC,EAAAC,cAACqE,EAAD,CACExE,SAAUD,EAAMoE,KAAKM,OACrBlD,MAAO3B,EAAY8E,IACnB/C,SA7Ce,SAACZ,GAEpB,IAAMoD,EAAOpE,EAAMoE,KACnBA,EAAKM,OAAS1D,EACdhB,EAAMuE,aAAaH,MA0CjBlE,EAAAC,EAAAC,cAACwE,EAAD,CACEhD,SAtBoB,SAACkC,EAAgBC,GAEzC,IAAMK,EAAOpE,EAAMoE,KACnBA,EAAKN,OAASA,EACdM,EAAKL,SAAWA,EAChB/D,EAAMuE,aAAaH,IAkBfN,OAAQ9D,EAAMoE,KAAKN,OACnBC,SAAU/D,EAAMoE,KAAKL,SACrBvC,MAAO3B,EAAYgF,yBChDZC,EAhBsC,SAAC9E,GAMpD,OACEE,EAAAC,EAAAC,cAAA,SACE8B,KAAK,SACL3B,WAAYP,EAAM+E,UAAY,kBAAoB,KAAO/E,EAAMO,WAAa,IAC5EI,SAAUX,EAAMY,WAChB0C,QAViB,SAAC5B,GACpBA,EAAEkB,iBACF5C,EAAMsD,WASJtC,MAAOhB,EAAMM,gCCGJ0E,EAfkC,SAAChF,GAEhD,IAAMiF,EAAI,eAAAC,EAAArD,OAAAsD,EAAA,EAAAtD,CAAAuD,EAAAjF,EAAAkF,KAAG,SAAAC,IAAA,OAAAF,EAAAjF,EAAAoF,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACLC,UAAUC,UAAUC,UAAU7F,EAAM8F,SAD/B,wBAAAN,EAAAO,SAAAT,MAAH,yBAAAJ,EAAAc,MAAAC,KAAAC,YAAA,GAIV,OACEhG,EAAAC,EAAAC,cAAC+F,EAAD,CACE5F,UAAWP,EAAMO,WAAa,GAC9BwE,WAAW,EACXzE,MAAQN,EAAMM,OAAS,OACvBgD,QAAS2B,aCWAmB,SArBsC,SAACpG,GAEpD,OACEE,EAAAC,EAAAC,cAACiG,EAAA,mBAAD,CACEC,eAAe,cACfC,iBAAiB,EACjBC,iBAAiB,EACjBC,uBAAwB,KACxBvG,EAAAC,EAAAC,cAAA,OACEG,WACIP,EAAM0G,QAAW,QAAU,YAC1B,YACA1G,EAAMO,WAAa,IAExBa,IAAK,UAAYpB,EAAM0G,SACtB1G,EAAM0G,QAAN,SAAArF,OAAyBrB,EAAMM,OAA/B,GAAAe,OAA6CrB,EAAMM,MAAnD,kBCXYqG,cAEnB,SAAAA,EAAY3G,GAAsB,IAAA4G,EAAA,OAAA/E,OAAAgF,EAAA,EAAAhF,CAAAoE,KAAAU,IAChCC,EAAA/E,OAAAiF,EAAA,EAAAjF,CAAAoE,KAAApE,OAAAkF,EAAA,EAAAlF,CAAA8E,GAAAK,KAAAf,KAAMjG,KAIR4B,SAAW,SAACF,GACNkF,EAAK5G,MAAMiH,eACbL,EAAK5G,MAAMiH,eAAevF,GACjBkF,EAAK5G,MAAM4B,UACpBgF,EAAK5G,MAAM4B,SAASF,EAAEC,OAAOX,QAP/B4F,EAAKM,MAAQ,GAFmBN,wEAchC,OACE1G,EAAAC,EAAAC,cAAA,YACEG,WAAa0F,KAAKjG,MAAM+B,YAAe,gBAAkB,KAAOkE,KAAKjG,MAAMO,WAAa,GACxFQ,SAAUkF,KAAKrE,SACflB,MAAOuF,KAAKjG,MAAMU,OAAS,GAC3BM,MAAOiF,KAAKjG,MAAMgB,eArBYmG,IAAMC,WCgB7BC,SAjBkC,SAACrH,GAQhD,OACEE,EAAAC,EAAAC,cAACqB,EAAD,CACElB,WAAYP,EAAMO,WAAa,IAAM,QACrCQ,SAVmB,SACrBW,GAEA,IAAMV,EAAqBU,EAAEC,OAAOX,MACpChB,EAAM4B,SAASZ,IAObf,SAAUD,EAAMC,SAChBgB,OAAQY,OAAOZ,OAAOK,uBbdhBA,yDAqBSgG,cAEnB,SAAAA,EAAYtH,GAAqB,IAAA4G,EAAA/E,OAAAgF,EAAA,EAAAhF,CAAAoE,KAAAqB,IAC/BV,EAAA/E,OAAAiF,EAAA,EAAAjF,CAAAoE,KAAApE,OAAAkF,EAAA,EAAAlF,CAAAyF,GAAAN,KAAAf,KAAMjG,KAsCRuH,cAAgB,SAAC7F,GACf,IAAM8F,EAAQ9F,EAAEC,OAAOX,MACvB,IACcsG,EAAQG,2BAA2BD,GACvCE,MAAQd,EAAKM,MAAMM,OACzBZ,EAAK5G,MAAM2H,aAET,CAACC,MAAOJ,IAEVZ,EAAKiB,SAAS,CAACnB,SAAS,KAExBE,EAAKiB,SAAS,CACZL,QACAd,SAAQ,IAGZ,MAAOoB,GACPlB,EAAKiB,SAAS,CACZL,QACAd,SAAS,MA1DkBE,EAiEjCpE,WAAa,SAACN,GACZ0E,EAAK5G,MAAM2H,aACT,CAACC,MAAO1F,EAAQ,IAAM0E,EAAKM,MAAMM,MAAMO,QAAQnB,EAAKM,MAAMhF,KAAM,OAnEnC0E,EAuEjCoB,OAAS,WACPpB,EAAK5G,MAAM2H,aACT,CAACC,MAAOhB,EAAKM,MAAMhF,KAAO,IAAMoF,EAAQW,SAASrB,EAAKM,MAAMM,OAAOO,QAAQnB,EAAKM,MAAMhF,KAAM,OAvE9F,IAAMwF,EAAMJ,EAAQG,2BAA2BzH,EAAMoE,KAAKwD,OAF3B,OAG/BhB,EAAKM,MAAQ,CACXM,MAAOE,EAAIA,IACXhB,SAAS,EACTxE,KAAMwF,EAAIxF,MANmB0E,wEAsF/B,OACE1G,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAAC8H,EAAD,CAAQxB,QAAST,KAAKiB,MAAMR,QAASpG,MAAM,aAE7CJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAAC+H,EAAD,CACE5H,UAAU,eACVN,SAAUgG,KAAKiB,MAAMhF,KACrBN,SAAUqE,KAAKzD,cAEnBtC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAAC+F,EAAD,CACE5F,UAAU,eACVD,MAAM,SACNgD,QAAS2C,KAAK+B,OACdpH,YAAaqF,KAAKiB,MAAMR,QACxB3B,WAAW,KAEf7E,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAACgI,EAAD,CACE7H,UAAU,eACVuF,QAASwB,EAAQW,SAAShC,KAAKiB,MAAMM,OACrClH,MAAK,oBAGXJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACiI,EAAD,CACEtG,aAAa,EACbkF,eAAgBhB,KAAKsB,cACrBe,IAAI,YACJtH,MAAOiF,KAAKiB,MAAMM,+DA3G1BE,GAEA,IAAMa,EAAMC,YAAMd,GAEZxF,EAD+BqG,EAAIE,YAAY,GACpCC,UACjB,MAAO,CACLhB,IAAKiB,YAAMJ,GACXrG,yDAI4B0G,EAAwB1B,GACtD,GAAI0B,EAASxE,KAAKwD,QAAUV,EAAMM,QAAUN,EAAMR,QAChD,OAAOQ,EAET,IACE,IAAMQ,EAAMJ,EAAQG,2BAA2BmB,EAASxE,KAAKwD,OAC7D,MAAO,CACLJ,MAAOoB,EAASxE,KAAKwD,MACrBlB,SAAS,EACTxE,KAAMwF,EAAIxF,MAGZ,MAAOR,GACP,OAAOwF,oCA0CKQ,GACd,IACE,OAAOiB,YAAMH,YAAMd,IACnB,MAAOI,GACP,OAAOJ,UAnFwBP,IAAM0B,ecNtBC,qBAEnB,SAAAA,EAAY9I,GAAkB,IAAA4G,EAAA,OAAA/E,OAAAgF,EAAA,EAAAhF,CAAAoE,KAAA6C,IAC5BlC,EAAA/E,OAAAiF,EAAA,EAAAjF,CAAAoE,KAAApE,OAAAkF,EAAA,EAAAlF,CAAAiH,GAAA9B,KAAAf,KAAMjG,KAsCR+I,WAAa,SAAC/H,GACZgI,QAAQC,IAAIjI,GACZ4F,EAAKiB,SAAS,CACZL,MAAOxG,EACPkI,UAAU,IAEZ,IACE,IAAMC,EAASC,KAAKZ,MAAMxH,GAC1B4F,EAAK5G,MAAM2H,aAAawB,GACxB,MAAOrB,MAhDmBlB,EAsD9BoB,OAAS,WACP,IACEpB,EAAKmC,WAAWK,KAAKC,UAAUD,KAAKZ,MAAM5B,EAAKM,MAAMM,OAAQ,KAAM,IACnE,MAAOM,GACP,SAxDFlB,EAAKM,MAAQ,CACXM,MAAO4B,KAAKC,UAAUrJ,EAAMoE,KAAM,KAAM,GACxC8E,UAAU,GAJgBtC,wEA+D5B,OACE1G,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAAC8H,EAAD,CAAQxB,SAAUT,KAAKiB,MAAMgC,SAAU5I,MAAM,UAE/CJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACbL,EAAAC,EAAAC,cAAC+F,EAAD,CAAQ5F,UAAU,eAAeD,MAAM,SAASgD,QAAS2C,KAAK+B,OAAQjD,WAAW,KAEnF7E,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAACgI,EAAD,CACE7H,UAAU,eACVuF,QAASG,KAAKiB,MAAMM,MACpBlH,MAAK,qBAGXJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACiI,EAAD,CACEtG,aAAa,EACbH,SAAUqE,KAAK8C,WACf/H,MAAOiF,KAAKiB,MAAMM,6DAnEIoB,EAAqB1B,GACnD,IAAIM,EAAQ,GACR0B,EAAWhC,EAAMgC,SACrB,IAEEE,KAAKZ,MAAMtB,EAAMM,OACjBA,EAAQ0B,EAAWhC,EAAMM,MAAQ4B,KAAKC,UAAUT,EAASxE,MACzD8E,GAAW,EACX,MAAOpB,GACPN,EAAQN,EAAMM,MACd0B,GAAW,EAEb,MAAO,CACLA,WACA1B,gBAhC4BL,IAAM0B,gBCGzBS,SAjB0C,SAACtJ,GAQxD,OACEE,EAAAC,EAAAC,cAACqB,EAAD,CACElB,WAAYP,EAAMO,WAAa,IAAM,YACrCQ,SAVmB,SACrBW,GAEA,IAAMV,EAAkBU,EAAEC,OAAOX,MACjChB,EAAM4B,SAASZ,IAObf,SAAUD,EAAMC,SAChBgB,OAAQY,OAAOZ,OAAOvB,OCqDb6J,SAnDkC,SAACvJ,GAmBhD,OACEE,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACbL,EAAAC,EAAAC,cAAA,yBAGJF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACbL,EAAAC,EAAAC,cAACoJ,EAAD,CACEjJ,UAAU,eACVN,SAAUD,EAAMoE,KAAKlC,KACrBN,SA9BS,SAACZ,GAClB,IAAMoD,EAAOpE,EAAMoE,KACnBA,EAAKlC,KAAOlB,EACZhB,EAAMyJ,WAAWrF,QA8BflE,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBAEbP,EAAMoE,KAAKlC,OAASxC,EAAS0J,MACvBlJ,EAAAC,EAAAC,cAACsJ,EAAD,CAAMtF,KAAMpE,EAAMoE,KAAKA,KAAKuF,KAAMhC,aA/BzB,SAAC3G,GACtB,IAAMoD,EAAOpE,EAAMoE,KACnBA,EAAKA,KAAKuF,KAAO3I,EACjBhB,EAAMyJ,WAAWrF,MA+BXpE,EAAMoE,KAAKlC,OAASxC,EAASkK,KACvB1J,EAAAC,EAAAC,cAACyJ,EAAD,CACFzF,KAAMpE,EAAMoE,KAAKA,KAAK0F,QACtBnC,aA/Bc,SAAC3G,GACzB,IAAMoD,EAAOpE,EAAMoE,KACnBA,EAAKA,KAAK0F,QAAU9I,EACpBhB,EAAMyJ,WAAWrF,WC5BN2F,SATwC,SAAC/J,GACtD,OACEE,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WACbL,EAAAC,EAAAC,cAAA,OAAK4J,IAAKhK,EAAMiK,SAAUC,IAAI,oBCPvBC,EAAmB,SAACzF,GAAD,OAC7B,CAAClF,EAAY4K,IAAK5K,EAAY6K,MAC5BhH,SAASqB,IAID4F,EAAQ,CACnBC,IAAK,qGACLC,WAAY,qDACZC,WAAY,2BAEZC,SAAU,oCACVC,QAAS,YACTC,cAAe,eACfC,eAAgB,QAILC,EAAgB,SAACC,GAAD,OAC3BlJ,OACCZ,OAAOzB,GACP6D,SAAS0H,IAGCC,EAAa,SAAClH,EAAgBC,GACzC,IAAMwG,EAAMzG,EAAS,IAAMC,EACrBkH,EAAWV,EAAKW,MAAMZ,EAAMC,KAClC,SAASU,GAAWA,EAAQ,KAAOV,IAgBxBY,EAAuB,SAACzD,GACnC,IAEE,OADAc,YAAMd,IACC,EACP,MAAOI,GACP,OAAO,ICCUsD,qBAEnB,SAAAA,EAAYpL,GAAkB,IAAA4G,EAAA,OAAA/E,OAAAgF,EAAA,EAAAhF,CAAAoE,KAAAmF,IAC5BxE,EAAA/E,OAAAiF,EAAA,EAAAjF,CAAAoE,KAAApE,OAAAkF,EAAA,EAAAlF,CAAAuJ,GAAApE,KAAAf,KAAMjG,KAiHRqL,eAAiB,SAACrK,GAEhB,IAAMsK,EAAS1E,EAAK5G,MAAMsL,OACpBlH,EAAOwC,EAAK5G,MAAMoE,KAEpBmH,GAAe,EACfC,GAAa,EAKX9G,EAASkC,EAAK6E,UAAUzK,GAGxBqD,EAAUuC,EAAK8E,WAAW1K,GAG1B2K,EAAU/E,EAAKgF,QAAQ5K,GAGvB6K,EAAoBjF,EAAKkF,qBAAqB9K,GAiBpD,GAfAgI,QAAQC,IAAIqC,EAAO5G,OAAQA,GAEzBA,GACGA,IAAW4G,EAAO5G,QAClB7C,OAAOZ,OAAOzB,GAAa6D,SAASqB,KAEvC6G,GAAe,EACfD,EAAO5G,OAASA,GAIdL,GAAWiH,EAAOjH,QAAQxB,SAAWyI,EAAOjH,QAAQxB,SACtD0I,GAAe,EACfD,EAAOjH,QAAUA,GAEfsH,GAAWvC,KAAKC,UAAUsC,KAAavC,KAAKC,UAAUjF,EAAKA,KAAKA,EAAKlC,OAEvE,OADAsJ,GAAa,EACLpH,EAAKlC,MACX,KAAKxC,EAASkK,IACZxF,EAAKA,KAAK0F,QAAQlC,MAAQ+D,EAAQ/D,MAClC,MACF,KAAKlI,EAAS0J,KACZhF,EAAKA,KAAKuF,KAAOgC,EACjB,MACF,KAAKjM,EAASqM,MAclB,OAVIF,IACEA,EAAkB/H,QAAU+H,EAAkB/H,SAAWwH,EAAOxH,SAClEyH,GAAe,EACfD,EAAOxH,OAAS+H,EAAkB/H,QAEhC+H,EAAkB9H,UAAY8H,EAAkB9H,WAAauH,EAAOvH,WACtEwH,GAAe,EACfD,EAAOvH,SAAW8H,EAAkB9H,WAGjC,CACLuH,SACAlH,OACAmH,eACAC,eAlL0B5E,EA2L9BoF,WAAa,SAAChL,GACZ,IAAMiL,EAAOrF,EAAKyE,eAAerK,GAEjCgI,QAAQC,IAAIgD,IACRA,EAAKT,YAAcS,EAAKV,eAC1B3E,EAAKiB,SAAS,CAACL,MAAOxG,EAAOkI,UAAU,GAAQ,WAC7C+C,EAAKT,YAAc5E,EAAK5G,MAAMyJ,WAAWwC,EAAK7H,MAC9C6H,EAAKV,cAAgB3E,EAAK5G,MAAMuE,aAAa0H,EAAKX,UAGjDW,EAAKT,YAAeS,EAAKV,cAC5B3E,EAAKiB,SAAS,CAACL,MAAOxG,EAAOkI,UAAU,KApMzCtC,EAAKM,MAAQ,CACXM,MAAO4D,EAAKc,SAASlM,EAAMsL,OAAQtL,EAAMoE,MACzC8E,UAAU,GAJgBtC,0EA2BnB5F,GAIT,IAHA,IAAMmL,EAAQC,EAAY5B,WACpBnG,EAAU,GACZ6G,EAAQ,KACLA,EAAQiB,EAAME,KAAKrL,IACxBqD,EAAQC,KAAK,CACXpC,KAAMgJ,EAAM,GACZlK,MAAOkK,EAAM,KAGjB,OAAuB,IAAnB7G,EAAQxB,OACH,KAEFwB,oCAUCrD,GACR,IAAMmL,EAAQC,EAAY3B,WAC1B,IAAKzJ,EAAMkK,MAAMiB,GACf,OAAO,KAET,IAAMjB,EAAQiB,EAAME,KAAKrL,GACzB,OAAKkK,EAGEA,EAAM,GAFJ,qCAYHlK,GACN,IAAMmL,EAAQC,EAAY1B,SAC1B,IAAK1J,EAAMkK,MAAMiB,GACf,OAAO,KAET,IAAMjB,EAAQiB,EAAME,KAAKrL,GACzB,IAAKkK,EACH,OAAO,KAET,IACE,OAAO9B,KAAKZ,MAAM0C,EAAM,IACxB,MAAOpD,GACP,OAAO,mDAWU9G,GACnB,IAAMmL,EAAQC,EAAY7B,IAC1B,IAAKvJ,EAAMkK,MAAMiB,GACf,OAAO,KAET,IAAMjB,EAAQiB,EAAME,KAAKrL,GACzB,OAAKkK,EAGE,CACLpH,OAAQoH,EAAM,IAAM,KACpBnH,SAAUmH,EAAM,IAAM,MAJf,sCA6IT,OACEhL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACiI,EAAD,CACEtG,aAAa,EACbH,SAAUqE,KAAK+F,WACftL,MAAO,CACL4L,OAAQ,SAEVtL,MAAOiF,KAAKiB,MAAMM,SAEtBtH,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAAC8H,EAAD,CAAQxB,SAAUT,KAAKiB,MAAMgC,SAAU5I,MAAM,UAE/CJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAACgI,EAAD,CACE7H,UAAU,eACVuF,QAASG,KAAKiB,MAAMM,MACpBlH,MAAK,yEA1PesI,EAAqB1B,GACnD,IAAMM,EAASN,EAAMgC,SACjBhC,EAAMM,MACN4D,EAAKc,SAAStD,EAAS0C,OAAQ1C,EAASxE,MAE5C,MAAO,CACL8E,SAAUhC,EAAMgC,SAChB1B,0CAiMF8D,EACAlH,GAEA,IAAImI,EAAU,GACd,OAAQnI,EAAKlC,MACX,KAAKxC,EAAS0J,KACZmD,EAAUnI,EAAKA,KAAKuF,KACpB,MACF,KAAKjK,EAASkK,IACZ2C,EAAUnI,EAAKA,KAAK0F,QACpB,MACF,KAAKpK,EAASqM,MAGhB,MAAO,WAAaT,EAAO5G,OAAS,SAC9B4G,EAAOjH,QAAQnD,IAAI,SAAAuB,GAAM,MAAI,OAAUA,EAAOP,KAAO,KAAOO,EAAOzB,MAAQ,YAAYwL,KAAK,KAC3FD,GAAW1K,OAAO4K,KAAKF,GAAS1J,OAAS,GAAKuJ,EAAuBd,EAAO5G,QAC5E,OAAS0G,EAAKsB,mBAAmBtD,KAAKC,UAAUkD,IAAY,UAAY,IAC1EjB,EAAOxH,OAASwH,EAAOvH,oDAQJ/C,GACxB,OAAOA,EAAM+G,QAAQqE,EAAYxB,cAAe,IAAI7C,QAAQqE,EAAYvB,eAAgB,YA9O1D1D,IAAMC,YCnBzBuF,SAhBsC,SAAC3M,GACpD,OACEE,EAAAC,EAAAC,cAAA,OAAKG,UAAU,UAEVP,EAAM4M,SAAWjN,EAAWkN,MAC3B3M,EAAAC,EAAAC,cAAC0M,EAAD,CACExB,OAAQtL,EAAMsL,OACdlH,KAAMpE,EAAMoE,KACZG,aAAcvE,EAAMuE,aACpBkF,WAAYzJ,EAAMyJ,gBCQfsD,gBAhBwC,SAAC/M,GAOtD,OACEE,EAAAC,EAAAC,cAAC+F,EAAD,CACE5F,UAAWP,EAAMO,WAAa,GAC9BwE,UAAW/E,EAAM+E,YAAa,EAC9BzE,MAAON,EAAMM,MACbgD,QAVc,WACD0J,OAAOC,QAAQjN,EAAMkN,SAC3BlN,EAAMmN,YAAcnN,EAAMoN,gBCkBxBC,GA3BwC,SAACrN,GACtD,IAAMmN,EAAYnN,EAAMsN,UAIxB,OACEpN,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WAEXP,EAAMuN,cACFrN,EAAAC,EAAAC,cAACoN,GAAD,CACEjN,UAAU,eACVD,MAAM,OACN6M,UAAWA,EACXC,SAZG,aAaHF,QAAQ,kBACThN,EAAAC,EAAAC,cAAC+F,EAAD,CACC5F,UAAU,eACVwE,WAAW,EACXzE,MAAM,OACNgD,QAAStD,EAAMsN,mCCHhBG,GApBwC,SAACzN,GAEtD,OACEE,EAAAC,EAAAC,cAAA,OAAKG,UAAWP,EAAMO,WAAa,IACjCL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACfL,EAAAC,EAAAC,cAAC+F,EAAD,CACE5F,UAAU,eACVwE,WAAW,EACXzE,OAAUN,EAAM0N,UAAsB,QAAV,SAAqB1N,EAAMM,MACvDgD,QAAStD,EAAM2N,YAGf3N,EAAM0N,WACJxN,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OAAOP,EAAM4N,YCHjBC,sBAEnB,SAAAA,EAAY7N,GAA2B,IAAA4G,EAAA,OAAA/E,OAAAgF,EAAA,EAAAhF,CAAAoE,KAAA4H,IACrCjH,EAAA/E,OAAAiF,EAAA,EAAAjF,CAAAoE,KAAApE,OAAAkF,EAAA,EAAAlF,CAAAgM,GAAA7G,KAAAf,KAAMjG,KAQR8N,SAAW,SAAChG,EAAWiG,EAAYC,EAAYC,EAAYC,GACzD,IAAMC,EAAO,CAAEC,OAAQL,EAAI3M,IAAK4M,EAAIhN,MAAOiN,EAAII,IAAKH,GAEhDI,EAAa,aACbpM,EAAOpC,EAAeyO,OAmB1B,YAlBmBrL,IAAfiL,EAAKnN,OAAsC,OAAfmN,EAAKnN,QAC9BwN,MAAMrL,SAASgL,EAAKnN,QAGbwN,MAAMC,KAAKjG,MAAM2F,EAAKnN,MAAM+G,QAAQ,QAAS,OAG9C,CAAC,OAAQ,QAAS,OAAQ,MAAO,aAAa1E,SAAS8K,EAAKnN,MAAM0N,gBAC3EJ,EAAa,eACbpM,EAAOpC,EAAe6O,SACbR,EAAKnN,MAAMkK,MAAMkB,EAAY7B,MACtC+D,EAAa,WACbpM,EAAOpC,EAAe6D,MAEtB2K,EAAa,cACbpM,EAAOpC,EAAeyO,SAVtBD,EAAa,YACbpM,EAAOpC,EAAe8O,OAJtBN,EAAa,cACbpM,EAAOpC,EAAe+O,SAenBC,KAAeC,eACpB7O,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACG,OAAS2O,OAAOb,EAAKC,OAAOvL,QAC5BsL,EAAK/M,KAAOlB,EAAAC,EAAAC,cAAA,QAAMG,UAAU,YAAhB,IAA6B4N,EAAK/M,IAAlC,KAEX+M,EAAKnN,OAEHd,EAAAC,EAAAC,cAAA,QAAMG,UAAW+N,GAEbpM,IAASpC,EAAe6D,IACnBzD,EAAAC,EAAAC,cAAA,KAAG6O,KAAMd,EAAKnN,MAAM+G,QAAQ,IAAK,KAAMoG,EAAKnN,OAC7CmN,EAAKnN,OAIhBmN,EAAKE,KAAOnO,EAAAC,EAAAC,cAAA,QAAMG,UAAU,YAAhB,IAA6B4N,EAAKE,IAAlC,KACbnO,EAAAC,EAAAC,cAAA,cAhDiCwG,EAqDvCsI,cAAgB,WACdtI,EAAKiB,SAAS,SAAAsH,GAAS,MAAI,CACzBC,aAAcD,EAAUC,gBAvDWxI,EA2DvCyI,WAAa,WACXzI,EAAKiB,SAAS,SAAAsH,GAAS,MAAI,CACzBG,UAAWH,EAAUG,aA3DvB1I,EAAKM,MAAO,CACVkI,aAAa,EACbE,UAAU,GAJyB1I,wEAiE7B,IAAA2I,EAAAtJ,KACR,OACE/F,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACfL,EAAAC,EAAAC,cAACoP,GAAD,CACE9B,UAAWzH,KAAKiB,MAAMkI,YACtB7O,UAAU,UACVD,MAAM,UACNqN,SAAU1H,KAAKiJ,eACfhP,EAAAC,EAAAC,cAAA,SAAOG,UAAU,oBACfL,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,uBAGJF,EAAAC,EAAAC,cAAA,aAEIqP,MAAMC,KAAKzJ,KAAKjG,MAAMqE,QAAQoI,QAAQvL,IACpC,SAACE,EAAKY,GAAN,OACE9B,EAAAC,EAAAC,cAAA,MAAIgB,IAAG,KAAAC,OAAOD,EAAP,KAAAC,OAAcW,IACnB9B,EAAAC,EAAAC,cAAA,cAAMgB,EAAN,KACAlB,EAAAC,EAAAC,cAAA,cAAMmP,EAAKvP,MAAMqE,QAAQsL,IAAIvO,GAA7B,WAQdlB,EAAAC,EAAAC,cAACoP,GAAD,CACE9B,UAAWzH,KAAKiB,MAAMoI,SACtBhP,MAAM,OACNqN,SAAU1H,KAAKoJ,YACbnP,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OAAOqP,wBAAyB,CAACC,OAC9CzG,KAAKC,UACHpD,KAAKjG,MAAM2J,KACX,KACA,GACA5B,QACA,uDACA9B,KAAK6H,sBA3GwB3G,IAAM0B,gBCAlCiH,UAbwC,SAAC9P,GACtD,OACEE,EAAAC,EAAAC,cAAA,OAAKG,WAAYP,EAAMO,WAAa,IAAM,qBACxCL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WACbL,EAAAC,EAAAC,cAAA,aAEFF,EAAAC,EAAAC,cAAA,yBCwGS2P,sBAlFb,SAAAA,EAAY/P,GAAkB,IAAA4G,EAAA,OAAA/E,OAAAgF,EAAA,EAAAhF,CAAAoE,KAAA8J,IAC5BnJ,EAAA/E,OAAAiF,EAAA,EAAAjF,CAAAoE,KAAApE,OAAAkF,EAAA,EAAAlF,CAAAkO,GAAA/I,KAAAf,KAAMjG,KAORgQ,aAAe,WACb,IAAMC,EAAyB,CAC7BvL,OAAQkC,EAAK5G,MAAMsL,OAAO5G,OAC1BwL,KAAM,KACN7L,QAAS,IAAI9B,QACXqE,EAAK5G,MAAMsL,OAAOjH,QAAQnD,IAAI,SAAAuB,GAAM,MAAI,CAACA,EAAOP,KAAMO,EAAOzB,WAOjE,OAHIoL,EAAuBxF,EAAK5G,MAAMsL,OAAO5G,UAC3CuL,EAAUC,KAAO9G,KAAKC,UAAUzC,EAAK5G,MAAMoE,KAAKA,KAAKwC,EAAK5G,MAAMoE,KAAKlC,QAEhE+N,GApBqBrJ,EAuB9BuJ,OAvB8BtO,OAAAsD,EAAA,EAAAtD,CAAAuD,EAAAjF,EAAAkF,KAuBrB,SAAA+K,IAAA,OAAAhL,EAAAjF,EAAAoF,KAAA,SAAA8K,GAAA,cAAAA,EAAA5K,KAAA4K,EAAA3K,MAAA,OACPkB,EAAKiB,SACH,CAACyI,WAAW,GADdzO,OAAAsD,EAAA,EAAAtD,CAAAuD,EAAAjF,EAAAkF,KAEE,SAAAC,IAAA,IAAAiL,EAAAC,EAAA7G,EAAA,OAAAvE,EAAAjF,EAAAoF,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACM6K,EAAO,IAAI5M,IAAIiD,EAAK5G,MAAMsL,OAAOxH,OAAS8C,EAAK5G,MAAMsL,OAAOvH,UADlEyB,EAAAE,KAAA,EAEiC+K,MAC/BF,EAAKtB,KACLrI,EAAKoJ,gBAJP,cAEMQ,EAFNhL,EAAAkL,KAMI/G,EAAO,GANXnE,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAQe8K,EAAS7G,OARxB,OAQEA,EARFnE,EAAAkL,KAAAlL,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAmL,GAAAnL,EAAA,iBAUAoB,EAAKiB,SAAS,CACZyI,WAAW,EACXE,SAAU,CACRnM,QAASmM,EAASnM,QAClBsF,KAAMA,KAdV,yBAAAnE,EAAAO,SAAAT,EAAA,mBAHK,wBAAA+K,EAAAtK,SAAAqK,MArBPxJ,EAAKM,MAAQ,CACXoJ,WAAW,EACXE,SAAU,IAJgB5J,wEAgD5B,OAAKX,KAAKjG,MAAM4Q,WAAWC,QAavB5K,KAAKiB,MAAMoJ,UAEXpQ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAC0Q,GAAD,OAKJ5Q,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAC2Q,GAAD,CACExD,eAAe,EACfD,UAAWrH,KAAKkK,SAEhBlK,KAAKiB,MAAMsJ,SAASnM,SAAW4B,KAAKiB,MAAMsJ,SAAS7G,MACnDzJ,EAAAC,EAAAC,cAAC4Q,GAAD,CAAe3M,QAAS4B,KAAKiB,MAAMsJ,SAASnM,QAASsF,KAAM1D,KAAKiB,MAAMsJ,SAAS7G,QAzBjFzJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBAEX0F,KAAKjG,MAAM4Q,WAAW1D,QAAQhM,IAC5B,SAAA6J,GAAM,OAAI7K,EAAAC,EAAAC,cAAA,iBAAS2K,EAAT,gBAxDP5D,IAAM0B,gBCJJoI,sBAcnB,SAAAA,EAAYjR,GAAiB,IAAA4G,EAAA,OAAA/E,OAAAgF,EAAA,EAAAhF,CAAAoE,KAAAgL,IAC3BrK,EAAA/E,OAAAiF,EAAA,EAAAjF,CAAAoE,KAAApE,OAAAkF,EAAA,EAAAlF,CAAAoP,GAAAjK,KAAAf,KAAMjG,KAbRkR,eAAiB,SAAC5F,GAChB1E,EAAKiB,SAAS,CACZyD,UACC,kBAAM1E,EAAKiB,SAAS,CAAC+I,WAAYhK,EAAKuK,uBASdvK,EAN7BwK,aAAe,SAAChN,GACdwC,EAAKiB,SAAS,CACZzD,QACC,kBAAMwC,EAAKiB,SAAS,CAAC+I,WAAYhK,EAAKuK,uBAGdvK,EA2B7BuK,gBAAkB,WAChBnI,QAAQC,IAAIrC,EAAKM,MAAMoE,OAAQc,EAC7BxF,EAAKM,MAAMoE,OAAOxH,OAClB8C,EAAKM,MAAMoE,OAAOvH,WAChB6C,EAAKM,MAAMoE,OAAOxH,OAAS,IAAM8C,EAAKM,MAAMoE,OAAOvH,UAAUmH,MAAMkB,EAAY7B,MACnF,IAAM8G,EAAS,CACbnE,QAAS,GACT2D,SAAS,GA8BX,OA5BKzE,EAAoBxF,EAAKM,MAAMoE,OAAO5G,UACzC2M,EAAOnE,QAAQ5I,KAAf,WAAAjD,OACauF,EAAKM,MAAMoE,OAAO5G,OAD/B,2BAGA2M,EAAOR,SAAU,GAKdzE,EACHxF,EAAKM,MAAMoE,OAAOxH,OAClB8C,EAAKM,MAAMoE,OAAOvH,YAElBsN,EAAOnE,QAAQ5I,KAAf,eAAAjD,OACiBuF,EAAKM,MAAMoE,OAAOxH,OADnC,QAAAzC,OACgDuF,EAAKM,MAAMoE,OAAOvH,SADlE,2BAGAsN,EAAOR,SAAU,GAIjBjK,EAAKM,MAAM9C,KAAKlC,OAASxC,EAASkK,KAC9BwC,EAA2BxF,EAAKM,MAAM9C,KAAKA,KAAK0F,QAAQlC,SAC1DyJ,EAAOnE,QAAQ5I,KAAf,gDAGA+M,EAAOR,SAAU,GAErB7H,QAAQC,IAAIoI,GACLA,GA9DPzK,EAAKM,MAAQ,CACXoE,OAAQ,CACN5G,OAAQlF,EAAY4K,IACpB/F,QAAS,GACTP,OAAQ,yBACRC,SAAU,kBAEZK,KAAM,CACJlC,KAAMxC,EAAS0J,KACfhF,KAAM,CACJuF,KAAM,CAAC2H,KAAM,SACbxH,QAAS,CAAClC,MAAO,6BACjB2J,KAAM,OAGV3E,OAAQ,CACN1K,KAAMvC,EAAWkN,MAEnB+D,WAAY,CACV1D,QAAS,GACT2D,SAAS,IAtBcjK,wEAoE3B,OACE1G,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACoR,EAAD,CAASvH,SAAUwH,gCAErBvR,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACsR,EAAD,CACEtN,KAAM6B,KAAKiB,MAAMoE,OACjB/G,aAAc0B,KAAKiL,kBAEvBhR,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OAEX6L,EAAuBnG,KAAKiB,MAAMoE,OAAO5G,SACtCxE,EAAAC,EAAAC,cAACuR,EAAD,CAAMvN,KAAM6B,KAAKiB,MAAM9C,KAAMqF,WAAYxD,KAAKmL,gBAGrDlR,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACwR,EAAD,CACEtG,OAAQrF,KAAKiB,MAAMoE,OACnBlH,KAAM6B,KAAKiB,MAAM9C,KACjBwI,OAAQ3G,KAAKiB,MAAM0F,OAAO1K,KAC1BqC,aAAc0B,KAAKiL,eACnBzH,WAAYxD,KAAKmL,gBAErBlR,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACyR,GAAD,CACEjB,WAAY3K,KAAKiB,MAAM0J,WACvBtF,OAAQrF,KAAKiB,MAAMoE,OACnBlH,KAAM6B,KAAKiB,MAAM9C,KACjBG,aAAc0B,KAAKiL,eACnBzH,WAAYxD,KAAKmL,wBAhHIjK,IAAMC,YClBnB0K,QACW,cAA7B9E,OAAO+E,SAASC,UAEe,UAA7BhF,OAAO+E,SAASC,UAEhBhF,OAAO+E,SAASC,SAAS9G,MACvB,2DCZN+G,IAASC,OAAOhS,EAAAC,EAAAC,cAAC+R,GAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmB1M,WACrBA,UAAU2M,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.22b1e5f4.chunk.js","sourcesContent":["export enum HTTPMethods {\n  DELETE = \"DELETE\",\n  GET = \"GET\",\n  HEAD = \"HEAD\",\n  PATCH = \"PATCH\",\n  POST = \"POST\",\n  PUT = \"PUT\",\n};\n\nexport enum HTTPHeaders {\n  \"A-IM\" = \"A-IM\",\n  Accept = \"Accept\",\n  \"Accept-Charset\" = \"Accept-Charset\",\n  \"Accept-Datetime\" = \"Accept-Datetime\",\n  \"Accept-Encoding\" = \"Accept-Encoding\",\n  \"Accept-Language\" = \"Accept-Language\",\n  \"Access-Control-Request-Method\" = \"Access-Control-Request-Method\",\n  \"Access-Control-Request-Headers\" = \"Access-Control-Request-Headers\",\n  Authorization = \"Authorization\",\n  Authentication = \"Authentication\",\n  \"Cache-Control\" = \"Cache-Control\",\n  \"Content-Length\" = \"Content-Length\",\n  \"Content-MD5\" = \"Content-MD5\",\n  \"Content-Type\" = \"Content-Type\",\n  Cookie = \"Cookie\",\n  Date = \"Date\",\n  Expect = \"Expect\",\n  Forwarded = \"Forwarded\",\n  From = \"From\",\n  Host = \"Host\",\n  \"HTTP2-Settings\" = \"HTTP2-Settings\",\n  \"If-Match\" = \"If-Match\",\n  \"If-Modified-Since\" = \"If-Modified-Since\",\n  \"If-None-Match\" = \"If-None-Match\",\n  \"If-Range\" = \"If-Range\",\n  \"If-Unmodified-Since\" = \"If-Unmodified-Since\",\n  \"Max-Forwards\" = \"Max-Forwards\",\n  Pragma = \"Pragma\",\n  \"Proxy-Authorization\" = \"Proxy-Authorization\",\n  Range = \"Range\",\n  Referer = \"Referer\",\n  TE = \"TE\",\n  Upgrade = \"Upgrade\",\n  \"User-Agent\" = \"User-Agent\",\n  Via = \"Via\",\n  Warning = \"Warning\",\n}\n\nexport enum DataType {\n  FORM = \"form\",\n  JSON = \"json\",\n  GQL = \"graphQL\",\n}\n\nexport enum OutputType {\n  CURL = \"curl\",\n}\n\nexport enum InputTypes {\n  BUTTON = \"button\",\n  CHECKBOX = \"checkbox\",\n  COLOR = \"color\",\n  DATE = \"date\",\n  DATETIME_LOCAL = \"datetime-local\",\n  EMAIL = \"email\",\n  FILE = \"file\",\n  HIDDEN = \"hidden\",\n  IMAGE = \"image\",\n  MONTH = \"month\",\n  NUMBER = \"number\",\n  PASSWORD = \"password\",\n  RADIO = \"radio\",\n  RANGE = \"range\",\n  RESET = \"reset\",\n  SEARCH = \"search\",\n  SUBMIT = \"submit\",\n  TEL = \"tel\",\n  TEXT = \"text\",\n  TIME = \"time\",\n  URL = \"url\",\n  WEEK = \"week\",\n}\n\nexport enum ColumnCount {\n  ONE = 'one column',\n  TWO = 'two columns',\n  THREE = 'three columns',\n  FOUR = 'four columns',\n  FIVE = 'five columns',\n  SIX = 'six columns',\n  SEVEN = 'seven columns',\n  EIGHT = 'eight columns',\n  NINE = 'nine columns',\n  TEN =  'ten columns',\n  ELEVEN = 'eleven columns',\n  TWELVE = 'twelve columns',\n}\n\nexport enum JsonValueTypes {\n  NUMBER = 'number',\n  DATE = 'date',\n  BOOLEAN = 'boolean',\n  URL = 'url',\n  STRING = 'string',\n}\n","import React from 'react';\n\ninterface selectProps {\n  className?: string;\n  isDisabled?: boolean;\n  label?: string;\n  name?: string;\n  onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n  selected?: string | string[] | null;\n  style?: {[key: string]: string};\n  values: string[];\n  isMultiple?: boolean;\n  size?: number;\n}\n\nconst Select: React.FunctionComponent<selectProps> = (props) => {\n  const selected = props.selected || '';\n  return (\n    <>\n    { props.label && (<label>{props.label}</label>) }\n    <select\n      className={props.className || ''}\n      name={props.name || ''}\n      size={props.size || 0}\n      style={props.style || {}}\n      disabled={props.isDisabled || false}\n      multiple={props.isMultiple || false}\n      onChange={props.onChange || null}\n      value={selected}>\n      <option value=\"\" disabled>Please Select</option>\n      {props.values.map((value: string, i:number) => (\n        <option\n          value={value}\n          key={`${value}_${i}`}>\n          {value}\n        </option>\n      ))}\n    </select>\n    </>\n  );\n}\n\nexport default Select;\n","import React from 'react';\n\nimport Select from '../../shared/Select';\n\nimport './css/Method.css'\n\nimport {\n  ColumnCount,\n  HTTPMethods,\n} from '../../../enums/';\n\ninterface methodProps {\n  onUpdate: (value: HTTPMethods) => void;\n  selected: HTTPMethods;\n  width: ColumnCount;\n};\n\nconst Method: React.FunctionComponent<methodProps> = (props) => {\n\n  const updateSelected = (\n    e: React.ChangeEvent<HTMLSelectElement>,\n  ): void => {\n    const value: HTTPMethods = e.target.value as HTTPMethods;\n    props.onUpdate(value);\n  }\n\n  return (\n    <div className={props.width}>\n      <Select\n        className=\"u-full-width Method\"\n        label=\"HTTP Method\"\n        onChange={updateSelected}\n        selected={props.selected}\n        values={Object.values(HTTPMethods)} />\n    </div>\n  );\n}\n\nexport default Method;\n","import React from 'react';\nimport {parse, print, OperationDefinitionNode} from 'graphql';\n\nimport Button from '../../shared/Button';\nimport Copy from '../../shared/Copy';\nimport Saving from '../../shared/Saving';\nimport TextArea from '../../shared/TextArea';\nimport Type from './type/Type';\n\nimport './css/GraphQL.css';\n\nimport {gqlPayloadType} from '../Data';\n\nexport enum GraphQLType {\n  QUERY = 'query',\n  MUTATION = 'mutation',\n}\n\ninterface ParsedGQL {\n  gql: string;\n  type: GraphQLType;\n}\n\ninterface GraphQLProps {\n  data: gqlPayloadType;\n  onUpdateData: (value: gqlPayloadType) => void;\n}\n\ninterface GraphQLState {\n  draft: string;\n  isSaved: boolean;\n  type: GraphQLType;\n}\n\nexport default class GraphQL extends React.PureComponent<GraphQLProps, GraphQLState> {\n\n  constructor(props: GraphQLProps) {\n    super(props);\n    const gql = GraphQL.getDocAndTypeFromGQLString(props.data.query);\n    this.state = {\n      draft: gql.gql,\n      isSaved: true,\n      type: gql.type,\n    }\n  }\n\n  static getDocAndTypeFromGQLString(\n    gql: string\n  ): ParsedGQL {\n    const doc = parse(gql);\n    const def: OperationDefinitionNode = doc.definitions[0] as OperationDefinitionNode;\n    const type = def.operation as GraphQLType;\n    return {\n      gql: print(doc),\n      type\n    };\n  }\n\n  static getDerivedStateFromProps(newProps: GraphQLProps, state: GraphQLState): GraphQLState {\n    if (newProps.data.query !== state.draft && !state.isSaved) {\n      return state;\n    }\n    try {\n      const gql = GraphQL.getDocAndTypeFromGQLString(newProps.data.query);\n      return {\n        draft: newProps.data.query,\n        isSaved: true,\n        type: gql.type,\n      };\n\n    } catch (e) {\n      return state;\n    }\n  }\n\n  updateGraphQL = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const draft = e.target.value;\n    try {\n      const gql = GraphQL.getDocAndTypeFromGQLString(draft);\n      if (gql.gql !== this.state.draft) {\n        this.props.onUpdateData(\n          // replace any existing operation with an empty string\n          {query: draft}\n        );\n        this.setState({isSaved: true});\n      } else {\n        this.setState({\n          draft,\n          isSaved:false,\n        });\n      }\n    } catch (_) {\n      this.setState({\n        draft,\n        isSaved: false,\n      });\n    }\n\n\n  }\n\n  updateType = (type: GraphQLType): void => {\n    this.props.onUpdateData(\n      {query: type +  ' ' + this.state.draft.replace(this.state.type, '')},\n    );\n  }\n\n  pretty = () => {\n    this.props.onUpdateData(\n      {query: this.state.type + ' ' + GraphQL.PrettyMe(this.state.draft).replace(this.state.type, '')},\n    );\n  }\n\n  static PrettyMe(gql: string): string {\n    try {\n      return print(parse(gql));\n    } catch (_) {\n      return gql;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"GraphQL\">\n        <div className=\"row\">\n          <div className=\"six columns\">\n            <Saving isSaved={this.state.isSaved} label=\"GraphQL\" />\n          </div>\n          <div className=\"two columns\">\n            <Type\n              className=\"u-full-width\"\n              selected={this.state.type}\n              onUpdate={this.updateType} />\n          </div>\n          <div className=\"two columns\">\n            <Button\n              className=\"u-full-width\"\n              label=\"Pretty\"\n              onClick={this.pretty}\n              isDisabled={!this.state.isSaved}\n              isPrimary={false} />\n          </div>\n          <div className=\"two columns\">\n            <Copy\n              className=\"u-pull-right\"\n              content={GraphQL.PrettyMe(this.state.draft)}\n              label={`Copy GQL data` } />\n          </div>\n        </div>\n        <div className=\"row\">\n          <TextArea\n            isFullWidth={true}\n            onChangeDirect={this.updateGraphQL}\n            ref=\"input_gql\"\n            value={this.state.draft} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport Select from '../../../shared/Select';\n\nimport './css/Types.css';\n\nimport {HTTPHeaders} from '../../../../enums';\n\ninterface TypeProps {\n  index: number;\n  isFullWidth: boolean;\n  values: (HTTPHeaders | string)[];\n  selected: HTTPHeaders | string;\n  onUpdate: (value: HTTPHeaders, index: number) => void;\n}\n\nconst Types: React.FunctionComponent<TypeProps> = (props) => {\n  const updateSelected = (\n    e: React.ChangeEvent<HTMLSelectElement>,\n  ): void => {\n    const value: HTTPHeaders = e.target.value as HTTPHeaders;\n    props.onUpdate(value, props.index);\n  }\n\n  return (\n    <Select\n      className={(props.isFullWidth ? 'u-full-width' : '') + ' Types'}\n      onChange={updateSelected}\n      selected={props.selected}\n      values={props.values} />\n  );\n}\n\nexport default Types;\n","// Import React\nimport React from 'react';\n\n// Import Enums\nimport {InputTypes} from '../../enums';\n\n// Define Interfaces\ninterface InputProps {\n  className?: string;\n  isDisabled?: boolean;\n  label?: string;\n  name?: string;\n  id?: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  placeholder?: string;\n  type?: InputTypes;\n  value?: string;\n}\n\n// Input Component\nconst Input: React.FunctionComponent<InputProps> = (props) => (\n  <>\n  { props.label && (<label>{props.label}</label>) }\n  <input\n    type={props.type || InputTypes.TEXT}\n    className={props.className || ''}\n    name={props.name || ''}\n    id={props.id || ''}\n    value={props.value || ''}\n    disabled={props.isDisabled || false}\n    onChange={props.onChange}\n     />\n  </>\n);\n\nexport default Input;\n","import React from 'react';\n\nimport Input from '../../../shared/Input'\n\nimport './css/Value.css'\n\ninterface ValueProps {\n  index: number;\n  isFullWidth: boolean;\n  value: string;\n  onUpdate: (value: string, index: number) => void;\n}\n\nconst Value: React.FunctionComponent<ValueProps> = (props) => {\n  const updateValue = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    props.onUpdate(e.target.value, props.index);\n  }\n\n  return (\n    <Input\n      className={(props.isFullWidth ? 'u-full-width' : '') + ' Value'}\n      onChange={updateValue}\n      value={props.value} />\n  );\n}\n\nexport default Value;\n","import React from 'react';\n\nimport Types from './type/Types';\nimport Value from './value/Value';\n\nimport './css/Headers.css';\n\nimport {\n  ColumnCount,\n  HTTPHeaders,\n} from '../../../enums';\n\nexport interface Header {\n  type: HTTPHeaders | string;\n  value: string;\n};\n\ninterface HeadersProps {\n  onUpdate: (value: Header | null, index: number) => void;\n  selected: Header[];\n  width: ColumnCount,\n}\n\n\nconst Headers: React.FunctionComponent<HeadersProps> = (props) => {\n\n  const updateType = (type: HTTPHeaders, index: number): void => {\n    const header = props.selected[index];\n    header.type = type;\n    props.onUpdate(header, index);\n  }\n\n  const updateValue = (value: string, index: number): void => {\n    const header = props.selected[index];\n    header.value = value;\n    props.onUpdate(header, index);\n  }\n\n  const addHeader = (e: React.MouseEvent<HTMLElement>): void => {\n    e.preventDefault();\n    // create a pending header, add this to the end of the index\n    props.onUpdate(\n      {\n        type: '',\n        value: '',\n      },\n      props.selected.length,\n    );\n  }\n\n  const removeHeader = (e: React.MouseEvent<HTMLElement>): void => {\n    e.preventDefault();\n    const index = e.currentTarget.id.split('_').pop();\n\n    if (index === undefined) {\n      // oh no...\n      return;\n    }\n    props.onUpdate(null, parseInt(index));\n  }\n\n  // Don't allow duplicate headers. \n  const selected = props.selected.map(header => header.type);\n  const values = Object.values(HTTPHeaders).filter(header => !selected.includes(header));\n\n  return (\n\n    <div className={props.width + ' Headers'}>\n      <div className=\"row\">\n        <div className=\"twelve rows\">\n          <label> HTTP Headers </label>\n        </div>\n      </div>\n\n        {\n          props\n            .selected\n            .map(\n              (header: Header, index: number) => (\n\n                <div className=\"row\" key={`${header.type}_${index}`}>\n                {\n                  // TODO: selected and values aren't behaving below\n                }\n                  <div className=\"two columns\">\n                    <button\n                      className='u-full-width'\n                      onClick={removeHeader}\n                      id={`remove_${index}`}>\n                      Remove\n                    </button>\n                  </div>\n                  <div className=\"four columns\">\n                    <Types\n                      index={index}\n                      isFullWidth={true}\n                      values={[...values, header.type]}\n                      selected={header.type}\n                      onUpdate={updateType} />\n                  </div>\n                  <div className=\"four columns\">\n                    <Value\n                      index={index}\n                      isFullWidth={true}\n                      value={header.value || ''}\n                      onUpdate={updateValue} />\n                  </div>\n                  <div className=\"two columns\">\n                    <button\n                      className='u-full-width'\n                      onClick={addHeader}>\n                      Add\n                    </button>\n                  </div>\n                </div>\n            )\n          )\n        }\n        {\n          props.selected.length === 0 && (\n            <div className=\"row\">\n              <button\n                className='u-full-width'\n                onClick={addHeader}>\n                Click to add header\n              </button>\n            </div>\n          )\n        }\n    </div>\n  );\n}\n\nexport default Headers;\n","import React from 'react';\n\nimport Input from '../../../shared/Input'\n\nimport './css/Domain.css';\n\nimport {InputTypes} from '../../../../enums';\n\ninterface DomainProps {\n  isFullWidth: boolean;\n  value: string;\n  onUpdate: (value: string) => void;\n}\n\nconst Domain: React.FunctionComponent<DomainProps> = (props) => {\n  const updateValue = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    props.onUpdate(e.target.value);\n  }\n\n  return (\n    <Input\n      className={(props.isFullWidth ? 'u-full-width' : '') + ' Domain'}\n      onChange={updateValue}\n      type={InputTypes.URL}\n      value={props.value} />\n  );\n}\n\nexport default Domain;\n","import React from 'react';\n\nimport Input from '../../../shared/Input'\n\nimport './css/Endpoint.css';\n\ninterface EndpointProps {\n  isFullWidth: boolean;\n  value: string;\n  onUpdate: (value: string) => void;\n}\n\nconst Endpoint: React.FunctionComponent<EndpointProps> = (props) => {\n  const updateValue = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    ;\n    props.onUpdate(e.target.value);\n  }\n\n  ;\n  return (\n    <Input\n      className={(props.isFullWidth ? 'u-full-width' : '') + ' Endpoint'}\n      onChange={updateValue}\n      value={props.value} />\n  );\n}\n\nexport default Endpoint;\n","import React from 'react';\n\nimport Domain from './domain/Domain';\nimport Endpoint from './endpoint/Endpoint';\n\nimport './css/Destination.css';\n\nimport {ColumnCount} from '../../../enums';\n\ntype DomainOrEndpoint = 'domain' | 'endpoint';\n\ninterface DestinationProps {\n  onUpdate: (domain: string, endpoint: string) => void;\n  domain: string;\n  endpoint: string;\n  width: ColumnCount;\n}\n\nconst Destination: React.FunctionComponent<DestinationProps> = (props) => {\n\n  const onUpdate = (value: string, type: DomainOrEndpoint): void => {\n    ;\n    props.onUpdate(\n      (type === 'domain') ? value : props.domain,\n      (type === 'endpoint') ? value : props.endpoint,\n    );\n  }\n\n  const onUpdateDomain = (domain: string): void => {\n    onUpdate(domain, 'domain');\n  }\n\n  const onUpdateEndpoint = (endpoint: string): void => {\n    onUpdate(endpoint, 'endpoint');\n  }\n\n  ;\n  return (\n    <div className={props.width + ' Destination'}>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n        <label> Destination </label>\n        </div>\n      </div>\n      <div className=\"row\">\n          <div className=\"six columns\">\n            <Domain\n              isFullWidth={true}\n              onUpdate={onUpdateDomain}\n              value={props.domain} />\n          </div>\n          <div className=\"six columns\">\n            <Endpoint\n              isFullWidth={true}\n              onUpdate={onUpdateEndpoint}\n              value={props.endpoint} />\n          </div>\n        </div>\n      </div>\n  );\n}\n\nexport default Destination;\n","import React from 'react';\n\nimport Method from './method/Method';\nimport Headers, { Header } from './headers/Headers';\nimport Destination from './destination/Destination';\n\nimport {\n  ColumnCount,\n  HTTPMethods,\n} from '../../enums';\n\nexport interface ConfigData {\n  method: HTTPMethods;\n  headers: Header[];\n  domain: string;\n  endpoint: string;\n}\n\ninterface ConfigProps {\n  data: ConfigData;\n  updateConfig: (data: ConfigData) => void;\n}\n\nconst Config: React.FunctionComponent<ConfigProps> = (props) => {\n  const updateMethod = (value: HTTPMethods) => {\n\n    const data = props.data;\n    data.method = value;\n    props.updateConfig(data);\n  }\n\n  const updateHeaders = (value: Header | null, index: number): void => {\n\n    const data = props.data;\n    if (!data.headers[index] && value) {\n      data.headers.push(value);\n    } else {\n      if (!value) {\n        delete data.headers[index];\n        ;\n        data.headers = data.headers.filter(header => header);\n        ;\n      } else {\n        data.headers[index] = value;\n      }\n    }\n    props.updateConfig(data);\n  }\n\n  const updateDestination = (domain: string, endpoint: string) => {\n\n    const data = props.data;\n    data.domain = domain;\n    data.endpoint = endpoint;\n    props.updateConfig(data);\n  }\n\n  return (\n    <>\n      <div className=\"row\">\n        <Headers\n          onUpdate={updateHeaders}\n          selected={props.data.headers}\n          width={ColumnCount.TWELVE} />\n      </div>\n      <div className=\"row\">\n      <Method\n        selected={props.data.method}\n        width={ColumnCount.TWO}\n        onUpdate={updateMethod} />\n      <Destination\n        onUpdate={updateDestination}\n        domain={props.data.domain}\n        endpoint={props.data.endpoint}\n        width={ColumnCount.TEN} />\n      </div>\n    </>\n  );\n}\nexport default Config;\n","import React from 'react';\n\ninterface ButtonProps {\n  className?: string;\n  isDisabled?: boolean;\n  isPrimary: boolean;\n  label: string;\n  onClick: () => void;\n}\n\nconst Button: React.FunctionComponent<ButtonProps> = (props) => {\n  const clickHandler = (e: React.MouseEvent) => {\n    e.preventDefault();\n    props.onClick();\n  }\n\n  return (\n    <input\n      type=\"button\"\n      className={(props.isPrimary ? 'button-primary ' : ' ') + props.className || ' '}\n      disabled={props.isDisabled}\n      onClick={clickHandler}\n      value={props.label} />\n  );\n}\n\nexport default Button;\n","import React from 'react';\n\nimport Button from './Button';\n\ninterface CopyProps {\n  className?: string;\n  label?: string;\n  content: string;\n}\n\nconst Copy: React.FunctionComponent<CopyProps> = (props) => {\n\n  const copy = async () => {\n    await navigator.clipboard.writeText(props.content);\n  }\n\n  return (\n    <Button\n      className={props.className || ''}\n      isPrimary={false}\n      label= {props.label || \"Copy\"}\n      onClick={copy} />\n  )\n}\n\nexport default Copy;\n","import React from 'react';\nimport { CSSTransitionGroup } from 'react-transition-group';\n\nimport './css/Saving.css';\n\ninterface SavingProps {\n  className?: string;\n  label?: string;\n  isSaved: boolean;\n}\n\nconst Saving: React.FunctionComponent<SavingProps> = (props) => {\n\n  return (\n    <CSSTransitionGroup\n      transitionName=\"save-notice\"\n      transitionLeave={false}\n      transitionEnter={true}\n      transitionEnterTimeout={500}>\n      <div\n        className={\n          ((props.isSaved) ? 'Saved' : 'NotSaved')\n          +  \" Notice \"\n          + (props.className || '')\n        }\n        key={\"notice-\" + props.isSaved}>\n        {props.isSaved ? `Saved ${props.label}`  : `${props.label} Not Saved`}\n      </div>\n    </CSSTransitionGroup>\n  )\n}\n\nexport default Saving;\n","import React from 'react';\n\ninterface TextAreaProps {\n  className?: string\n  isFullWidth: boolean\n  onChangeDirect?: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  onUpdate?: (value: string) => void;\n  style?: {\n    [key: string]: string,\n  };\n  value: string;\n}\n\ninterface TextAreaState {}\n\nexport default class TextArea extends React.Component<TextAreaProps, TextAreaState> {\n\n  constructor(props: TextAreaProps) {\n    super(props);\n    this.state = {};\n  }\n\n  onUpdate = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    if (this.props.onChangeDirect) {\n      this.props.onChangeDirect(e);\n    } else if (this.props.onUpdate) {\n      this.props.onUpdate(e.target.value);\n    }\n  }\n\n  render () {\n    return (\n      <textarea\n        className={((this.props.isFullWidth) ? 'u-full-width ' : ' ') + this.props.className || '' }\n        onChange={this.onUpdate}\n        style={this.props.style || {}}\n        value={this.props.value}>\n      </textarea>\n    );\n  }\n}\n","import React from 'react';\n\nimport Select from '../../../shared/Select';\n\nimport './css/Type.css';\n\nimport {GraphQLType} from '../GraphQL';\n\ninterface TypeProps {\n  className?: string;\n  selected: GraphQLType;\n  onUpdate: (type: GraphQLType) => void;\n}\n\nconst Type: React.FunctionComponent<TypeProps> = (props) => {\n  const updateSelected = (\n    e: React.ChangeEvent<HTMLSelectElement>,\n  ): void => {\n    const value: GraphQLType = e.target.value as GraphQLType;\n    props.onUpdate(value);\n  }\n\n  return (\n    <Select\n      className={(props.className || '') + \" Type\"}\n      onChange={updateSelected}\n      selected={props.selected}\n      values={Object.values(GraphQLType)} />\n  );\n}\n\nexport default Type\n","/**\n * @file Curl component\n * @author Mattamorphic\n */\nimport React from 'react';\n\n// Imported components\nimport Button from '../../shared/Button';\nimport Copy from '../../shared/Copy';\nimport Saving from '../../shared/Saving';\nimport TextArea from '../../shared/TextArea';\n\n// CSS imports\nimport './css/Json.css';\n\n// Type imports\nimport {payloadType} from '../Data';\n\ninterface JsonProps {\n  data: payloadType;\n  onUpdateData: (value: payloadType) => void;\n}\n\ninterface JsonState {\n  draft: string;\n  hasDraft: boolean;\n}\n\nexport default class Json extends React.PureComponent<JsonProps, JsonState> {\n\n  constructor(props: JsonProps) {\n    super(props);\n    this.state = {\n      draft: JSON.stringify(props.data, null, 2),\n      hasDraft: false,\n    };\n  }\n\n  /**\n   * @function We have to update the state based on the props, this needs removing\n   *\n   * @param {JsonProps} newProps The new received props\n   * @param {JsonState} state    The current state\n   *\n   * @return {JsonState}\n   */\n  static getDerivedStateFromProps(newProps: JsonProps, state: JsonState): JsonState {\n    let draft = '';\n    let hasDraft = state.hasDraft;\n    try {\n      // if we can parse the draft it must be valid\n      JSON.parse(state.draft);\n      draft = hasDraft ? state.draft : JSON.stringify(newProps.data);\n      hasDraft = false;\n    } catch (_) {\n      draft = state.draft;\n      hasDraft = true;\n    }\n    return {\n      hasDraft,\n      draft,\n    };\n  }\n\n  /**\n   * @function Update the data from the json string\n   *\n   * @param {string} value The possible json string\n   */\n  updateJson = (value: string) => {\n    console.log(value);\n    this.setState({\n      draft: value,\n      hasDraft: true\n    });\n    try {\n      const object = JSON.parse(value);\n      this.props.onUpdateData(object);\n    } catch (_) {}\n  }\n\n  /**\n   * @function Pretty print the json in the state\n   */\n  pretty = () => {\n    try {\n      this.updateJson(JSON.stringify(JSON.parse(this.state.draft), null, 2));\n    } catch (_) {\n      return;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Json\">\n        <div className=\"row\">\n          <div className=\"six columns\">\n            <Saving isSaved={!this.state.hasDraft} label=\"Json\" />\n          </div>\n          <div className=\"four columns\">\n            <Button className=\"u-pull-right\" label=\"Pretty\" onClick={this.pretty} isPrimary={false} />\n          </div>\n          <div className=\"two columns\">\n            <Copy\n              className=\"u-pull-right\"\n              content={this.state.draft}\n              label={`Copy JSON data` } />\n          </div>\n        </div>\n        <div className=\"row\">\n          <TextArea\n            isFullWidth={true}\n            onUpdate={this.updateJson}\n            value={this.state.draft} />\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react';\n\nimport Select from '../../shared/Select';\n\nimport './css/Selector.css';\n\nimport {DataType} from '../../../enums';\n\ninterface SelectorProps {\n  className?: string;\n  selected: DataType;\n  onUpdate: (value: DataType) => void;\n}\n\nconst Selector: React.FunctionComponent<SelectorProps> = (props) => {\n  const updateSelected = (\n    e: React.ChangeEvent<HTMLSelectElement>,\n  ): void => {\n    const value: DataType = e.target.value as DataType;\n    props.onUpdate(value);\n  }\n\n  return (\n    <Select\n      className={(props.className || '') + \" Selector\"}\n      onChange={updateSelected}\n      selected={props.selected}\n      values={Object.values(DataType)} />\n  );\n}\n\nexport default Selector;\n","import React from 'react';\n\nimport GraphQL from './graphql/GraphQL';\nimport Json from './json/Json';\nimport Selector from './selector/Selector';\n\nimport './css/Data.css';\n\nimport {\n  DataType,\n} from '../../enums';\n\nexport type payloadType = {[key: string]: any}\nexport type gqlPayloadType = {query: string}\n\nexport interface DataData {\n  type: DataType;\n  data: {\n    [DataType.JSON]: payloadType;\n    [DataType.GQL]: gqlPayloadType;\n    [DataType.FORM]: null;\n  }\n}\n\ninterface DataProps {\n  data: DataData;\n  updateData: (data: DataData) => void;\n}\n\nconst Data: React.FunctionComponent<DataProps> = (props) => {\n  const updateType = (value: DataType) => {\n    const data = props.data;\n    data.type = value;\n    props.updateData(data);\n  }\n\n  const updateJsonData = (value: payloadType) => {\n    const data = props.data;\n    data.data.json = value;\n    props.updateData(data);\n  }\n\n  const updateGraphQLData = (value: gqlPayloadType) => {\n    const data = props.data;\n    data.data.graphQL = value\n    props.updateData(data);\n  }\n\n  return (\n    <div className=\"Data\">\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n          <label> Data </label>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n          <Selector\n            className=\"u-full-width\"\n            selected={props.data.type}\n            onUpdate={updateType} />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n        {\n          props.data.type === DataType.JSON\n            && (<Json data={props.data.data.json} onUpdateData={updateJsonData} />)\n        }\n        {\n          props.data.type === DataType.GQL\n            && (<GraphQL\n              data={props.data.data.graphQL}\n              onUpdateData={updateGraphQLData} />)\n        }\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default Data;\n","import React from 'react';\n\nimport './css/Heading.css'\n\ninterface HeadingProps {\n  imageSrc: string;\n}\n\nconst Heading: React.FunctionComponent<HeadingProps> = (props) => {\n  return (\n    <div className=\"Heading\">\n      <img src={props.imageSrc} alt=\"curlify logo\" />\n\n    </div>\n  );\n}\n\nexport default Heading;\n","import {parse} from 'graphql';\n\nimport {HTTPMethods} from '../enums';\n\nexport const methodHasPayload = (method: HTTPMethods) => (\n  ![HTTPMethods.GET, HTTPMethods.HEAD]\n    .includes(method)\n)\n\n\nexport const regEx = {\n  url: /(http(?:s)?(?::\\/\\/)+[www]{0,1}.?(?:[\\w-.])*.[a-zA-Z]{2,3})\\/?(\\/[^\\s\\b\\n|]*[^.,;:?!@^$ -]{0,})/gim,\n  curlHeader: /(?:-H \")([\\w\\d]{1,})(?:\\s{0,}:\\s{0,})(.+?)(?=\")/gim,\n  curlMethod: /(?:-X\\s{0,})(\\w{3,6})/gim,\n  // Todo: convert to /gms https://github.com/babel/babel/pull/10347\n  curlData: /(?:-d\\s{0,}'|\")({.*})(?=['|\"])/gim,\n  newLine: /[\\r|\\n]/gm,\n  newLineAndTab: /[\\n|\\r|\\t]/gm,\n  multipleSpaces: / +/gm,\n}\n\n\nexport const isValidMethod = (string: string): boolean => (\n  Object\n  .values(HTTPMethods)\n  .includes(string)\n)\n\nexport const isValidURL = (domain: string, endpoint: string): boolean => {\n  const url = domain + '/' + endpoint;\n  const possUrl = (url).match(regEx.url);\n  return (!possUrl || possUrl[0] !== url) ? false : true;\n}\n\nexport const isValidHeaders = (_: []): boolean => (\n  true\n)\n\nexport const isValidJsonString = (json: string) => {\n  try {\n    JSON.parse(json);\n    return true;\n  } catch (_) {\n    return false;\n  }\n}\n\nexport const isValidGraphQLString = (gql: string) => {\n  try {\n    parse(gql);\n    return true;\n  } catch (_) {\n    return false;\n  }\n}\n","/**\n * @file Curl component\n * @author Mattamorphic\n */\nimport React from 'react';\n\n// Imported components\nimport Copy from '../../shared/Copy';\nimport Saving from '../../shared/Saving';\nimport TextArea from '../../shared/TextArea';\n\n// Resuable helper functions / objects\nimport * as utils from '../../../utils';\n\n// Imported types / interfaces\nimport {ConfigData} from '../../config/Config';\nimport {DataData, payloadType} from '../../data/Data';\nimport {Header} from '../../config/headers/Headers';\n\n// CSS imports\nimport './css/Curl.css';\n\n// Enum imports\nimport {\n  DataType,\n  HTTPHeaders,\n  HTTPMethods,\n} from '../../../enums';\n\ninterface DomainAndEndpoint {\n  domain: string | null;\n  endpoint: string | null;\n}\n\ninterface SerializedCurl {\n  config: ConfigData;\n  data: DataData;\n  hasNewData: boolean;\n  hasNewConfig: boolean;\n}\n\ninterface CurlProps {\n  config: ConfigData;\n  data: DataData;\n  updateConfig: (data: ConfigData) => void;\n  updateData: (data: DataData) => void;\n}\n\ninterface CurlState {\n  draft: string;\n  hasDraft: boolean;\n}\n\nexport default class Curl extends React.Component<CurlProps, CurlState>  {\n\n  constructor(props: CurlProps) {\n    super(props);\n    this.state = {\n      draft: Curl.getValue(props.config, props.data),\n      hasDraft: false,\n    };\n  }\n\n\n  static getDerivedStateFromProps(newProps: CurlProps, state: CurlState): CurlState {\n    const draft = (state.hasDraft)\n      ? state.draft\n      : Curl.getValue(newProps.config, newProps.data);\n\n    return {\n      hasDraft: state.hasDraft,\n      draft,\n    };\n  }\n\n  /**\n   * @function Get the headers from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {Header[] | null}\n   */\n  getHeaders(value: string): Header[] | null {\n    const regex = utils.regEx.curlHeader;\n    const headers = [];\n    let match = null;\n    while (match = regex.exec(value)) {\n      headers.push({\n        type: match[1] as HTTPHeaders,\n        value: match[2] as string,\n      });\n    }\n    if (headers.length === 0) {\n      return null;\n    }\n    return headers;\n  }\n\n  /**\n   * @function Get the method from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {HTTPMethods | null}\n   */\n  getMethod(value: string): HTTPMethods | null {\n    const regex = utils.regEx.curlMethod;\n    if (!value.match(regex)) {\n      return null;\n    }\n    const match = regex.exec(value);\n    if (!match) {\n      return null;\n    }\n    return match[1] as HTTPMethods;\n  }\n\n  /**\n   * @function Get the data from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {payloadType | null}\n   */\n  getData(value: string): payloadType | null {\n    const regex = utils.regEx.curlData;\n    if (!value.match(regex)) {\n      return null;\n    }\n    const match = regex.exec(value);\n    if (!match) {\n      return null;\n    }\n    try {\n      return JSON.parse(match[1]);\n    } catch (_) {\n      return null;\n    }\n  }\n\n  /**\n   * @function Get the domain and endpoint from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {DomainAndEndpoint | null}\n   */\n  getDomainAndEndpoint(value: string): DomainAndEndpoint | null {\n    const regex = utils.regEx.url;\n    if (!value.match(regex)) {\n      return null;\n    }\n    const match = regex.exec(value);\n    if (!match) {\n      return null;\n    }\n    return {\n      domain: match[1] || null,\n      endpoint: match[2] || null,\n    };\n  }\n\n  /**\n   * @function Serialize a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {SerializedCurl}\n   */\n  serializerCurl = (value: string): SerializedCurl => {\n    // Get the current values\n    const config = this.props.config;\n    const data = this.props.data;\n\n    let hasNewConfig = false;\n    let hasNewData = false;\n\n    // Only update if we have a match :)\n\n     // decide which method to use\n    const method = this.getMethod(value);\n\n    // decide which headers to use\n    const headers = this.getHeaders(value);\n\n    // decide which data to use\n    const newData = this.getData(value);\n\n    // decide which domain and endpoint to use\n    const domainAndEndpoint = this.getDomainAndEndpoint(value);\n\n    console.log(config.method, method);\n    if (\n      method\n      && method !== config.method\n      && Object.values(HTTPMethods).includes(method)\n    ) {\n      hasNewConfig = true;\n      config.method = method;\n    }\n\n    // Todo - this needs to actually check the headers\n    if (headers && config.headers.length !== config.headers.length) {\n      hasNewConfig = true;\n      config.headers = headers;\n    }\n    if (newData && JSON.stringify(newData) !== JSON.stringify(data.data[data.type])) {\n      hasNewData = true;\n      switch (data.type) {\n        case DataType.GQL:\n          data.data.graphQL.query = newData.query;\n          break;\n        case DataType.JSON:\n          data.data.json = newData;\n          break;\n        case DataType.FORM:\n          break;\n      }\n    }\n    if (domainAndEndpoint) {\n      if (domainAndEndpoint.domain && domainAndEndpoint.domain !== config.domain) {\n        hasNewConfig = true;\n        config.domain = domainAndEndpoint.domain;\n      }\n      if (domainAndEndpoint.endpoint && domainAndEndpoint.endpoint !== config.endpoint) {\n        hasNewConfig = true;\n        config.endpoint = domainAndEndpoint.endpoint;\n      }\n    }\n    return {\n      config,\n      data,\n      hasNewConfig,\n      hasNewData,\n    };\n  }\n\n  /**\n   * @function Update the data from the curl string\n   *\n   * @param {string} value The curl string\n   */\n  updateCurl = (value: string): void => {\n    const curl = this.serializerCurl(value);\n\n    console.log(curl);\n    if (curl.hasNewData || curl.hasNewConfig) {\n      this.setState({draft: value, hasDraft: false}, () => {\n        curl.hasNewData && this.props.updateData(curl.data);\n        curl.hasNewConfig && this.props.updateConfig(curl.config);\n      });\n    }\n    if (!curl.hasNewData && !curl.hasNewConfig) {\n      this.setState({draft: value, hasDraft: true});\n    }\n  }\n\n  /**\n   * @function Pass the config and data into a curl string\n   *\n   * @params {ConfigData} config The Configuration data for the curl request\n   * @params {DataData}   data   The data for the curl request\n   */\n  static getValue(\n    config: ConfigData,\n    data: DataData,\n  ): string {\n    let payload = {};\n    switch (data.type) {\n      case DataType.JSON:\n        payload = data.data.json;\n        break;\n      case DataType.GQL:\n        payload = data.data.graphQL;\n        break;\n      case DataType.FORM:\n        break;\n    }\n    return \"curl -X \" + config.method + \" \\\\ \\n\"\n       + (config.headers.map(header => \"-H \\\"\" + header.type + \": \" + header.value + \"\\\" \\\\ \\n\").join(''))\n       + ((payload && Object.keys(payload).length > 0 && utils.methodHasPayload(config.method))\n         ? \"-d '\" + Curl.parsePayloadString(JSON.stringify(payload)) + \"' \\\\ \\n\" : '')\n       + config.domain + config.endpoint;\n  }\n\n  /**\n   * @function Parse a string remove new line / tab and remove multiple spaces\n   *\n   * @param {string} value\n   */\n  static parsePayloadString(value: string): string {\n    return value.replace(utils.regEx.newLineAndTab, '').replace(utils.regEx.multipleSpaces, ' ');\n  }\n\n  render () {\n    return (\n      <div className=\"Curl\">\n        <div className=\"row\">\n          <TextArea\n            isFullWidth={true}\n            onUpdate={this.updateCurl}\n            style={{\n              height: \"200px\",\n            }}\n            value={this.state.draft} />\n        </div>\n        <div className=\"row\">\n          <div className=\"ten columns\">\n            <Saving isSaved={!this.state.hasDraft} label=\"Curl\" />\n          </div>\n          <div className=\"two columns\">\n            <Copy\n              className=\"u-pull-right\"\n              content={this.state.draft}\n              label={`Copy Curl data` } />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport {ConfigData} from '../config/Config';\nimport Curl from './curl/Curl';\nimport {DataData} from '../data/Data';\n\nimport './css/Output.css';\n\nimport {OutputType} from '../../enums';\n\ninterface OutputProps {\n  config: ConfigData;\n  data: DataData;\n  output: OutputType;\n  updateConfig: (data: ConfigData) => void;\n  updateData: (data: DataData) => void;\n}\n\nconst Output: React.FunctionComponent<OutputProps> = (props) => {\n  return (\n    <div className=\"Output\">\n      {\n        (props.output === OutputType.CURL) && (\n          <Curl\n            config={props.config}\n            data={props.data}\n            updateConfig={props.updateConfig}\n            updateData={props.updateData} />\n        )\n      }\n    </div>\n  );\n}\n\nexport default Output;\n","/**\n * @file $COMPONENT component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport Button from './Button';\n\nimport './css/Confirm.css';\n\ninterface ConfirmProps {\n  className?: string;\n  label: string;\n  message: string;\n  onConfirm: () => void;\n  onCancel: () => void;\n  isPrimary?: boolean;\n}\n\nconst Confirm: React.FunctionComponent<ConfirmProps> = (props) => {\n\n  const onConfirm = () => {\n    const result = window.confirm(props.message);\n    result ? props.onConfirm() : props.onCancel();\n  }\n\n  return (\n    <Button\n      className={props.className || ''}\n      isPrimary={props.isPrimary || false}\n      label={props.label}\n      onClick={onConfirm} />\n  )\n};\n\nexport default Confirm;\n","import React from 'react';\n\nimport './css/Request.css';\n\nimport Button from '../../shared/Button';\nimport Confirm from '../../shared/Confirm';\n\n\ninterface RequestProps {\n  shouldConfirm: boolean;\n  incompleteData?: string;\n  onRequest: () => void;\n}\n\nconst Request: React.FunctionComponent<RequestProps> = (props) => {\n  const onConfirm = props.onRequest;\n  const onCancel = () => {};\n\n\n  return (\n    <div className=\"row\">\n      <div className=\"Request\">\n        {\n          props.shouldConfirm\n            ? <Confirm\n                className=\"u-full-width\"\n                label=\"Test\"\n                onConfirm={onConfirm}\n                onCancel={onCancel}\n                message=\"Are you sure?\" />\n            :  <Button\n                className=\"u-full-width\"\n                isPrimary={false}\n                label=\"Test\"\n                onClick={props.onRequest} />\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default Request;\n","import React from 'react';\n\nimport Button from './Button';\n\ninterface TogglerProps {\n  className?: string;\n  label: string;\n  onToggle: () => void;\n  isToggled: boolean;\n}\n\nconst Toggler: React.FunctionComponent<TogglerProps> = (props) => {\n\n  return (\n    <div className={props.className || ''}>\n      <div className=\"row\">\n      <Button\n        className=\"u-full-width\"\n        isPrimary={false}\n        label= {(!props.isToggled ? 'Show ' : 'Hide ') + props.label}\n        onClick={props.onToggle} />\n      </div>\n      {\n        props.isToggled && (\n          <div className=\"row\">{props.children}</div>\n        )\n      }\n    </div>\n  )\n}\n\nexport default Toggler;\n","import React from 'react';\nimport ReactDOMServer from 'react-dom/server';\n\nimport Toggler from '../../shared/Toggler';\n\nimport * as utils from '../../../utils';\n\nimport {JsonValueTypes} from '../../../enums';\n\nimport './css/FetchResponse.css';\n\ninterface FetchResponseProps {\n  headers: Headers,\n  json: {[key: string]: any};\n}\n\ninterface FetchResponseState {\n  showHeaders: boolean;\n  showData: boolean;\n}\n\nexport default class FetchResponse extends React.PureComponent<FetchResponseProps, FetchResponseState> {\n\n  constructor(props: FetchResponseProps) {\n    super(props)\n    this.state ={\n      showHeaders: false,\n      showData: false,\n    };\n  }\n\n\n  replacer = (_: string, p1: string, p2: string, p3: string, p4: string) => {\n    const part = { indent: p1, key: p2, value: p3, end: p4 };\n\n    let valueClass = \"json-value\";\n    let type = JsonValueTypes.STRING;\n    if (part.value !== undefined && part.value !== null) {\n      if (!isNaN(parseInt(part.value))) {\n        valueClass = \"json-number\";\n        type = JsonValueTypes.NUMBER;\n      } else if (!isNaN(Date.parse(part.value.replace(/[T|Z]/, ' ')))) {\n        valueClass = \"json-date\";\n        type = JsonValueTypes.DATE;\n      } else if (['true', 'false', 'null', 'nil', 'undefined'].includes(part.value.toLowerCase())) {\n        valueClass = \"json-boolean\";\n        type = JsonValueTypes.BOOLEAN;\n      } else if (part.value.match(utils.regEx.url)) {\n        valueClass = \"json-url\";\n        type = JsonValueTypes.URL;\n      } else {\n        valueClass = \"json-string\";\n        type = JsonValueTypes.STRING;\n      }\n    }\n    return ReactDOMServer.renderToString(\n      <>\n        {\"\\u00a0\".repeat(part.indent.length)}\n        {part.key && <span className=\"json-key\"> {part.key} </span>}\n        {\n          part.value\n          &&\n            <span className={valueClass}>\n              {\n                type === JsonValueTypes.URL\n                  ? (<a href={part.value.replace(/\"/, '')}>{part.value}</a>)\n                  : part.value\n              }\n            </span>\n        }\n        {part.end && <span className=\"json-key\"> {part.end} </span>}\n        <br />\n      </>\n    );\n  }\n\n  toggleHeaders = () => {\n    this.setState(prevState =>({\n      showHeaders: !prevState.showHeaders,\n    }))\n  }\n\n  toggleData = () => {\n    this.setState(prevState =>({\n      showData: !prevState.showData,\n    }))\n  }\n\n  render () {\n    return (\n      <div className=\"FetchResponse\">\n      <Toggler\n        isToggled={this.state.showHeaders}\n        className=\"Headers\"\n        label=\"Headers\"\n        onToggle={this.toggleHeaders}>\n        <table className=\"u-max-full-width\">\n          <thead>\n            <tr>\n              <th> Header </th>\n              <th> Value </th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              Array.from(this.props.headers.keys()).map(\n                (key, index) => (\n                  <tr key={`r_${key}_${index}`}>\n                    <td> {key} </td>\n                    <td> {this.props.headers.get(key)} </td>\n                  </tr>\n                )\n              )\n            }\n          </tbody>\n        </table>\n      </Toggler>\n      <Toggler\n        isToggled={this.state.showData}\n        label=\"Data\"\n        onToggle={this.toggleData}>\n          <div className=\"Data\" dangerouslySetInnerHTML={{__html:\n            JSON.stringify(\n              this.props.json,\n              null,\n              3\n            ).replace(\n              /^( *)(\"[^\"]+\": )?(\"[^\"].*\"|[\\w.+-]*)?([{}[\\],]*)?$/mg,\n              this.replacer\n            )\n        }} />\n      </Toggler>\n    </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport './css/Loading.css';\n\ninterface LoadingProps {\n  className?: string;\n}\n\nconst Loading: React.FunctionComponent<LoadingProps> = (props) => {\n  return (\n    <div className={(props.className || '') + \" LoadingContainer\"}>\n      <div className=\"Loading\">\n        <div />\n      </div>\n      <div>\n        Loading\n      </div>\n    </div>\n  );\n}\n\nexport default Loading;\n","import React from 'react';\n\nimport Request from './request/Request';\nimport FetchResponse from './fetchresponse/FetchResponse';\nimport Loading from '../shared/Loading';\n\nimport './css/Test.css';\n\nimport {ConfigData} from '../config/Config';\nimport {DataData} from '../data/Data';\n\nimport * as utils from '../../utils';\n\nexport interface ValidatePayloadResult {\n  message: string[];\n  success: boolean;\n}\n\ninterface TestProps {\n  config: ConfigData;\n  data: DataData;\n  updateConfig: (data: ConfigData) => void;\n  updateData: (data: DataData) => void;\n  validation: ValidatePayloadResult;\n}\n\ninterface TestState {\n  isLoading: boolean;\n  response: {\n    headers?: Headers,\n    json?: {[key: string]: any},\n  };\n}\n\nclass Test extends React.PureComponent<TestProps, TestState> {\n\n  constructor(props: TestProps) {\n    super(props);\n    this.state = {\n      isLoading: false,\n      response: {}\n    };\n  }\n\n  getFetchData = () => {\n    const fetchData: RequestInit = {\n      method: this.props.config.method,\n      body: null,\n      headers: new Headers(\n        this.props.config.headers.map(header => [header.type, header.value]),\n      ),\n    };\n\n    if (utils.methodHasPayload(this.props.config.method)) {\n      fetchData.body = JSON.stringify(this.props.data.data[this.props.data.type]);\n    }\n    return fetchData;\n  }\n\n  onTest = async () => {\n    this.setState(\n      {isLoading: true},\n      async () => {\n      const dest = new URL(this.props.config.domain + this.props.config.endpoint);\n      const response: Response = await fetch(\n        dest.href,\n        this.getFetchData(),\n      )\n      let json = {};\n      try {\n        json = await response.json();\n      } catch (_) {}\n      this.setState({\n        isLoading: false,\n        response: {\n          headers: response.headers as Headers,\n          json: json,\n        }\n      })\n      }\n    );\n  }\n\n  render () {\n    if (!this.props.validation.success) {\n      return (\n        <div className=\"row\">\n          <div className=\"Test Disabled\">\n            {\n              this.props.validation.message.map(\n                string => <label> {string} </label>,\n              )\n            }\n          </div>\n        </div>\n      )\n    }\n    if (this.state.isLoading) {\n      return (\n        <div className=\"row\">\n          <Loading />\n        </div>\n      );\n    }\n    return (\n      <>\n        <Request\n          shouldConfirm={false} // Todo: We need to ensure that everything matches up\n          onRequest={this.onTest} />\n        {\n          this.state.response.headers && this.state.response.json &&\n          <FetchResponse headers={this.state.response.headers} json={this.state.response.json} />\n        }\n      </>\n    );\n  };\n}\n\nexport default Test;\n","import React from 'react';\nimport Config, {ConfigData} from './components/config/Config';\nimport Data, {DataData} from './components/data/Data';\nimport Heading from './components/heading/Heading';\nimport Output from './components/output/Output';\nimport Test, {ValidatePayloadResult} from './components/test/Test';\n\nimport './css/App.css'\n\nimport * as utils from './utils';\n\nimport {\n  DataType,\n  HTTPMethods,\n  OutputType,\n} from './enums';\n\ninterface OutputState {\n  type: OutputType;\n}\n\ninterface AppState {\n  config: ConfigData;\n  data: DataData;\n  output: OutputState;\n  validation: ValidatePayloadResult;\n}\n\ninterface AppProps {}\n\nexport default class App extends React.Component<AppProps, AppState> {\n\n  onConfigChange = (config: ConfigData): void => {\n    this.setState({\n      config,\n    }, () => this.setState({validation: this.validatePayload()}));\n  }\n\n  onDataChange = (data: DataData) : void => {\n    this.setState({\n      data,\n    }, () => this.setState({validation: this.validatePayload()}));\n  }\n\n  constructor(props: AppProps) {\n    super(props);\n    this.state = {\n      config: {\n        method: HTTPMethods.GET,\n        headers: [],\n        domain: 'https://api.github.com',\n        endpoint: '/users/octocat',\n      },\n      data: {\n        type: DataType.JSON,\n        data: {\n          json: {test: \"value\"},\n          graphQL: {query: \"query {viewer {username}}\"},\n          form: null,\n        },\n      },\n      output: {\n        type: OutputType.CURL,\n      },\n      validation: {\n        message: [],\n        success: true,\n      }\n    }\n  }\n\n  validatePayload = (): ValidatePayloadResult => {\n    console.log(this.state.config, utils.isValidURL(\n      this.state.config.domain,\n      this.state.config.endpoint,\n    ), (this.state.config.domain + '/' + this.state.config.endpoint).match(utils.regEx.url));\n    const result = {\n      message: [] as string[],\n      success: true,\n    };\n    if (!utils.isValidMethod(this.state.config.method)) {\n      result.message.push(\n        `Invalid ${this.state.config.method}, check settings above`,\n      );\n      result.success = false;\n    }\n    // if (!utils.isValidHeaders(this.props.config.headers)) {\n    //\n    // }\n    if (!utils.isValidURL(\n      this.state.config.domain,\n      this.state.config.endpoint,\n    )) {\n      result.message.push(\n        `Invalid URL ${this.state.config.domain} or ${this.state.config.endpoint}, check settings above`,\n      );\n      result.success = false;\n    }\n\n    if (\n      this.state.data.type === DataType.GQL\n      && !utils.isValidGraphQLString(this.state.data.data.graphQL.query)) {\n        result.message.push(\n          `Invalid GraphQL string, check settings above`,\n        );\n        result.success = false;\n      }\n    console.log(result);\n    return result;\n  }\n\n  render () {\n    return (\n      <div className='container App'>\n        <div className=\"row\">\n          <Heading imageSrc={process.env.PUBLIC_URL + '/images/banner.png'} />\n        </div>\n        <div className=\"row\">\n          <Config\n            data={this.state.config}\n            updateConfig={this.onConfigChange} />\n        </div>\n        <div className=\"row\">\n          {\n            utils.methodHasPayload(this.state.config.method) &&\n              (<Data data={this.state.data} updateData={this.onDataChange} />)\n          }\n        </div>\n        <div className=\"row\">\n          <Output\n            config={this.state.config}\n            data={this.state.data}\n            output={this.state.output.type}\n            updateConfig={this.onConfigChange}\n            updateData={this.onDataChange} />\n        </div>\n        <div className=\"row\">\n          <Test\n            validation={this.state.validation}\n            config={this.state.config}\n            data={this.state.data}\n            updateConfig={this.onConfigChange}\n            updateData={this.onDataChange} />\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}