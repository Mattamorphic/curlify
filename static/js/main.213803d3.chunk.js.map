{"version":3,"sources":["serviceWorker.ts","enums/index.tsx","components/data/graphql/GraphQL.tsx","utils/index.ts","components/heading/Heading.tsx","components/shared/Button.tsx","components/shared/Tooltip.tsx","components/shared/Copy.tsx","components/shared/Saving.tsx","components/shared/TextArea.tsx","components/output/curl/Curl.tsx","components/shared/Select.tsx","components/output/selector/Selector.tsx","components/output/Output.tsx","components/shared/Input.tsx","components/config/destination/domain/Domain.tsx","components/config/destination/endpoint/Endpoint.tsx","components/config/destination/Destination.tsx","components/config/method/Method.tsx","components/shared/Toggler.tsx","components/shared/Autocomplete.tsx","components/shared/KeyValueInput.tsx","components/config/headers/Headers.tsx","components/config/queryparams/QueryParams.tsx","components/config/Config.tsx","components/data/graphql/type/Type.tsx","components/data/json/Json.tsx","components/data/selector/Selector.tsx","components/data/Data.tsx","components/history/clearhistory/ClearHistory.tsx","components/history/listhistory/listhistoryentry/loadhistoryentry/LoadHistoryEntry.tsx","components/history/listhistory/listhistoryentry/ListHistoryEntry.tsx","components/history/listhistory/ListHistory.tsx","components/history/History.tsx","components/shared/Table.tsx","components/test/fetchresponse/responseheaders/ResponseHeaders.tsx","components/test/fetchresponse/responsejson/ResponseJson.tsx","components/test/fetchresponse/responseraw/ResponseRaw.tsx","components/test/fetchresponse/FetchResponse.tsx","components/shared/Loading.tsx","components/shared/Notice.tsx","components/shared/Confirm.tsx","components/shared/Checkbox.tsx","components/test/request/proxy/Proxy.tsx","components/test/request/Request.tsx","components/test/Test.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","HTTPMethods","HTTPHeaders","DataType","OutputType","InputTypes","ColumnCount","JsonValueTypes","GraphQLType","methodHasPayload","method","GET","HEAD","includes","PROXY","regEx","curlData","curlHeader","curlMethod","dateTimeZoneChars","jsonData","multipleSpaces","newLine","newLineAndTab","quotes","singleEscapedNewLine","url","isValidMethod","string","Object","values","isValidURL","domain","endpoint","charAt","length","possUrl","isValidHeaders","headers","reduce","_","curr","key","undefined","isValidGraphQLString","gql","parse","isStringANumber","value","isNaN","parseInt","isStringADate","Date","replace","isStringBooleanOrNull","toLowerCase","isStringAURL","isStorageAvailable","storage","x","setItem","removeItem","e","addToHistory","config","data","status","localStorage","keys","i","push","removeKey","sort","shift","id","getTime","toString","item","JSON","stringify","getHistory","requestHistory","getItem","a","b","a_id","b_id","parseURLString","str","uri","URL","params","fromEntries","URLSearchParams","search","origin","pathname","queryParams","map","convertObjToQueryParams","qp","p","join","Heading","props","react_default","createElement","className","alt","src","imageSrc","Button","isPrimary","disabled","isDisabled","onClick","onClickRaw","preventDefault","clickValue","name","children","label","Tooltip","text","Copy","copy","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","navigator","clipboard","writeText","content","stop","apply","this","arguments","useDiv","shared_Tooltip","tooltip","noIcon","react_fontawesome_index_es","icon","faCopy","size","shared_Button","Saving","react_transition_group","transitionEnter","transitionEnterTimeout","transitionLeave","transitionName","isSaved","faSave","TextArea","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onUpdate","onChangeDirect","target","state","isFullWidth","onChange","style","React","Component","Curl","serializerCurl","hasNewConfig","hasNewData","getMethod","getHeaders","newData","getData","parseUrl","type","GQL","graphQL","query","json","FORM","updateCurl","setState","draft","hasDraft","debounce","curl","updateData","updateConfig","getValue","regex","utils","exec","TextArea_TextArea","background","concat","process","backgroundAttachment","backgroundColor","backgroundRepeat","color","shared_Saving","shared_Copy","payload","header","parsePayloadString","Select","selected","Fragment","multiple","isMultiple","placeholder","Selector","shared_Select","Output","output","toUpperCase","CURL","Curl_Curl","selector_Selector","Input","checked","isChecked","onChangeRaw","TEXT","Domain","shared_Input","Endpoint","Destination","width","domain_Domain","endpoint_Endpoint","Method","Toggler","heading","isToggled","collapsedData","onToggle","faChevronUp","faChevronDown","Autocomplete","userInput","currentTarget","filteredSuggestions","suggestions","filter","suggestion","input","indexOf","showSuggestions","onSuggestionMouseDown","stopPropagation","innerText","onSelectSuggestion","onBlur","activeSuggestion","_this2","index","onMouseDown","PureComponent","KeyValueInput","addEntry","onAddEntry","removeEntry","maybeIndexStr","split","pop","Error","refineIndex","onRemoveEntry","onChangeKey","entry","onUpdateEntry","updateEntryKey","onChangeValue","updateEntryValue","faPlus","faMinus","keyInput","Autocomplete_Autocomplete","valueInput","Headers","toggleHeaders","prevState","showHeaders","addHeader","shared_Toggler","h","shared_KeyValueInput","onRemove","QueryParams","addQueryParam","toggleQueryParams","showQueryParams","s","Config","toggleConfigSettings","showConfigSettings","updateDestination","updateHeaders","removeHeader","updateMethod","updateQueryParams","removeQueryParameter","queryparam","destination","href","method_Method","TWO","destination_Destination","TEN","QueryParams_QueryParams","Headers_Headers","TWELVE","Type","GraphQL","updateGraphQL","getDocAndTypeFromGQLString","onUpdateData","updateType","pretty","PrettyMe","type_Type","faMagic","doc","definitions","operation","print","newProps","Json","updateJson","object","Data","Json_Json","GraphQL_GraphQL","data_selector_Selector","ClearHistory","clear","faTrash","LoadHistoryEntry","faUpload","ListHistoryEntry","statusClass","loadhistoryentry_LoadHistoryEntry","ListHistory","updateFilter","history","historyEntry","listhistoryentry_ListHistoryEntry","History","loadHistory","toggleHistory","showHistory","ListHistory_ListHistory","clearhistory_ClearHistory","clearHistory","Table","row","j","data-label","ResponseHeaders","headerKeys","Array","from","shared_Table","Header","Value","get","ResponseJson","toggleJson","showJson","replacer","p1","p2","p3","p4","part","end","indent","valueClass","STRING","NUMBER","DATE","BOOLEAN","ReactDOMServer","renderToString","repeat","response","dangerouslySetInnerHTML","__html","ResponseRaw","toggleRaw","showRaw","FetchResponse","ResponseHeaders_ResponseHeaders","ResponseRaw_ResponseRaw","ResponseJson_ResponseJson","Loading","Notice","Confirm","confirm","message","onConfirm","onCancel","Checkbox","isCheckedLabel","isNotCheckedLabel","CHECKBOX","Proxy","toggleProxySettings","showProxySettings","onUpdateProxyUrl","onUpdateProxy","isEnabled","proxy","onUpdateProxyEnabled","shared_Notice","shared_Checkbox","Request","onRequest","Proxy_Proxy","shouldConfirm","shared_Confirm","Test","baseState","getDestination","getFetchData","fetchData","body","onTest","_callee2","_context2","hasRun","isLoading","dest","fetch","sent","t0","finish","prevProps","prevProxy","newProxy","validation","success","idx","shared_Loading","proxyMessage","request_Request","updateProxy","fetchresponse_FetchResponse","App","onConfigChange","console","log","validatePayload","onDataChange","onProxyChange","result","form","test","showData","heading_Heading","Config_Config","SIX","output_Output","data_Data","History_History","test_Test","ReactDOM","render","App_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.213803d3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export enum HTTPMethods {\n  DELETE = 'DELETE',\n  GET = 'GET',\n  HEAD = 'HEAD',\n  PATCH = 'PATCH',\n  POST = 'POST',\n  PUT = 'PUT'\n}\n\nexport enum HTTPHeaders {\n  'A-IM' = 'A-IM',\n  Accept = 'Accept',\n  'Accept-Charset' = 'Accept-Charset',\n  'Accept-Datetime' = 'Accept-Datetime',\n  'Accept-Encoding' = 'Accept-Encoding',\n  'Accept-Language' = 'Accept-Language',\n  'Access-Control-Request-Method' = 'Access-Control-Request-Method',\n  'Access-Control-Request-Headers' = 'Access-Control-Request-Headers',\n  Authorization = 'Authorization',\n  Authentication = 'Authentication',\n  'Cache-Control' = 'Cache-Control',\n  'Content-Length' = 'Content-Length',\n  'Content-MD5' = 'Content-MD5',\n  'Content-Type' = 'Content-Type',\n  Cookie = 'Cookie',\n  Date = 'Date',\n  Expect = 'Expect',\n  Forwarded = 'Forwarded',\n  From = 'From',\n  Host = 'Host',\n  'HTTP2-Settings' = 'HTTP2-Settings',\n  'If-Match' = 'If-Match',\n  'If-Modified-Since' = 'If-Modified-Since',\n  'If-None-Match' = 'If-None-Match',\n  'If-Range' = 'If-Range',\n  'If-Unmodified-Since' = 'If-Unmodified-Since',\n  'Max-Forwards' = 'Max-Forwards',\n  Pragma = 'Pragma',\n  'Proxy-Authorization' = 'Proxy-Authorization',\n  Range = 'Range',\n  Referer = 'Referer',\n  TE = 'TE',\n  Upgrade = 'Upgrade',\n  'User-Agent' = 'User-Agent',\n  Via = 'Via',\n  Warning = 'Warning'\n}\n\nexport enum DataType {\n  FORM = 'form',\n  JSON = 'json',\n  GQL = 'graphQL'\n}\n\nexport enum OutputType {\n  CURL = 'curl'\n}\n\nexport enum InputTypes {\n  BUTTON = 'button',\n  CHECKBOX = 'checkbox',\n  COLOR = 'color',\n  DATE = 'date',\n  DATETIME_LOCAL = 'datetime-local',\n  EMAIL = 'email',\n  FILE = 'file',\n  HIDDEN = 'hidden',\n  IMAGE = 'image',\n  MONTH = 'month',\n  NUMBER = 'number',\n  PASSWORD = 'password',\n  RADIO = 'radio',\n  RANGE = 'range',\n  RESET = 'reset',\n  SEARCH = 'search',\n  SUBMIT = 'submit',\n  TEL = 'tel',\n  TEXT = 'text',\n  TIME = 'time',\n  URL = 'url',\n  WEEK = 'week'\n}\n\nexport enum ColumnCount {\n  ONE = 'one column',\n  TWO = 'two columns',\n  THREE = 'three columns',\n  FOUR = 'four columns',\n  FIVE = 'five columns',\n  SIX = 'six columns',\n  SEVEN = 'seven columns',\n  EIGHT = 'eight columns',\n  NINE = 'nine columns',\n  TEN = 'ten columns',\n  ELEVEN = 'eleven columns',\n  TWELVE = 'twelve columns'\n}\n\nexport enum JsonValueTypes {\n  NUMBER = 'number',\n  DATE = 'date',\n  BOOLEAN = 'boolean',\n  URL = 'url',\n  STRING = 'string'\n}\n","import './css/GraphQL.css';\n\nimport Button from '../../shared/Button';\nimport Copy from '../../shared/Copy';\nimport { faMagic } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { gqlPayloadType } from '../Data';\nimport React from 'react';\nimport Saving from '../../shared/Saving';\nimport TextArea from '../../shared/TextArea';\nimport Tooltip from '../../shared/Tooltip';\nimport Type from './type/Type';\n\nimport { OperationDefinitionNode, parse, print } from 'graphql';\n\nexport enum GraphQLType {\n  QUERY = 'query',\n  MUTATION = 'mutation'\n}\n\ninterface ParsedGQL {\n  gql: string;\n  type: GraphQLType;\n}\n\ninterface GraphQLProps {\n  data: gqlPayloadType;\n  onUpdateData: (value: gqlPayloadType) => void;\n}\n\ninterface GraphQLState {\n  draft: string;\n  isSaved: boolean;\n  type: GraphQLType;\n}\n\nexport default class GraphQL extends React.PureComponent<\n  GraphQLProps,\n  GraphQLState\n> {\n  constructor(props: GraphQLProps) {\n    super(props);\n    const gql = GraphQL.getDocAndTypeFromGQLString(props.data.query);\n    this.state = {\n      draft: gql.gql,\n      isSaved: true,\n      type: gql.type\n    };\n  }\n\n  static getDocAndTypeFromGQLString(gql: string): ParsedGQL {\n    const doc = parse(gql);\n    const def: OperationDefinitionNode = doc\n      .definitions[0] as OperationDefinitionNode;\n    const type = def.operation as GraphQLType;\n    return {\n      gql: print(doc),\n      type\n    };\n  }\n\n  static getDerivedStateFromProps(\n    newProps: GraphQLProps,\n    state: GraphQLState\n  ): GraphQLState {\n    if (newProps.data.query !== state.draft && !state.isSaved) {\n      return state;\n    }\n    try {\n      const gql = GraphQL.getDocAndTypeFromGQLString(newProps.data.query);\n      return {\n        draft: newProps.data.query,\n        isSaved: true,\n        type: gql.type\n      };\n    } catch (e) {\n      return state;\n    }\n  }\n\n  updateGraphQL = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const draft = e.target.value;\n    try {\n      const gql = GraphQL.getDocAndTypeFromGQLString(draft);\n      if (gql.gql !== this.state.draft) {\n        this.props.onUpdateData(\n          // replace any existing operation with an empty string\n          { query: draft }\n        );\n        this.setState({ isSaved: true });\n      } else {\n        this.setState({\n          draft,\n          isSaved: false\n        });\n      }\n    } catch (_) {\n      this.setState({\n        draft,\n        isSaved: false\n      });\n    }\n  };\n\n  updateType = (type: GraphQLType): void => {\n    this.props.onUpdateData({\n      query: type + ' ' + this.state.draft.replace(this.state.type, '')\n    });\n  };\n\n  pretty = () => {\n    this.props.onUpdateData({\n      query:\n        this.state.type +\n        ' ' +\n        GraphQL.PrettyMe(this.state.draft).replace(this.state.type, '')\n    });\n  };\n\n  static PrettyMe(gql: string): string {\n    try {\n      return print(parse(gql));\n    } catch (_) {\n      // Todo: print errors\n      return gql;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"GraphQL\">\n        <div className=\"row\">\n          <TextArea\n            isFullWidth={true}\n            onChangeDirect={this.updateGraphQL}\n            style={{\n              background: `url('${process.env.PUBLIC_URL}/images/textarea.png')`,\n              backgroundAttachment: 'local',\n              backgroundColor: '#19404A',\n              backgroundRepeat: 'no-repeat',\n              color: '#EEE8D5'\n            }}\n            value={this.state.draft}\n          />\n        </div>\n        <div className=\"row\">\n          <div className=\"two columns\">\n            <Saving isSaved={this.state.isSaved} />\n          </div>\n          <div className=\"two columns\">\n            <Type\n              className=\"u-full-width\"\n              onUpdate={this.updateType}\n              selected={this.state.type}\n            />\n          </div>\n          <div className=\"two columns\">\n            <Tooltip text=\"Pretty payload\">\n              <Button\n                className=\"u-full-width GraphQLPretty\"\n                isDisabled={!this.state.isSaved}\n                isPrimary={false}\n                onClick={this.pretty}\n              >\n                <FontAwesomeIcon icon={faMagic} size=\"lg\" />\n              </Button>\n            </Tooltip>\n          </div>\n          <div className=\"two columns\">\n            <Copy\n              className=\"u-pull-right\"\n              content={GraphQL.PrettyMe(this.state.draft)}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import { ConfigData } from '../components/config/Config';\nimport { DataData } from '../components/data/Data';\nimport { KeyValueEntry } from '../components/shared/KeyValueInput';\nimport { HistoryEntry } from '../components/history/History';\nimport { HTTPMethods } from '../enums';\nimport { parse } from 'graphql';\nimport { ProxyData } from '../components/test/request/proxy/Proxy';\n\nexport interface ParsedURL {\n  domain: string | null;\n  endpoint: string | null;\n  queryParams: KeyValueEntry[] | null;\n}\n\nexport const methodHasPayload = (method: HTTPMethods) =>\n  ![HTTPMethods.GET, HTTPMethods.HEAD].includes(method);\n\nexport const PROXY = 'https://curlify-proxy.herokuapp.com/';\n\nexport const regEx = {\n  // Todo: convert to /gms https://github.com/babel/babel/pull/10347\n  curlData: /(?:-d\\s{0,}'|\")({.*})(?=['|\"])/gim,\n  curlHeader: /(?:-H \")([\\w\\d]{1,})(?:\\s{0,}:\\s{0,})(.+?)(?=\")/gim,\n  curlMethod: /(?:-X\\s{0,})(\\w{3,6})/gim,\n  dateTimeZoneChars: /[T|Z]/gim,\n  jsonData: /^( *)(\"[^\"]+\": )?(\"[^\"].*\"|[\\w.+-]*)?([{}[\\],]*)?$/gm,\n  multipleSpaces: / +/gm,\n  newLine: /[\\r|\\n]/gm,\n  newLineAndTab: /[\\n|\\r|\\t]/gm,\n  quotes: /[\"']/gim,\n  singleEscapedNewLine: /(?<!\\\\)\\\\n/gm,\n  url: /^((?:http(?:s)?:\\/\\/)+[\\w.-]+(?:.[\\w.-]+))+([\\w-._~:/?#[\\]@!$&'()*+,;=.]+)$/gim\n};\n\n// export const hasDataChanged = (\n//   prevData: DataData,\n//   newData: DataData\n// ): boolean => {\n//   return false;\n// }\n//\n// export const hasConfigChanged = (\n//   prevData: DataData,\n//   newData: DataData\n// ): boolean => {\n//   return false;\n// }\n\nexport const hasProxyChanged = (\n  prevProxy: ProxyData,\n  newProxy: ProxyData\n): boolean => {\n  return (\n    prevProxy.isEnabled !== newProxy.isEnabled || prevProxy.url !== newProxy.url\n  );\n};\n\nexport const isValidMethod = (string: string): boolean =>\n  Object.values(HTTPMethods).includes(string);\n\nexport const isValidURL = (domain: string, endpoint: string): boolean => {\n  const url =\n    domain +\n    (domain.charAt(domain.length - 1) !== '/' && endpoint.charAt(0) !== '/'\n      ? '/'\n      : '') +\n    endpoint;\n\n  const possUrl = url.match(regEx.url);\n  return !possUrl || possUrl[0] !== url ? false : true;\n};\n\nexport const isValidHeaders = (headers: KeyValueEntry[]): boolean => {\n  return headers.reduce((_: boolean, curr: KeyValueEntry) => {\n    return (\n      curr.key !== null &&\n      curr.key !== undefined &&\n      typeof curr.key === 'string' &&\n      curr.key !== ''\n    );\n  }, true);\n};\n\nexport const isValidJsonString = (json: string) => {\n  try {\n    JSON.parse(json);\n    return true;\n  } catch (_) {\n    return false;\n  }\n};\n\nexport const isValidGraphQLString = (gql: string) => {\n  try {\n    parse(gql);\n    return true;\n  } catch (_) {\n    return false;\n  }\n};\n\nexport const isStringANumber = (value: string): boolean => {\n  return !isNaN(parseInt(value));\n};\n\nexport const isStringADate = (value: string): boolean => {\n  return !isNaN(Date.parse(value.replace(regEx.dateTimeZoneChars, ' ')));\n};\n\nexport const isStringBooleanOrNull = (value: string): boolean => {\n  const permitted = ['true', 'false', 'null', 'nil', 'undefined'];\n  return permitted.includes(value.toLowerCase());\n};\n\nexport const isStringAURL = (value: string): boolean => {\n  return !!value.replace(regEx.quotes, '').match(regEx.url);\n};\n\nexport const isStorageAvailable = (): boolean => {\n  let storage;\n  try {\n    storage = window['localStorage'];\n    var x = '__storage_test__';\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\nexport const addToHistory = (\n  config: ConfigData,\n  data: DataData,\n  status: number\n): string => {\n  const storage = window.localStorage;\n\n  if (storage.length + 1 === 20) {\n    let keys = [];\n    for (let i = 0; i < storage.length; i++) {\n      const key = storage.key(i);\n      if (key) {\n        keys.push(key);\n      }\n    }\n    const removeKey = keys.sort().shift();\n    if (removeKey) {\n      storage.removeItem(removeKey);\n    }\n  }\n  const id = new Date().getTime().toString();\n  const item = JSON.stringify({\n    config,\n    data,\n    id,\n    status\n  });\n  storage.setItem(id, item);\n  return id;\n};\n\nexport const getHistory = () => {\n  if (!isStorageAvailable()) {\n    return [];\n  }\n  const requestHistory = [] as HistoryEntry[];\n  const storage = window.localStorage;\n  for (let i = 0; i < storage.length; i++) {\n    const key = storage.key(i);\n    if (!key) {\n      break;\n    }\n    const data = storage.getItem(key);\n    if (!data) {\n      break;\n    }\n    try {\n      requestHistory.push(JSON.parse(data));\n    } catch (_) {\n      storage.removeItem(key);\n    }\n  }\n  return requestHistory.sort((a, b) => {\n    const a_id = parseInt(a.id);\n    const b_id = parseInt(b.id);\n    return a_id > b_id ? -1 : a_id < b_id ? 1 : 0;\n  });\n};\n\nexport const parseURLString = (str: string) => {\n  const uri = new URL(str);\n  const params = Object.fromEntries(new URLSearchParams(uri.search));\n  return {\n    domain: uri.origin,\n    endpoint: uri.pathname,\n    queryParams: Object.keys(params).map(key => ({ key, value: params[key] }))\n  };\n};\n\nexport const isNull = (value: any) => {\n  if (value === null || value === undefined || value === '') {\n    return true;\n  }\n  return false;\n};\n\nexport const convertObjToQueryParams = (qp: KeyValueEntry[]): string => {\n  if (qp.length === 0) {\n    return '';\n  }\n  return (\n    '?' + qp.map(p => p.key + (isNull(p.value) ? '' : '=' + p.value)).join('&')\n  );\n};\n","import './css/Heading.css';\n\nimport React from 'react';\n\ninterface HeadingProps {\n  imageSrc: string;\n}\n\nconst Heading: React.FunctionComponent<HeadingProps> = props => {\n  return (\n    <div className=\"Heading\">\n      <img alt=\"curlify logo\" src={props.imageSrc} />\n    </div>\n  );\n};\n\nexport default Heading;\n","import React from 'react';\n\ninterface ButtonProps {\n  className?: string;\n  id?: string;\n  isDisabled?: boolean;\n  isPrimary: boolean;\n  label?: string;\n  name?: string;\n  onClick: (val: any, name?: string) => void;\n  onClickRaw?: (e: React.MouseEvent<HTMLElement>) => void;\n  clickValue?: any;\n}\n\nconst Button: React.FunctionComponent<ButtonProps> = props => {\n  const clickHandler = (e: React.MouseEvent) => {\n    e.preventDefault();\n    props.onClick(props.clickValue, props.name);\n  };\n\n  return (\n    <button\n      className={\n        (props.isPrimary ? 'button-primary ' : ' ') + props.className || ' '\n      }\n      disabled={props.isDisabled}\n      id={props.id}\n      onClick={props.onClickRaw || clickHandler}\n    >\n      {props.children || props.label || ''}\n    </button>\n  );\n};\n\nexport default Button;\n","/**\n * @file Tooltip component\n * @author Mattamorphic\n */\nimport './css/Tooltip.css';\n\nimport React from 'react';\n\ninterface TooltipProps {\n  text: string;\n}\n\nconst Tooltip: React.FunctionComponent<TooltipProps> = props => {\n  return (\n    <div className=\"Tooltip\">\n      <span className=\"TooltipText\">{props.text}</span>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Tooltip;\n","import './css/Copy.css';\n\nimport Button from './Button';\nimport { faCopy } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport Tooltip from './Tooltip';\n\ninterface CopyProps {\n  className?: string;\n  noIcon?: boolean;\n  useDiv?: boolean;\n  content: string;\n  tooltip?: string;\n}\n\nconst Copy: React.FunctionComponent<CopyProps> = props => {\n  const copy = async () => {\n    await navigator.clipboard.writeText(props.content);\n  };\n  if (!props.useDiv) {\n    return (\n      <Tooltip text={props.tooltip || 'Copy'}>\n        <Button\n          className={(props.className || '') + ' Copy'}\n          isPrimary={false}\n          onClick={copy}\n        >\n          {!props.noIcon && <FontAwesomeIcon icon={faCopy} size=\"lg\" />}\n          {props.children}\n        </Button>\n      </Tooltip>\n    );\n  }\n  return (\n    <Tooltip text={props.tooltip || 'Copy'}>\n      <div className={(props.className || '') + ' Copy'} onClick={copy}>\n        {!props.noIcon && <FontAwesomeIcon icon={faCopy} size=\"lg\" />}\n        {props.children}\n      </div>\n    </Tooltip>\n  );\n};\n\nexport default Copy;\n","import './css/Saving.css';\n\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport { faSave } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\n\ninterface SavingProps {\n  className?: string;\n  isSaved: boolean;\n}\n\nconst Saving: React.FunctionComponent<SavingProps> = props => {\n  return (\n    <CSSTransitionGroup\n      transitionEnter={true}\n      transitionEnterTimeout={500}\n      transitionLeave={false}\n      transitionName=\"save-notice\"\n    >\n      <div\n        key={'notice-' + props.isSaved}\n        className={\n          (props.isSaved ? 'Saved' : 'NotSaved') +\n          ' SavingNotice ' +\n          (props.className || '')\n        }\n      >\n        <FontAwesomeIcon icon={faSave} size=\"lg\" />\n      </div>\n    </CSSTransitionGroup>\n  );\n};\n\nexport default Saving;\n","import React from 'react';\n\ninterface TextAreaProps {\n  className?: string;\n  isFullWidth: boolean;\n  onChangeDirect?: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  onUpdate?: (value: string) => void;\n  style?: {\n    [key: string]: string;\n  };\n  value: string;\n}\n\ninterface TextAreaState {}\n\nexport default class TextArea extends React.Component<\n  TextAreaProps,\n  TextAreaState\n> {\n  constructor(props: TextAreaProps) {\n    super(props);\n    this.state = {};\n  }\n\n  onUpdate = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    if (this.props.onChangeDirect) {\n      this.props.onChangeDirect(e);\n    } else if (this.props.onUpdate) {\n      this.props.onUpdate(e.target.value);\n    }\n  };\n\n  render() {\n    return (\n      <textarea\n        className={\n          (this.props.isFullWidth ? 'u-full-width ' : ' ') +\n            this.props.className || ''\n        }\n        onChange={this.onUpdate}\n        style={this.props.style || {}}\n        value={this.props.value}\n      ></textarea>\n    );\n  }\n}\n","/**\n * @file Curl component\n * @author Mattamorphic\n */\nimport './css/Curl.css';\n\nimport * as utils from '../../../utils';\n\nimport { ConfigData } from '../../config/Config';\nimport Copy from '../../shared/Copy';\nimport { debounce } from 'lodash';\nimport { KeyValueEntry } from '../../shared/KeyValueInput';\nimport React from 'react';\nimport Saving from '../../shared/Saving';\nimport TextArea from '../../shared/TextArea';\n\nimport { DataData, payloadType } from '../../data/Data';\nimport { DataType, HTTPMethods } from '../../../enums';\n\ninterface SerializedCurl {\n  config: ConfigData;\n  data: DataData;\n  hasNewConfig: boolean;\n  hasNewData: boolean;\n}\n\ninterface CurlProps {\n  config: ConfigData;\n  data: DataData;\n  updateConfig: (data: ConfigData) => void;\n  updateData: (data: DataData) => void;\n}\n\ninterface CurlState {\n  draft: string;\n  hasDraft: boolean;\n}\n\nexport default class Curl extends React.Component<CurlProps, CurlState> {\n  constructor(props: CurlProps) {\n    super(props);\n    this.state = {\n      draft: Curl.getValue(props.config, props.data),\n      hasDraft: false\n    };\n  }\n\n  /**\n   * @function Get the headers from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {Header[] | null}\n   */\n  getHeaders(value: string): KeyValueEntry[] | null {\n    const regex = utils.regEx.curlHeader;\n    const headers = [];\n    let match = null;\n    while ((match = regex.exec(value))) {\n      headers.push({\n        key: match[1] as string,\n        value: match[2] as string\n      });\n    }\n    if (headers.length === 0) {\n      return null;\n    }\n    return headers;\n  }\n\n  /**\n   * @function Get the method from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {HTTPMethods | null}\n   */\n  getMethod(value: string): HTTPMethods | null {\n    const regex = utils.regEx.curlMethod;\n    if (!value.match(regex)) {\n      return null;\n    }\n    const match = regex.exec(value);\n    if (!match) {\n      return null;\n    }\n    return match[1] as HTTPMethods;\n  }\n\n  /**\n   * @function Get the data from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {payloadType | null}\n   */\n  getData(value: string): payloadType | null {\n    const regex = utils.regEx.curlData;\n    if (!value.match(regex)) {\n      return null;\n    }\n    const match = regex.exec(value);\n    if (!match) {\n      return null;\n    }\n    try {\n      return JSON.parse(match[1]);\n    } catch (_) {\n      return null;\n    }\n  }\n\n  /**\n   * @function Get the domain and endpoint from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {ParsedURL | null}\n   */\n  parseUrl(value: string): utils.ParsedURL | null {\n    const regex = utils.regEx.url;\n    if (!value.match(regex)) {\n      return null;\n    }\n    const match = regex.exec(value);\n    if (!match) {\n      return null;\n    }\n    return utils.parseURLString(match[0]);\n  }\n\n  /**\n   * @function Serialize a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {SerializedCurl}\n   */\n  serializerCurl = (value: string): SerializedCurl => {\n    // Get the current values\n    const config = this.props.config;\n    const data = this.props.data;\n\n    let hasNewConfig = false;\n    let hasNewData = false;\n\n    // decide which method to use\n    const method = this.getMethod(value);\n\n    // decide which headers to use\n    const headers = this.getHeaders(value);\n\n    // decide which data to use\n    const newData = this.getData(value);\n\n    // decide which domain and endpoint to use\n    const url = this.parseUrl(value);\n\n    if (\n      method &&\n      method !== config.method &&\n      Object.values(HTTPMethods).includes(method)\n    ) {\n      hasNewConfig = true;\n      config.method = method;\n    }\n\n    // Todo - this needs to actually check the header\n    if (headers) {\n      hasNewConfig = true;\n      config.headers = headers;\n    }\n    if (\n      newData &&\n      JSON.stringify(newData) !== JSON.stringify(data.data[data.type])\n    ) {\n      hasNewData = true;\n      switch (data.type) {\n        case DataType.GQL:\n          data.data.graphQL.query = newData.query;\n          break;\n        case DataType.JSON:\n          data.data.json = newData;\n          break;\n        case DataType.FORM:\n          break;\n      }\n    }\n    if (url) {\n      if (url.domain && url.domain !== config.domain) {\n        hasNewConfig = true;\n        config.domain = url.domain;\n      }\n      if (url.endpoint && url.endpoint !== config.endpoint) {\n        hasNewConfig = true;\n        config.endpoint = url.endpoint;\n      }\n      if (\n        url.queryParams &&\n        JSON.stringify(url.queryParams) !== JSON.stringify(config.queryParams)\n      ) {\n        hasNewConfig = true;\n        config.queryParams = url.queryParams;\n      }\n    }\n\n    return {\n      config,\n      data,\n      hasNewConfig,\n      hasNewData\n    };\n  };\n\n  /**\n   * @function Update the data from the curl string\n   *\n   * @param {string} value The curl string\n   */\n  updateCurl = (value: string): void => {\n    this.setState(\n      {\n        draft: value,\n        hasDraft: true\n      },\n      debounce(() => {\n        const curl = this.serializerCurl(this.state.draft);\n        if (curl.hasNewData || curl.hasNewConfig) {\n          // set draft to null, we'll update with the new props\n          this.setState({ hasDraft: false }, () => {\n            curl.hasNewData && this.props.updateData(curl.data);\n            curl.hasNewConfig && this.props.updateConfig(curl.config);\n          });\n        }\n      }, 300)\n    );\n  };\n\n  /**\n   * @function Pass the config and data into a curl string\n   *\n   * @params {ConfigData} config The Configuration data for the curl request\n   * @params {DataData}   data   The data for the curl request\n   */\n  static getValue(config: ConfigData, data: DataData): string {\n    let payload = {};\n    switch (data.type) {\n      case DataType.JSON:\n        payload = data.data.json;\n        break;\n      case DataType.GQL:\n        payload = data.data.graphQL;\n        break;\n      case DataType.FORM:\n        break;\n    }\n\n    return (\n      `curl -X ${config.method} \\\\${'\\n'}` +\n      `${config.headers\n        .map(header => `-H \"${header.key}: ${header.value}\" \\\\${'\\n'}`)\n        .join('')}` +\n      `${\n        payload &&\n        Object.keys(payload).length > 0 &&\n        utils.methodHasPayload(config.method)\n          ? `-d '${Curl.parsePayloadString(JSON.stringify(payload))}' \\\\${'\\n'}`\n          : ''\n      }` +\n      `${config.domain +\n        config.endpoint +\n        utils.convertObjToQueryParams(config.queryParams)}`\n    );\n  }\n\n  /**\n   * @function Parse a string remove new line / tab and remove multiple spaces\n   *\n   * @param {string} value\n   */\n  static parsePayloadString(value: string): string {\n    return value\n      .replace(utils.regEx.newLineAndTab, '')\n      .replace(utils.regEx.multipleSpaces, ' ')\n      .replace(utils.regEx.singleEscapedNewLine, '');\n  }\n\n  render() {\n    const draft = this.state.hasDraft\n      ? this.state.draft\n      : Curl.getValue(this.props.config, this.props.data);\n    return (\n      <div className=\"Curl\">\n        <div className=\"row\">\n          <TextArea\n            isFullWidth={true}\n            onUpdate={this.updateCurl}\n            style={{\n              background: `url('${process.env.PUBLIC_URL}/images/textarea.png')`,\n              backgroundAttachment: 'local',\n              backgroundColor: '#19404A',\n              backgroundRepeat: 'no-repeat',\n              color: '#EEE8D5'\n            }}\n            value={draft}\n          />\n        </div>\n        <div className=\"row\">\n          <div className=\"two columns\">\n            <Saving className=\"u-full-width\" isSaved={!this.state.hasDraft} />\n          </div>\n          <div className=\"six columns\">\n            <div className=\"u-full-width\" />\n          </div>\n          <div className=\"four columns\">\n            <Copy className=\"u-full-width\" content={draft} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\ninterface selectProps {\n  className?: string;\n  id?: string;\n  isDisabled?: boolean;\n  label?: string;\n  name?: string;\n  onChange: (value: string, name?: string) => void;\n  placeholder?: string;\n  selected?: string | string[] | null;\n  style?: { [key: string]: string };\n  values: string[];\n  isMultiple?: boolean;\n  size?: number;\n}\n\nconst Select: React.FunctionComponent<selectProps> = props => {\n  const onChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    props.onChange(e.target.value, props.name);\n  };\n\n  const selected = props.selected || '';\n  return (\n    <>\n      {props.label && <label>{props.label}</label>}\n      <select\n        className={props.className || ''}\n        disabled={props.isDisabled || false}\n        id={props.id || ''}\n        multiple={props.isMultiple || false}\n        name={props.name || ''}\n        onChange={onChange}\n        size={props.size || 0}\n        style={props.style || {}}\n        value={selected}\n      >\n        <option value=\"\" disabled>\n          {props.placeholder || 'Please Select'}\n        </option>\n        {props.values.map((value: string, i: number) => (\n          <option key={`${value}_${i}`} value={value}>\n            {value}\n          </option>\n        ))}\n      </select>\n    </>\n  );\n};\n\nexport default Select;\n","import './css/Selector.css';\n\nimport { OutputType } from '../../../enums';\nimport React from 'react';\nimport Select from '../../shared/Select';\n\ninterface SelectorProps {\n  className?: string;\n  selected: OutputType;\n  onUpdate: (value: OutputType) => void;\n}\n\nconst Selector: React.FunctionComponent<SelectorProps> = props => {\n  const updateSelected = (value: string): void => {\n    props.onUpdate(value as OutputType);\n  };\n\n  return (\n    <Select\n      className={(props.className || '') + ' Selector'}\n      onChange={updateSelected}\n      selected={props.selected}\n      values={Object.values(OutputType)}\n    />\n  );\n};\n\nexport default Selector;\n","import './css/Output.css';\n\nimport { ConfigData } from '../config/Config';\nimport Curl from './curl/Curl';\nimport { DataData } from '../data/Data';\nimport { OutputType } from '../../enums';\nimport React from 'react';\nimport Selector from './selector/Selector';\n\ninterface OutputProps {\n  className?: string;\n  config: ConfigData;\n  data: DataData;\n  output: OutputType;\n  updateConfig: (data: ConfigData) => void;\n  updateData: (data: DataData) => void;\n}\n\nconst Output: React.FunctionComponent<OutputProps> = props => {\n  const updateType = (_: OutputType) => {\n    // Todo : Implement changer here in future.\n  };\n\n  return (\n    <div className={(props.className || '') + ' Output'}>\n      <div className=\"row OutputHeading\">\n        <h4> Request Config: {props.output.toUpperCase()} </h4>\n      </div>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n          {props.output === OutputType.CURL && (\n            <Curl\n              config={props.config}\n              data={props.data}\n              updateConfig={props.updateConfig}\n              updateData={props.updateData}\n            />\n          )}\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n          <Selector\n            className=\"u-full-width\"\n            onUpdate={updateType}\n            selected={props.output}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Output;\n","import { InputTypes } from '../../enums';\nimport React from 'react';\n\n// Define Interfaces\ninterface InputProps {\n  className?: string;\n  isChecked?: boolean;\n  isDisabled?: boolean;\n  label?: string;\n  name?: string;\n  id?: string;\n  onChange?: (value: string, name?: string) => void;\n  onChangeRaw?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  placeholder?: string;\n  type?: InputTypes;\n  value?: string;\n}\n\n// Input Component\nconst Input: React.FunctionComponent<InputProps> = props => {\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (props.onChangeRaw) {\n      return props.onChangeRaw(e);\n    } else if (props.onChange) {\n      return props.onChange(e.target.value, props.name);\n    }\n  };\n\n  return (\n    <>\n      {props.label && <label>{props.label}</label>}\n      <input\n        checked={props.isChecked}\n        className={props.className || ''}\n        disabled={props.isDisabled}\n        id={props.id || ''}\n        name={props.name || ''}\n        onChange={onChange}\n        placeholder={props.placeholder || ''}\n        type={props.type || InputTypes.TEXT}\n        value={props.value || ''}\n      />\n    </>\n  );\n};\n\nexport default Input;\n","import './css/Domain.css';\n\nimport Input from '../../../shared/Input';\nimport { InputTypes } from '../../../../enums';\nimport React from 'react';\nimport Tooltip from '../../../shared/Tooltip';\n\ninterface DomainProps {\n  isFullWidth: boolean;\n  value: string;\n  onUpdate: (value: string) => void;\n}\n\nconst Domain: React.FunctionComponent<DomainProps> = props => (\n  <Tooltip text=\"Domain\">\n    <Input\n      className={(props.isFullWidth ? 'u-full-width' : '') + ' Domain'}\n      onChange={props.onUpdate}\n      type={InputTypes.URL}\n      value={props.value}\n    />\n  </Tooltip>\n);\n\nexport default Domain;\n","import './css/Endpoint.css';\n\nimport Input from '../../../shared/Input';\nimport React from 'react';\nimport Tooltip from '../../../shared/Tooltip';\n\ninterface EndpointProps {\n  isFullWidth: boolean;\n  value: string;\n  onUpdate: (value: string) => void;\n}\n\nconst Endpoint: React.FunctionComponent<EndpointProps> = props => (\n  <Tooltip text=\"Endpoint\">\n    <Input\n      className={(props.isFullWidth ? 'u-full-width' : '') + ' Endpoint'}\n      onChange={props.onUpdate}\n      value={props.value}\n    />\n  </Tooltip>\n);\n\nexport default Endpoint;\n","import './css/Destination.css';\n\nimport * as utils from '../../../utils';\n\nimport { ColumnCount } from '../../../enums';\nimport Domain from './domain/Domain';\nimport Endpoint from './endpoint/Endpoint';\nimport { KeyValueEntry } from '../../shared/KeyValueInput';\nimport React from 'react';\n\ninterface DestinationProps {\n  onUpdate: (\n    domain: string,\n    endpoint: string,\n    queryParams: KeyValueEntry[]\n  ) => void;\n  domain: string;\n  endpoint: string;\n  queryParams: KeyValueEntry[];\n  width: ColumnCount;\n}\n\nconst Destination: React.FunctionComponent<DestinationProps> = props => {\n  const onUpdate = (value: string): void => {\n    const url = utils.parseURLString(value);\n    // TODO: handle query params / draft state\n    props.onUpdate(url.domain, url.endpoint, url.queryParams);\n  };\n\n  const onUpdateEndpoint = (endpoint: string): void => {\n    onUpdate(props.domain + endpoint);\n  };\n\n  const onUpdateDomain = (domain: string): void => {\n    onUpdate(domain + props.endpoint);\n  };\n\n  return (\n    <div className={props.width + ' Destination'}>\n      <div className=\"row\">\n        <div className=\"six columns\">\n          <Domain\n            isFullWidth={true}\n            onUpdate={onUpdateDomain}\n            value={props.domain}\n          />\n        </div>\n        <div className=\"six columns\">\n          <Endpoint\n            isFullWidth={true}\n            onUpdate={onUpdateEndpoint}\n            value={\n              props.endpoint + utils.convertObjToQueryParams(props.queryParams)\n            }\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Destination;\n","import './css/Method.css';\n\nimport React from 'react';\nimport Select from '../../shared/Select';\nimport Tooltip from '../../shared/Tooltip';\n\nimport { ColumnCount, HTTPMethods } from '../../../enums/';\n\ninterface methodProps {\n  onUpdate: (value: HTTPMethods) => void;\n  selected: HTTPMethods;\n  width: ColumnCount;\n}\n\nconst Method: React.FunctionComponent<methodProps> = props => {\n  const onUpdate = (value: string): void => {\n    props.onUpdate(value as HTTPMethods);\n  };\n  return (\n    <div className={props.width}>\n      <Tooltip text=\"Method\">\n        <Select\n          className=\"u-full-width Method\"\n          onChange={onUpdate}\n          selected={props.selected}\n          values={Object.values(HTTPMethods)}\n        />\n      </Tooltip>\n    </div>\n  );\n};\n\nexport default Method;\n","import './css/Toggler.css';\n\nimport Button from './Button';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport Tooltip from './Tooltip';\n\nimport { faChevronDown, faChevronUp } from '@fortawesome/free-solid-svg-icons';\n\ninterface TogglerProps {\n  className?: string;\n  collapsedData?: JSX.Element;\n  heading?: string;\n  label: string | JSX.Element;\n  onToggle: () => void;\n  isToggled: boolean;\n  tooltip?: string;\n}\n\nconst Toggler: React.FunctionComponent<TogglerProps> = props => {\n  if (props.heading) {\n    return (\n      <>\n        <div className=\"row Toggler\">\n          <div className=\"five columns\">\n            <h4 className=\"u-pull-left\"> {props.heading} </h4>\n          </div>\n          <div className=\"six columns\">\n            <span className=\"TogglerPreview\">\n              {!props.isToggled ? (\n                props.collapsedData || <span>&nbsp;</span>\n              ) : (\n                <span>&nbsp;</span>\n              )}\n            </span>\n          </div>\n          <div className=\"one column\">\n            <Button\n              className=\"u-full-width\"\n              isPrimary={false}\n              onClick={props.onToggle}\n            >\n              <Tooltip text={props.tooltip || 'show/hide'}>\n                {typeof props.label === 'string' ? (\n                  !props.isToggled ? (\n                    <FontAwesomeIcon icon={faChevronDown} size=\"lg\" />\n                  ) : (\n                    <FontAwesomeIcon icon={faChevronUp} size=\"lg\" />\n                  )\n                ) : (\n                  props.label\n                )}\n              </Tooltip>\n            </Button>\n          </div>\n        </div>\n        <div className=\"row\">\n          {props.isToggled && (\n            <div className={props.className || ''}>\n              <div className=\"row\">{props.children}</div>\n            </div>\n          )}\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"row\">\n        <Button\n          className=\"u-full-width\"\n          isPrimary={false}\n          onClick={props.onToggle}\n        >\n          <Tooltip text={props.tooltip || 'show/hide'}>\n            {typeof props.label === 'string' ? (\n              !props.isToggled ? (\n                <FontAwesomeIcon icon={faChevronDown} size=\"lg\" />\n              ) : (\n                <FontAwesomeIcon icon={faChevronUp} size=\"lg\" />\n              )\n            ) : (\n              props.label\n            )}\n          </Tooltip>\n        </Button>\n        {!props.isToggled && props.collapsedData}\n      </div>\n      {props.isToggled && (\n        <div className={props.className || ''}>\n          <div className=\"row\">{props.children}</div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Toggler;\n","/**\n * @file Autocomplete component\n * @author Mattamorphic\n */\n\nimport './css/Autocomplete.css';\n\nimport React from 'react';\n\ninterface AutocompleteProps {\n  className?: string;\n  name?: string;\n  placeholder?: string;\n  suggestions: string[];\n  onSelectSuggestion: (value: string, name?: string) => void;\n  selected: string;\n}\n\ninterface AutocompleteState {\n  activeSuggestion: number;\n  filteredSuggestions: string[];\n  showSuggestions: boolean;\n  userInput: string;\n}\n\nexport default class Autocomplete extends React.PureComponent<\n  AutocompleteProps,\n  AutocompleteState\n> {\n  constructor(props: AutocompleteProps) {\n    super(props);\n    this.state = {\n      activeSuggestion: 0,\n      filteredSuggestions: [],\n      showSuggestions: false,\n      userInput: props.selected\n    };\n  }\n\n  onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const userInput = e.currentTarget.value;\n    const filteredSuggestions = [userInput].concat(\n      this.props.suggestions.filter(suggestion => {\n        suggestion = suggestion.toLowerCase();\n        const input = userInput.toLowerCase();\n        return suggestion.indexOf(input) > -1 && suggestion !== input;\n      })\n    );\n    this.setState({\n      filteredSuggestions,\n      showSuggestions: true,\n      userInput\n    });\n  };\n  // onKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {}\n  onSuggestionMouseDown = (e: React.MouseEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const userInput = e.currentTarget.innerText;\n    this.setState({ userInput }, () =>\n      this.props.onSelectSuggestion(userInput, this.props.name)\n    );\n  };\n\n  onBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    e.preventDefault();\n    const userInput = e.currentTarget.value;\n    this.setState({ userInput }, () =>\n      this.props.onSelectSuggestion(userInput, this.props.name)\n    );\n  };\n\n  render() {\n    return (\n      <div className={(this.props.className || '') + ' Autocomplete'}>\n        <input\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          placeholder={this.props.placeholder || ''}\n          type=\"text\"\n          value={this.state.userInput}\n        />\n        <div className=\"AutocompleteList\">\n          {this.state.showSuggestions && this.state.userInput && (\n            <div className=\"AutocompleteResults\">\n              {this.state.filteredSuggestions.length && (\n                <ul className=\"AutocompleteResultsList\">\n                  {this.state.filteredSuggestions.map(\n                    (suggestion: string, index: number) => (\n                      <li\n                        key={index + '_' + suggestion}\n                        onMouseDown={this.onSuggestionMouseDown}\n                      >\n                        {suggestion}\n                      </li>\n                    )\n                  )}\n                </ul>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","/**\n * @file KeyValueInput component\n * @author Mattamorphic\n */\n\nimport Autocomplete from './Autocomplete';\nimport Button from './Button';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Input from './Input';\nimport React from 'react';\nimport Select from './Select';\nimport Tooltip from './Tooltip';\n\nimport { faMinus, faPlus } from '@fortawesome/free-solid-svg-icons';\n\ninterface InputConfig {\n  type: 'TEXT' | 'AUTOCOMPLETE' | 'SELECT';\n  placeholder?: string;\n  values?: string[];\n}\n\nexport interface KeyValueEntry {\n  key: string;\n  value: string;\n}\n\ninterface KeyValueInputProps {\n  className?: string;\n  id: string;\n  keyInput: InputConfig;\n  valueInput: InputConfig;\n  selected: KeyValueEntry[];\n  onUpdateEntry: (entry: KeyValueEntry, index: number) => void;\n  onAddEntry: () => void;\n  onRemoveEntry: (index: number) => void;\n}\n\nconst KeyValueInput: React.FunctionComponent<KeyValueInputProps> = props => {\n  const addEntry = (_: any) => {\n    props.onAddEntry();\n  };\n  const removeEntry = (_: any, name?: string) => {\n    const maybeIndexStr = (name || '').split('_').pop();\n    if (!maybeIndexStr) {\n      throw new Error('Invalid name');\n    }\n    const refineIndex = parseInt(maybeIndexStr);\n    props.onRemoveEntry(refineIndex);\n  };\n\n  const updateEntryKey = (key: string, index: string) => {\n    const refineIndex = parseInt(index);\n    const entry = props.selected[refineIndex];\n    entry.key = key;\n    props.onUpdateEntry(entry, refineIndex);\n  };\n\n  const updateEntryValue = (value: string, index: string) => {\n    const refineIndex = parseInt(index);\n    const entry = props.selected[refineIndex];\n    entry.value = value;\n    props.onUpdateEntry(entry, refineIndex);\n  };\n\n  const onChangeKey = (key: string, name?: string) => {\n    const maybeIndexStr = (name || '').split('_').pop();\n    if (!maybeIndexStr) {\n      throw new Error('Invalid name');\n    }\n    updateEntryKey(key, maybeIndexStr);\n  };\n\n  const onChangeValue = (value: string, name?: string) => {\n    const maybeIndexStr = (name || '').split('_').pop();\n    if (!maybeIndexStr) {\n      throw new Error('Invalid name');\n    }\n    updateEntryValue(value, maybeIndexStr);\n  };\n\n  if (props.selected.length === 0) {\n    return (\n      <div className=\"row\">\n        <Tooltip text=\"Add a header\">\n          <Button className=\"u-full-width\" isPrimary={false} onClick={addEntry}>\n            <FontAwesomeIcon icon={faPlus} size=\"lg\" />\n          </Button>\n        </Tooltip>\n      </div>\n    );\n  }\n  return (\n    <div className={props.className || ''}>\n      {props.selected.map((entry, index) => (\n        <div className=\"row\" key={props.id + '_' + index + '_' + 'row'}>\n          <div className=\"two columns\">\n            <Tooltip text=\"Remove this header\">\n              <Button\n                className=\"u-full-width\"\n                name={`remove_${props.id}_${index}`}\n                isPrimary={false}\n                onClick={removeEntry}\n              >\n                <FontAwesomeIcon icon={faMinus} size=\"lg\" />\n              </Button>\n            </Tooltip>\n          </div>\n          <div className=\"four columns\">\n            {props.keyInput.type === 'TEXT' && (\n              <Input\n                name={entry.key + '_' + index}\n                onChange={onChangeKey}\n                placeholder={props.keyInput.placeholder || ''}\n                value={entry.key}\n              />\n            )}\n            {props.keyInput.type === 'AUTOCOMPLETE' && (\n              <Autocomplete\n                name={entry.key + '_' + index}\n                placeholder={props.keyInput.placeholder || ''}\n                selected={entry.key}\n                suggestions={props.keyInput.values || []}\n                onSelectSuggestion={onChangeKey}\n              />\n            )}\n            {props.keyInput.type === 'SELECT' && (\n              <Select\n                name={entry.key + '_' + index}\n                onChange={onChangeKey}\n                placeholder={props.keyInput.placeholder || ''}\n                selected={entry.key}\n                values={props.keyInput.values || []}\n              />\n            )}\n          </div>\n          <div className=\"four columns\">\n            {props.valueInput.type === 'TEXT' && (\n              <Input\n                name={entry.value + '_' + index}\n                onChange={onChangeValue}\n                placeholder={props.valueInput.placeholder || ''}\n                value={entry.value}\n              />\n            )}\n            {props.valueInput.type === 'AUTOCOMPLETE' && (\n              <Autocomplete\n                name={entry.value + '_' + index}\n                placeholder={props.valueInput.placeholder || ''}\n                selected={entry.value}\n                suggestions={props.keyInput.values || []}\n                onSelectSuggestion={onChangeValue}\n              />\n            )}\n            {props.valueInput.type === 'SELECT' && (\n              <Select\n                name={entry.value + '_' + index}\n                onChange={onChangeValue}\n                placeholder={props.valueInput.placeholder || ''}\n                selected={entry.value}\n                values={props.keyInput.values || []}\n              />\n            )}\n          </div>\n          <div className=\"two columns\">\n            <Tooltip text=\"Add a new header\">\n              <Button\n                className=\"u-full-width\"\n                isPrimary={false}\n                onClick={addEntry}\n              >\n                <FontAwesomeIcon icon={faPlus} size=\"lg\" />\n              </Button>\n            </Tooltip>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default KeyValueInput;\n","import './css/Headers.css';\n\nimport React from 'react';\nimport Toggler from '../../shared/Toggler';\n\nimport KeyValueInput, { KeyValueEntry } from '../../shared/KeyValueInput';\n\nimport { ColumnCount, HTTPHeaders } from '../../../enums';\n\ninterface HeadersProps {\n  onUpdate: (entry: KeyValueEntry, index: number) => void;\n  onRemove: (index: number) => void;\n  selected: KeyValueEntry[];\n  width: ColumnCount;\n}\n\ninterface HeadersState {\n  showHeaders: boolean;\n}\n\nexport default class Headers extends React.PureComponent<\n  HeadersProps,\n  HeadersState\n> {\n  constructor(props: HeadersProps) {\n    super(props);\n    this.state = {\n      showHeaders: false\n    };\n  }\n\n  toggleHeaders = () => {\n    this.setState(prevState => ({\n      showHeaders: !prevState.showHeaders\n    }));\n  };\n\n  addHeader = (): void => {\n    // create a pending header, add this to the end of the index\n    this.props.onUpdate(\n      {\n        key: '',\n        value: ''\n      },\n      this.props.selected.length\n    );\n  };\n\n  render() {\n    // Don't allow duplicate headers.\n    const selected = this.props.selected.map(header => header.key);\n    const values = Object.values(HTTPHeaders).filter(\n      header => !selected.includes(header)\n    );\n    return (\n      <Toggler\n        collapsedData={\n          <em>\n            {this.props.selected.map(h => h.key).join(', ')}\n            &nbsp;\n          </em>\n        }\n        heading=\"HTTP Headers\"\n        label=\"HTTP Headers\"\n        onToggle={this.toggleHeaders}\n        isToggled={this.state.showHeaders}\n        tooltip=\"Configure HTTP Headers\"\n      >\n        <KeyValueInput\n          className=\"Headers\"\n          id=\"HTTPHeaders\"\n          keyInput={{\n            placeholder: 'Enter HTTP Header',\n            type: 'AUTOCOMPLETE',\n            values: values\n          }}\n          valueInput={{\n            placeholder: 'Enter Value',\n            type: 'TEXT'\n          }}\n          selected={this.props.selected}\n          onAddEntry={this.addHeader}\n          onUpdateEntry={this.props.onUpdate}\n          onRemoveEntry={this.props.onRemove}\n        />\n      </Toggler>\n    );\n  }\n}\n","/**\n * @file QueryParams component\n * @author Mattamorphic\n */\nimport './css/QueryParams.css';\n\nimport React from 'react';\nimport Toggler from '../../shared/Toggler';\n\nimport KeyValueInput, { KeyValueEntry } from '../../shared/KeyValueInput';\n\ninterface QueryParamsProps {\n  onUpdate: (entry: KeyValueEntry, index: number) => void;\n  onRemove: (index: number) => void;\n  selected: KeyValueEntry[];\n}\n\ninterface QueryParamsState {\n  showQueryParams: boolean;\n}\n\nexport default class QueryParams extends React.PureComponent<\n  QueryParamsProps,\n  QueryParamsState\n> {\n  constructor(props: QueryParamsProps) {\n    super(props);\n    this.state = {\n      showQueryParams: Object.keys(this.props.selected).length > 0\n    };\n  }\n\n  addQueryParam = (): void => {\n    // create a pending header, add this to the end of the index\n    this.props.onUpdate(\n      {\n        key: '',\n        value: ''\n      },\n      this.props.selected.length\n    );\n  };\n\n  toggleQueryParams = () => {\n    this.setState(prevState => ({\n      showQueryParams: !prevState.showQueryParams\n    }));\n  };\n\n  render() {\n    return (\n      <Toggler\n        collapsedData={\n          <em>\n            {this.props.selected.map(s => s.key).join(', ')}\n            &nbsp;\n          </em>\n        }\n        heading=\"Query Parameters\"\n        label=\"Query Parameter\"\n        onToggle={this.toggleQueryParams}\n        isToggled={this.state.showQueryParams}\n        tooltip=\"Configure query parameters\"\n      >\n        <KeyValueInput\n          className=\"QueryParams\"\n          id=\"QueryParameters\"\n          keyInput={{\n            placeholder: 'Enter QueryParameter',\n            type: 'TEXT'\n          }}\n          valueInput={{\n            placeholder: 'Enter Value',\n            type: 'TEXT'\n          }}\n          selected={this.props.selected}\n          onAddEntry={this.addQueryParam}\n          onUpdateEntry={this.props.onUpdate}\n          onRemoveEntry={this.props.onRemove}\n        />\n      </Toggler>\n    );\n  }\n}\n","import './css/Config.css';\n\nimport Destination from './destination/Destination';\nimport Method from './method/Method';\nimport React from 'react';\nimport Toggler from '../shared/Toggler';\n\nimport { ColumnCount, HTTPMethods } from '../../enums';\nimport Headers from './headers/Headers';\nimport { KeyValueEntry } from '../shared/KeyValueInput';\nimport QueryParams from './queryparams/QueryParams';\n\nexport interface ConfigData {\n  method: HTTPMethods;\n  headers: KeyValueEntry[];\n  domain: string;\n  endpoint: string;\n  queryParams: KeyValueEntry[];\n}\n\ninterface ConfigProps {\n  data: ConfigData;\n  updateConfig: (data: ConfigData) => void;\n}\n\ninterface ConfigState {\n  showConfigSettings: boolean;\n}\n\nexport default class Config extends React.PureComponent<\n  ConfigProps,\n  ConfigState\n> {\n  constructor(props: ConfigProps) {\n    super(props);\n    this.state = {\n      showConfigSettings: true\n    };\n  }\n\n  toggleConfigSettings = () => {\n    this.setState(prevState => ({\n      showConfigSettings: !prevState.showConfigSettings\n    }));\n  };\n\n  updateDestination = (\n    domain: string,\n    endpoint: string,\n    queryParams: KeyValueEntry[]\n  ) => {\n    const data = this.props.data;\n    data.domain = domain;\n    data.endpoint = endpoint;\n    data.queryParams = queryParams;\n    this.props.updateConfig(data);\n  };\n\n  updateHeaders = (value: KeyValueEntry, index: number): void => {\n    const data = this.props.data;\n    if (!data.headers[index] && value) {\n      data.headers.push(value);\n    } else {\n      data.headers[index] = value;\n    }\n    this.props.updateConfig(data);\n  };\n\n  removeHeader = (index: number): void => {\n    const data = this.props.data;\n    delete data.headers[index];\n    data.headers = data.headers.filter(header => header);\n    this.props.updateConfig(data);\n  };\n\n  updateMethod = (value: HTTPMethods) => {\n    const data = this.props.data;\n    data.method = value;\n    this.props.updateConfig(data);\n  };\n\n  updateQueryParams = (value: KeyValueEntry, index: number): void => {\n    const data = this.props.data;\n    if (!data.queryParams[index] && value) {\n      data.queryParams.push(value);\n    } else {\n      data.queryParams[index] = value;\n    }\n    this.props.updateConfig(data);\n  };\n\n  removeQueryParameter = (index: number): void => {\n    const data = this.props.data;\n    delete data.queryParams[index];\n    data.queryParams = data.queryParams.filter(queryparam => queryparam);\n    this.props.updateConfig(data);\n  };\n\n  render() {\n    const destination = this.props.data.domain + this.props.data.endpoint;\n    return (\n      <>\n        <Toggler\n          className=\"Config\"\n          collapsedData={\n            <>\n              Sending a [<strong>{this.props.data.method}</strong>] request to:\n              [\n              <strong>\n                <a href={destination}>{destination}</a>\n              </strong>\n              ]\n              {this.props.data.headers.length > 0 && (\n                <>\n                  , with the HTTP Headers:{' '}\n                  {this.props.data.headers.map(header => (\n                    <span key={header.key + '_snip'}>\n                      <br />\n                      <strong>{header.key}</strong>: <em>{header.value}</em>\n                    </span>\n                  ))}\n                </>\n              )}\n            </>\n          }\n          isToggled={this.state.showConfigSettings}\n          heading=\"Request Config Settings\"\n          label=\"Config Settings\"\n          tooltip=\"Toggle request config\"\n          onToggle={this.toggleConfigSettings}\n        >\n          <div className=\"row\">\n            <Method\n              onUpdate={this.updateMethod}\n              selected={this.props.data.method}\n              width={ColumnCount.TWO}\n            />\n            <Destination\n              domain={this.props.data.domain}\n              endpoint={this.props.data.endpoint}\n              queryParams={this.props.data.queryParams}\n              onUpdate={this.updateDestination}\n              width={ColumnCount.TEN}\n            />\n          </div>\n          <div className=\"row\">\n            <QueryParams\n              onUpdate={this.updateQueryParams}\n              onRemove={this.removeQueryParameter}\n              selected={this.props.data.queryParams}\n            />\n          </div>\n          <div className=\"row\">\n            <Headers\n              onRemove={this.removeHeader}\n              onUpdate={this.updateHeaders}\n              selected={this.props.data.headers}\n              width={ColumnCount.TWELVE}\n            />\n          </div>\n        </Toggler>\n      </>\n    );\n  }\n}\n","import './css/Type.css';\n\nimport { GraphQLType } from '../GraphQL';\nimport React from 'react';\nimport Select from '../../../shared/Select';\n\ninterface TypeProps {\n  className?: string;\n  selected: GraphQLType;\n  onUpdate: (type: GraphQLType) => void;\n}\n\nconst Type: React.FunctionComponent<TypeProps> = props => {\n  const updateSelected = (value: string): void => {\n    props.onUpdate(value as GraphQLType);\n  };\n\n  return (\n    <Select\n      className={(props.className || '') + ' Type'}\n      onChange={updateSelected}\n      selected={props.selected}\n      values={Object.values(GraphQLType)}\n    />\n  );\n};\n\nexport default Type;\n","/**\n * @file Curl component\n * @author Mattamorphic\n */\nimport './css/Json.css';\n\nimport Button from '../../shared/Button';\nimport Copy from '../../shared/Copy';\nimport { faMagic } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { payloadType } from '../Data';\nimport React from 'react';\nimport Saving from '../../shared/Saving';\nimport TextArea from '../../shared/TextArea';\nimport Tooltip from '../../shared/Tooltip';\n\ninterface JsonProps {\n  data: payloadType;\n  onUpdateData: (value: payloadType) => void;\n}\n\ninterface JsonState {\n  draft: string;\n  hasDraft: boolean;\n}\n\nexport default class Json extends React.PureComponent<JsonProps, JsonState> {\n  constructor(props: JsonProps) {\n    super(props);\n    this.state = {\n      draft: JSON.stringify(props.data, null, 2),\n      hasDraft: false\n    };\n  }\n\n  /**\n   * @function We have to update the state based on the props, this needs removing\n   *\n   * @param {JsonProps} newProps The new received props\n   * @param {JsonState} state    The current state\n   *\n   * @return {JsonState}\n   */\n  static getDerivedStateFromProps(\n    newProps: JsonProps,\n    state: JsonState\n  ): JsonState {\n    let draft = state.draft;\n    let hasDraft = state.hasDraft;\n    if (\n      !state.hasDraft &&\n      JSON.stringify(newProps.data) !== JSON.stringify(JSON.parse(state.draft))\n    ) {\n      draft = JSON.stringify(newProps.data, null, 2);\n      hasDraft = false;\n    } else {\n      try {\n        JSON.parse(draft);\n        hasDraft = false;\n      } catch (_) {}\n    }\n    return {\n      draft,\n      hasDraft\n    };\n  }\n\n  /**\n   * @function Update the data from the json string\n   *\n   * @param {string} value The possible json string\n   */\n  updateJson = (value: string) => {\n    this.setState({\n      draft: value,\n      hasDraft: true\n    });\n    try {\n      const object = JSON.parse(value);\n      this.props.onUpdateData(object);\n    } catch (_) {\n      // Todo: print the error\n    }\n  };\n\n  /**\n   * @function Pretty print the json in the state\n   */\n  pretty = () => {\n    try {\n      this.setState({\n        draft: JSON.stringify(JSON.parse(this.state.draft), null, 2),\n        hasDraft: true\n      });\n    } catch (_) {\n      // Todo: Print the error;\n      return;\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"Json\">\n        <div className=\"row\">\n          <TextArea\n            isFullWidth={true}\n            onUpdate={this.updateJson}\n            style={{\n              background: `url('${process.env.PUBLIC_URL}/images/textarea.png')`,\n              backgroundAttachment: 'local',\n              backgroundColor: '#19404A',\n              backgroundRepeat: 'no-repeat',\n              color: '#EEE8D5'\n            }}\n            value={this.state.draft}\n          />\n        </div>\n        <div className=\"row\">\n          <div className=\"two columns\">\n            <Saving className=\"u-full-width\" isSaved={!this.state.hasDraft} />\n          </div>\n          <div className=\"four columns\">\n            <Tooltip text=\"Pretty payload\">\n              <Button\n                className=\"u-full-width JsonPretty\"\n                isDisabled={this.state.hasDraft}\n                isPrimary={false}\n                onClick={this.pretty}\n              >\n                <FontAwesomeIcon icon={faMagic} size=\"lg\" />\n              </Button>\n            </Tooltip>\n          </div>\n          <div className=\"four columns\">\n            <Copy className=\"u-full-width\" content={this.state.draft} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import './css/Selector.css';\n\nimport { DataType } from '../../../enums';\nimport React from 'react';\nimport Select from '../../shared/Select';\n\ninterface SelectorProps {\n  className?: string;\n  selected: DataType;\n  onUpdate: (value: DataType) => void;\n}\n\nconst Selector: React.FunctionComponent<SelectorProps> = props => {\n  const updateSelected = (value: string): void => {\n    props.onUpdate(value as DataType);\n  };\n\n  return (\n    <Select\n      className={(props.className || '') + ' Selector'}\n      onChange={updateSelected}\n      selected={props.selected}\n      values={Object.values(DataType)}\n    />\n  );\n};\n\nexport default Selector;\n","import './css/Data.css';\n\nimport { DataType } from '../../enums';\nimport GraphQL from './graphql/GraphQL';\nimport Json from './json/Json';\nimport React from 'react';\nimport Selector from './selector/Selector';\n\nexport type payloadType = { [key: string]: any };\nexport type gqlPayloadType = { query: string };\n\nexport interface DataData {\n  type: DataType;\n  data: {\n    [DataType.JSON]: payloadType;\n    [DataType.GQL]: gqlPayloadType;\n    [DataType.FORM]: null;\n  };\n}\n\ninterface DataProps {\n  className?: string;\n  data: DataData;\n  updateData: (data: DataData) => void;\n}\n\nconst Data: React.FunctionComponent<DataProps> = props => {\n  const updateType = (value: DataType) => {\n    const data = props.data;\n    data.type = value;\n    props.updateData(data);\n  };\n\n  const updateJsonData = (value: payloadType) => {\n    const data = props.data;\n    data.data.json = value;\n    props.updateData(data);\n  };\n\n  const updateGraphQLData = (value: gqlPayloadType) => {\n    const data = props.data;\n    data.data.graphQL = value;\n    props.updateData(data);\n  };\n\n  return (\n    <div className={(props.className || '') + ' Data'}>\n      <div className=\"row DataHeading\">\n        <h4> Request Data: {props.data.type.toUpperCase()} </h4>\n      </div>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n          {props.data.type === DataType.JSON && (\n            <Json data={props.data.data.json} onUpdateData={updateJsonData} />\n          )}\n          {props.data.type === DataType.GQL && (\n            <GraphQL\n              data={props.data.data.graphQL}\n              onUpdateData={updateGraphQLData}\n            />\n          )}\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n          <Selector\n            className=\"u-full-width\"\n            onUpdate={updateType}\n            selected={props.data.type}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default Data;\n","/**\n * @file ClearHistory component\n * @author Mattamorphic\n */\nimport Button from '../../shared/Button';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport Tooltip from '../../shared/Tooltip';\n\ninterface ClearHistoryProps {\n  clear: () => void;\n}\n\nconst ClearHistory: React.FunctionComponent<ClearHistoryProps> = props => {\n  return (\n    <Button isPrimary={false} onClick={props.clear}>\n      <Tooltip text=\"Clear history\">\n        <FontAwesomeIcon icon={faTrash} size=\"lg\" />\n      </Tooltip>\n    </Button>\n  );\n};\n\nexport default ClearHistory;\n","/**\n * @file LoadHistoryEntry component\n * @author Mattamorphic\n */\nimport './css/LoadHistoryEntry.css';\n\nimport Button from '../../../../shared/Button';\nimport { ConfigData } from '../../../../config/Config';\nimport { DataData } from '../../../../data/Data';\nimport { faUpload } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\n\ninterface LoadHistoryEntryProps {\n  className?: string;\n  config: ConfigData;\n  data: DataData;\n  updateConfig: (config: ConfigData) => void;\n  updateData: (data: DataData) => void;\n}\n\nconst LoadHistoryEntry: React.FunctionComponent<\n  LoadHistoryEntryProps\n> = props => {\n  const load = () => {\n    props.updateConfig(props.config);\n    props.updateData(props.data);\n  };\n\n  return (\n    <Button className={props.className} isPrimary={false} onClick={load}>\n      <FontAwesomeIcon icon={faUpload} size=\"lg\" />\n    </Button>\n  );\n};\n\nexport default LoadHistoryEntry;\n","/**\n * @file ListHistoryEntry component\n * @author Mattamorphic\n */\nimport './css/ListHistoryEntry.css';\n\nimport { ConfigData } from '../../../config/Config';\nimport Copy from '../../../shared/Copy';\nimport { DataData } from '../../../data/Data';\nimport LoadHistoryEntry from './loadhistoryentry/LoadHistoryEntry';\nimport React from 'react';\nimport Tooltip from '../../../shared/Tooltip';\n\ninterface ListHistoryEntryProps {\n  className?: string;\n  config: ConfigData;\n  data: DataData;\n  id: string;\n  status: number;\n  updateConfig: (config: ConfigData) => void;\n  updateData: (data: DataData) => void;\n}\n\nconst ListHistoryEntry: React.FunctionComponent<\n  ListHistoryEntryProps\n> = props => {\n  const url = props.config.domain + props.config.endpoint;\n  let statusClass = 'success';\n  if (props.status > 200) {\n    if (props.status < 400) {\n      statusClass = 'redirect';\n    } else if (props.status < 500) {\n      statusClass = 'client';\n    } else {\n      statusClass = 'server';\n    }\n  }\n\n  return (\n    <div className={(props.className || '') + ' ListHistoryEntry'}>\n      <div className=\"row\">\n        <div className=\"two columns\">\n          <Tooltip text=\"Status code\">\n            <div\n              className={statusClass + ' u-full-width ListHistoryEntryStatus'}\n            >\n              {props.status}\n            </div>\n          </Tooltip>\n        </div>\n        <div className=\"two columns\">\n          <Tooltip text=\"Request method\">\n            <div\n              className={\n                props.config.method.toLowerCase() +\n                ' u-full-width ListHistoryEntryMethod'\n              }\n            >\n              {props.config.method}\n            </div>\n          </Tooltip>\n        </div>\n        <div className=\"two columns\">\n          <div\n            className={\n              props.config.method.toLowerCase() +\n              ' u-full-width ListHistoryEntryID'\n            }\n          >\n            <Copy\n              content={props.id}\n              noIcon={true}\n              tooltip=\"Copy Timestamp / ID\"\n              useDiv={true}\n            >\n              {props.id}\n            </Copy>\n          </div>\n        </div>\n        <div className=\"four columns\">\n          <Copy content={url} noIcon={true} tooltip=\"Copy URL\" useDiv={true}>\n            <div className=\"u-full-width ListHistoryEntryDest\">{url}</div>\n          </Copy>\n        </div>\n        <div className=\"two columns ListHistoryEntryAction\">\n          <Tooltip text=\"Load entry\">\n            <LoadHistoryEntry\n              className=\"u-full-width\"\n              config={props.config}\n              data={props.data}\n              updateConfig={props.updateConfig}\n              updateData={props.updateData}\n            />\n          </Tooltip>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ListHistoryEntry;\n","/**\n * @file ListHistory component\n * @author Mattamorphic\n */\nimport './css/ListHistory.css';\n\nimport { ConfigData } from '../../config/Config';\nimport { DataData } from '../../data/Data';\nimport { HistoryEntry } from '../History';\nimport Input from '../../shared/Input';\nimport ListHistoryEntry from './listhistoryentry/ListHistoryEntry';\nimport React from 'react';\n\ninterface ListHistoryProps {\n  history: HistoryEntry[];\n  updateConfig: (config: ConfigData) => void;\n  updateData: (data: DataData) => void;\n}\n\ninterface ListHistoryState {\n  filter: string | null;\n}\n\nexport default class ListHistory extends React.PureComponent<\n  ListHistoryProps,\n  ListHistoryState\n> {\n  constructor(props: ListHistoryProps) {\n    super(props);\n    this.state = {\n      filter: null\n    };\n  }\n\n  updateFilter = (filter: string) => {\n    this.setState({\n      filter\n    });\n  };\n\n  render() {\n    const history = this.props.history.filter(entry =>\n      JSON.stringify(entry).includes(this.state.filter || '')\n    );\n\n    return (\n      <>\n        <div className=\"row\">\n          <Input\n            className=\"u-full-width ListHistoryFilter\"\n            isDisabled={this.props.history.length === 0}\n            onChange={this.updateFilter}\n            placeholder=\"Filter...\"\n            value={this.state.filter || ''}\n          />\n        </div>\n        <div className=\"ListHistory\">\n          {history.map((historyEntry: HistoryEntry, i: number) => (\n            <ListHistoryEntry\n              className={i % 2 === 0 ? 'dark' : 'light'}\n              config={historyEntry.config}\n              data={historyEntry.data}\n              id={historyEntry.id}\n              key={historyEntry.id}\n              status={historyEntry.status}\n              updateConfig={this.props.updateConfig}\n              updateData={this.props.updateData}\n            />\n          ))}\n        </div>\n      </>\n    );\n  }\n}\n","/**\n * @file History component\n * @author Mattamorphic\n */\nimport './css/History.css';\n\nimport ClearHistory from './clearhistory/ClearHistory';\nimport { ConfigData } from '../config/Config';\nimport { DataData } from '../data/Data';\nimport ListHistory from './listhistory/ListHistory';\nimport React from 'react';\nimport Toggler from '../shared/Toggler';\n\nexport interface HistoryEntry {\n  id: string;\n  config: ConfigData;\n  data: DataData;\n  status: number;\n}\n\ninterface HistoryProps {\n  history: HistoryEntry[];\n  clearHistory: () => void;\n  updateConfig: (config: ConfigData) => void;\n  updateData: (data: DataData) => void;\n}\n\ninterface HistoryState {\n  showHistory: boolean;\n}\n\nexport default class History extends React.PureComponent<\n  HistoryProps,\n  HistoryState\n> {\n  constructor(props: HistoryProps) {\n    super(props);\n    this.state = {\n      showHistory: false\n    };\n  }\n\n  loadHistory = (id: string): boolean => {\n    const item = window.localStorage.getItem(id);\n    if (item === null) {\n      return false;\n    }\n    const payload = JSON.parse(item);\n    this.props.updateConfig(payload.config);\n    this.props.updateData(payload.data);\n    return true;\n  };\n\n  toggleHistory = (): void => {\n    this.setState(prevState => ({\n      showHistory: !prevState.showHistory\n    }));\n  };\n\n  render() {\n    return (\n      <Toggler\n        className=\"History\"\n        collapsedData={<>{this.props.history.length} items in history</>}\n        isToggled={this.state.showHistory}\n        heading=\"History\"\n        label=\"History\"\n        onToggle={this.toggleHistory}\n        tooltip=\"Toggle history\"\n      >\n        <ListHistory\n          history={this.props.history}\n          updateConfig={this.props.updateConfig}\n          updateData={this.props.updateData}\n        />\n        <ClearHistory clear={this.props.clearHistory} />\n      </Toggler>\n    );\n  }\n}\n","/**\n * @file Table component\n * @author Mattamorphic\n */\nimport './css/Table.css';\n\nimport React from 'react';\n\nexport interface TableRow {\n  [key: string]: string | JSX.Element;\n}\n\ninterface TableProps {\n  className?: string;\n  data: TableRow[];\n}\n\nconst Table: React.FunctionComponent<TableProps> = props => {\n  if (props.data.length === 0) {\n    return <table className={props.className || ''} />;\n  }\n\n  const headers = Object.keys(props.data[0]);\n\n  return (\n    <table className={props.className || ''}>\n      <thead>\n        {headers.map((header: string, i: number) => (\n          <th key={`header_${i}`}>{header}</th>\n        ))}\n      </thead>\n      <tbody>\n        {props.data.map((row: TableRow, i: number) => (\n          <tr key={`tr_${i}`}>\n            {headers.map((header: string, j: number) => (\n              <td key={`tr_${i}_${j}`} data-label={header}>\n                {row[header]}\n              </td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Table;\n","/**\n * @file ResponseHeaders component\n * @author Mattamorphic\n */\n\nimport './css/ResponseHeaders.css';\n\nimport * as utils from '../../../../utils';\n\nimport React from 'react';\nimport Table from '../../../shared/Table';\nimport Toggler from '../../../shared/Toggler';\n\ninterface ResponseHeadersProps {\n  headers: Headers;\n}\n\ninterface ResponseHeadersState {\n  showHeaders: boolean;\n}\n\nexport default class ResponseHeaders extends React.PureComponent<\n  ResponseHeadersProps,\n  ResponseHeadersState\n> {\n  constructor(props: ResponseHeadersProps) {\n    super(props);\n    this.state = {\n      showHeaders: false\n    };\n  }\n\n  parse = (value: string): string | JSX.Element => {\n    if (utils.isStringANumber(value)) {\n      return <span className=\"header-value header-number\">{value}</span>;\n    }\n    if (utils.isStringADate(value)) {\n      return <span className=\"header-value header-date\">{value}</span>;\n    }\n    if (utils.isStringAURL(value)) {\n      return (\n        <span className=\"header-value header-url\">\n          <a href={value}>{value}</a>\n        </span>\n      );\n    }\n    if (utils.isStringBooleanOrNull(value)) {\n      return <span className=\"header-value header-boolean\">{value}</span>;\n    }\n    return <span className=\"header-value header-string\">{value}</span>;\n  };\n\n  toggleHeaders = () => {\n    this.setState(prevState => ({\n      showHeaders: !prevState.showHeaders\n    }));\n  };\n\n  render() {\n    const headerKeys = Array.from(this.props.headers.keys());\n    return (\n      <Toggler\n        className=\"ResponseHeaders\"\n        isToggled={this.state.showHeaders}\n        heading=\"Response Headers\"\n        label=\"Headers\"\n        onToggle={this.toggleHeaders}\n      >\n        <Table\n          className=\"u-max-full-width ResponseHeadersTable\"\n          data={headerKeys.map(key => ({\n            Header: this.parse(key),\n            Value: this.parse(this.props.headers.get(key) || '')\n          }))}\n        />\n      </Toggler>\n    );\n  }\n}\n","/**\n * @file ResponseJson component\n * @author Mattamorphic\n */\nimport './css/ResponseJson.css';\n\nimport * as utils from '../../../../utils';\n\nimport { JsonValueTypes } from '../../../../enums';\nimport React from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport Toggler from '../../../shared/Toggler';\n\ninterface ResponseJsonProps {\n  data: { [key: string]: any };\n}\n\ninterface ResponseJsonState {\n  response: string;\n  showJson: boolean;\n}\n\nexport default class ResponseJson extends React.PureComponent<\n  ResponseJsonProps,\n  ResponseJsonState\n> {\n  constructor(props: ResponseJsonProps) {\n    super(props);\n    this.state = {\n      response: JSON.stringify(props.data, null, 3).replace(\n        utils.regEx.jsonData,\n        this.replacer\n      ),\n      showJson: false\n    };\n  }\n\n  toggleJson = () => {\n    this.setState(prevState => ({\n      showJson: !prevState.showJson\n    }));\n  };\n\n  replacer = (_: string, p1: string, p2: string, p3: string, p4: string) => {\n    const part = { end: p4, indent: p1, key: p2, value: p3 };\n\n    let valueClass = 'json-value';\n    let type = JsonValueTypes.STRING;\n    if (part.value !== undefined && part.value !== null) {\n      if (utils.isStringANumber(part.value)) {\n        valueClass = 'json-number';\n        type = JsonValueTypes.NUMBER;\n      } else if (utils.isStringADate(part.value)) {\n        valueClass = 'json-date';\n        type = JsonValueTypes.DATE;\n      } else if (utils.isStringBooleanOrNull(part.value)) {\n        valueClass = 'json-boolean';\n        type = JsonValueTypes.BOOLEAN;\n      } else if (utils.isStringAURL(part.value)) {\n        valueClass = 'json-url';\n        type = JsonValueTypes.URL;\n      } else {\n        valueClass = 'json-string';\n        type = JsonValueTypes.STRING;\n      }\n    }\n    return ReactDOMServer.renderToString(\n      <>\n        {'\\u00a0'.repeat(part.indent.length)}\n        {part.key && <span className=\"json-key\"> {part.key} </span>}\n        {part.value && (\n          <span className={valueClass}>\n            {type === JsonValueTypes.URL ? (\n              <a href={part.value.replace(utils.regEx.quotes, '')}>\n                {part.value}\n              </a>\n            ) : (\n              part.value\n            )}\n          </span>\n        )}\n        {part.end && <span className=\"json-key\"> {part.end} </span>}\n        <br />\n      </>\n    );\n  };\n\n  render() {\n    return (\n      <Toggler\n        isToggled={this.state.showJson}\n        heading=\"JSON Response\"\n        label=\"Data\"\n        onToggle={this.toggleJson}\n      >\n        <div\n          className=\"ResponseJson\"\n          dangerouslySetInnerHTML={{\n            __html: this.state.response\n          }}\n        />\n      </Toggler>\n    );\n  }\n}\n","/**\n * @file ResponseRaw component\n * @author Mattamorphic\n */\nimport './css/ResponseRaw.css';\n\nimport React from 'react';\nimport Toggler from '../../../shared/Toggler';\n\ninterface ResponseRawProps {\n  data: string;\n}\n\ninterface ResponseRawState {\n  showRaw: boolean;\n}\n\nexport default class ResponseRaw extends React.PureComponent<\n  ResponseRawProps,\n  ResponseRawState\n> {\n  constructor(props: ResponseRawProps) {\n    super(props);\n    this.state = {\n      showRaw: false\n    };\n  }\n\n  toggleRaw = () => {\n    this.setState(prevState => ({\n      showRaw: !prevState.showRaw\n    }));\n  };\n\n  render() {\n    return (\n      <Toggler\n        isToggled={this.state.showRaw}\n        heading=\"Raw Response\"\n        label=\"Raw\"\n        onToggle={this.toggleRaw}\n      >\n        <div className=\"ResponseRaw\">{this.props.data}</div>\n      </Toggler>\n    );\n  }\n}\n","import './css/FetchResponse.css';\n\nimport React from 'react';\nimport ResponseHeaders from './responseheaders/ResponseHeaders';\nimport ResponseJson from './responsejson/ResponseJson';\nimport ResponseRaw from './responseraw/ResponseRaw';\n\ninterface FetchResponseProps {\n  headers: Headers;\n  data: string;\n}\n\nconst FetchResponse: React.FunctionComponent<FetchResponseProps> = props => {\n  let json = {};\n  try {\n    json = JSON.parse(props.data);\n  } catch (_) {\n    json = {};\n  }\n\n  return (\n    <div className=\"FetchResponse\">\n      <ResponseHeaders headers={props.headers} />\n      <ResponseRaw data={props.data} />\n      <ResponseJson data={json} />\n    </div>\n  );\n};\n\nexport default FetchResponse;\n","import './css/Loading.css';\n\nimport React from 'react';\n\ninterface LoadingProps {\n  className?: string;\n}\n\nconst Loading: React.FunctionComponent<LoadingProps> = props => {\n  return (\n    <div className={(props.className || '') + ' LoadingContainer'}>\n      <div className=\"Loading\">\n        <div />\n      </div>\n      <div>Loading</div>\n    </div>\n  );\n};\n\nexport default Loading;\n","/**\n * @file Notice component\n * @author Mattamorphic\n */\nimport './css/Notice.css';\n\nimport React from 'react';\n\ninterface NoticeProps {\n  className?: string;\n  heading: string;\n}\n\nconst Notice: React.FunctionComponent<NoticeProps> = props => {\n  return (\n    <div className={(props.className || '') + ' Notice'}>\n      <h4> {props.heading} </h4>\n      <>{props.children}</>\n    </div>\n  );\n};\n\nexport default Notice;\n","/**\n * @file $COMPONENT component\n * @author Mattamorphic\n */\nimport './css/Confirm.css';\n\nimport Button from './Button';\nimport React from 'react';\n\ninterface ConfirmProps {\n  className?: string;\n  label: string;\n  message: string;\n  onConfirm: () => void;\n  onCancel: () => void;\n  isPrimary?: boolean;\n}\n\nconst Confirm: React.FunctionComponent<ConfirmProps> = props => {\n  const onConfirm = () => {\n    const result = window.confirm(props.message);\n    result ? props.onConfirm() : props.onCancel();\n  };\n\n  return (\n    <Button\n      className={props.className || ''}\n      isPrimary={props.isPrimary || false}\n      label={props.label}\n      onClick={onConfirm}\n    />\n  );\n};\n\nexport default Confirm;\n","/**\n * @file Checkbox component\n * @author Mattamorphic\n */\nimport Input from './Input';\nimport { InputTypes } from '../../enums';\nimport React from 'react';\n\ninterface CheckboxProps {\n  className?: string;\n  isDisabled?: boolean;\n  label?: string;\n  isCheckedLabel?: string;\n  isNotCheckedLabel?: string;\n  name?: string;\n  id?: string;\n  isChecked: boolean;\n  onChange: (value: boolean) => void;\n  value?: string;\n}\n\nconst Checkbox: React.FunctionComponent<CheckboxProps> = props => {\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    props.onChange(e.target.checked);\n  };\n\n  const label = props.isChecked\n    ? props.isCheckedLabel || props.label\n    : props.isNotCheckedLabel || props.label;\n\n  return (\n    <div className={props.className || ''}>\n      <Input\n        id={props.id || ''}\n        isChecked={props.isChecked}\n        isDisabled={props.isDisabled || false}\n        name={props.name || ''}\n        onChangeRaw={onChange}\n        type={InputTypes.CHECKBOX}\n        value={props.value || ''}\n      />\n      <span> {label} </span>\n    </div>\n  );\n};\n\nexport default Checkbox;\n","/**\n * @file Proxy component\n * @author Mattamorphic\n */\n\nimport './css/Proxy.css';\n\nimport * as utils from '../../../../utils';\n\nimport Checkbox from '../../../shared/Checkbox';\nimport Input from '../../../shared/Input';\nimport { InputTypes } from '../../../../enums';\nimport Notice from '../../../shared/Notice';\nimport React from 'react';\nimport Toggler from '../../../shared/Toggler';\n\nexport interface ProxyData {\n  url: string;\n  isEnabled: boolean;\n}\n\ninterface ProxyProps {\n  proxy: ProxyData;\n  onUpdateProxy: (data: ProxyData) => void;\n}\n\ninterface ProxyState {\n  showProxySettings: boolean;\n}\n\nexport default class Proxy extends React.PureComponent<ProxyProps, ProxyState> {\n  constructor(props: ProxyProps) {\n    super(props);\n    this.state = {\n      showProxySettings: false\n    };\n  }\n\n  toggleProxySettings = () => {\n    this.setState(prevState => ({\n      showProxySettings: !prevState.showProxySettings\n    }));\n  };\n\n  onUpdateProxyUrl = (url: string) => {\n    this.props.onUpdateProxy({\n      isEnabled: this.props.proxy.isEnabled,\n      url\n    });\n  };\n\n  onUpdateProxyEnabled = (isEnabled: boolean) => {\n    this.props.onUpdateProxy({\n      isEnabled,\n      url: this.props.proxy.url\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <Toggler\n          className=\"Proxy\"\n          collapsedData={\n            <>\n              {this.props.proxy.isEnabled ? (\n                <>\n                  Proxy [<strong>enabled</strong>] through [\n                  <a href={this.props.proxy.url}>{this.props.proxy.url}</a>]\n                </>\n              ) : (\n                <>\n                  Proxy [<strong>disabled</strong>]\n                </>\n              )}\n            </>\n          }\n          isToggled={this.state.showProxySettings}\n          heading=\"Proxy Settings\"\n          label=\"Proxy Settings\"\n          tooltip=\"Toggle proxy settings\"\n          onToggle={this.toggleProxySettings}\n        >\n          <div className=\"row\">\n            <Notice className=\"u-full-width\" heading=\"Proxy Overview\">\n              Requests are proxied through a copy of cors-anywhere <br />\n              This is hosted on: <a href={utils.PROXY}>{utils.PROXY}</a> <br />\n              You can find the code for this at{' '}\n              <a href=\"https://github.com/Mattamorphic/curlify/tree/proxy\">\n                GitHub\n              </a>{' '}\n              <br />\n              If you&apos;d like to use your own proxy, simply replace the URL{' '}\n              <br />\n              This should follow cors-anywhere entry design <br />\n              This proxy forwards request, gets around the cors issue, and\n              allows us to return headers <br />\n              No data is recorded in the proxy\n            </Notice>\n          </div>\n          <div className=\"row\">\n            <Input\n              className=\"six columns u-full-width\"\n              isDisabled={!this.props.proxy.isEnabled}\n              onChange={this.onUpdateProxyUrl}\n              placeholder=\"Proxy Url\"\n              type={InputTypes.URL}\n              value={this.props.proxy.url}\n            />\n            <Checkbox\n              className=\"checkbox six columns u-full-width\"\n              isChecked={this.props.proxy.isEnabled}\n              isCheckedLabel=\"Proxy is enabled\"\n              isNotCheckedLabel=\"Proxy is not enabled\"\n              onChange={this.onUpdateProxyEnabled}\n              value=\"proxy\"\n            />\n          </div>\n        </Toggler>\n      </>\n    );\n  }\n}\n","import './css/Request.css';\n\nimport Button from '../../shared/Button';\nimport Confirm from '../../shared/Confirm';\nimport React from 'react';\n\nimport Proxy, { ProxyData } from './proxy/Proxy';\n\ninterface RequestProps {\n  shouldConfirm: boolean;\n  incompleteData?: string;\n  hasRun: boolean;\n  proxy: ProxyData;\n  onRequest: () => void;\n  onUpdateProxy: (data: ProxyData) => void;\n}\n\nconst Request: React.FunctionComponent<RequestProps> = props => {\n  const onConfirm = props.onRequest;\n  const onCancel = () => {};\n\n  return (\n    <div className=\"row\">\n      <div className=\"Request\">\n        <Proxy onUpdateProxy={props.onUpdateProxy} proxy={props.proxy} />\n        {props.shouldConfirm ? (\n          <Confirm\n            className=\"u-full-width\"\n            label=\"Test\"\n            message=\"Are you sure?\"\n            onCancel={onCancel}\n            onConfirm={onConfirm}\n          />\n        ) : (\n          <Button\n            className=\"u-full-width\"\n            isPrimary={false}\n            label=\"Test\"\n            onClick={props.onRequest}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Request;\n","import './css/Test.css';\n\nimport * as utils from '../../utils';\n\nimport { ConfigData } from '../config/Config';\nimport { DataData } from '../data/Data';\nimport FetchResponse from './fetchresponse/FetchResponse';\nimport Loading from '../shared/Loading';\nimport Notice from '../shared/Notice';\nimport { ProxyData } from './request/proxy/Proxy';\nimport React from 'react';\nimport Request from './request/Request';\n\nexport interface ValidatePayloadResult {\n  message: string[];\n  success: boolean;\n}\n\ninterface TestProps {\n  config: ConfigData;\n  data: DataData;\n  proxy: ProxyData;\n  addToHistory: (config: ConfigData, data: DataData, status: number) => void;\n  updateConfig: (data: ConfigData) => void;\n  updateData: (data: DataData) => void;\n  updateProxy: (data: ProxyData) => void;\n  validation: ValidatePayloadResult;\n}\n\ninterface TestState {\n  isLoading: boolean;\n  hasRun: boolean;\n  response: {\n    headers?: Headers;\n    data?: string;\n    destination?: URL;\n    status?: number;\n  };\n}\n\nclass Test extends React.PureComponent<TestProps, TestState> {\n  baseState: TestState;\n\n  constructor(props: TestProps) {\n    super(props);\n    this.state = {\n      // has there been an execution\n      hasRun: false,\n      // is the request executing\n      isLoading: false,\n      // hold the response\n      response: {}\n    };\n    this.baseState = this.state;\n  }\n\n  componentDidUpdate(prevProps: TestProps) {\n    if (utils.hasProxyChanged(prevProps.proxy, this.props.proxy)) {\n      this.setState(this.baseState);\n    }\n  }\n\n  getDestination = (): string => {\n    const destination =\n      this.props.config.domain +\n      this.props.config.endpoint +\n      utils.convertObjToQueryParams(this.props.config.queryParams);\n    return this.props.proxy.isEnabled\n      ? this.props.proxy.url + destination\n      : destination;\n  };\n\n  getFetchData = () => {\n    const fetchData: RequestInit = {\n      body: null,\n      headers: new Headers(\n        this.props.config.headers.map(header => [header.key, header.value])\n      ),\n      method: this.props.config.method\n    };\n\n    if (utils.methodHasPayload(this.props.config.method)) {\n      fetchData.body = JSON.stringify(\n        this.props.data.data[this.props.data.type]\n      );\n    }\n    return fetchData;\n  };\n\n  onTest = async () => {\n    // Update the local state\n    this.setState(\n      {\n        hasRun: true,\n        isLoading: true,\n        response: {}\n      },\n      async () => {\n        // Todo: Run our own proxy service instead of using this.\n        const dest = new URL(this.getDestination());\n        let data = null;\n        let response: Response | null = null;\n        try {\n          response = await fetch(dest.href, this.getFetchData());\n          data = await response.text();\n          this.setState({\n            isLoading: false,\n            response: {\n              data,\n              destination: dest,\n              headers: response.headers as Headers,\n              status: response.status\n            }\n          });\n        } catch (_) {\n          this.setState({\n            isLoading: false\n          });\n        } finally {\n          // Store the request in the session history\n          this.props.addToHistory(\n            this.props.config,\n            this.props.data,\n            response ? response.status : 0\n          );\n        }\n      }\n    );\n  };\n\n  render() {\n    if (!this.props.validation.success) {\n      return (\n        <div className=\"row\">\n          <div className=\"Test Disabled\">\n            {this.props.validation.message.map((string, idx) => (\n              <label key={`validation_${idx}`}> {string} </label>\n            ))}\n          </div>\n        </div>\n      );\n    }\n    if (this.state.isLoading) {\n      return (\n        <div className=\"row\">\n          <Loading />\n        </div>\n      );\n    }\n\n    const proxyMessage = `${\n      this.props.proxy.isEnabled ? 'through Proxy' : ''\n    } to ${this.state.response.destination || this.getDestination()}`;\n\n    return (\n      <>\n        <Request\n          hasRun={this.state.hasRun}\n          onRequest={this.onTest}\n          onUpdateProxy={this.props.updateProxy}\n          proxy={this.props.proxy} // Todo: We need to ensure that everything matches up\n          shouldConfirm={false}\n        />\n        {this.state.hasRun &&\n          (this.state.response.headers && this.state.response.data ? (\n            <>\n              <div className=\"row\">\n                <Notice\n                  className=\"twelve columns u-full-width\"\n                  heading=\"Request complete\"\n                >\n                  Request sent {proxyMessage}\n                </Notice>\n              </div>\n              <div className=\"row\">\n                <FetchResponse\n                  data={this.state.response.data}\n                  headers={this.state.response.headers}\n                />\n              </div>\n            </>\n          ) : (\n            <div className=\"row\">\n              <Notice\n                className=\"twelve columns u-full-width\"\n                heading=\"Request Failed\"\n              >\n                Request couldn&apos;t be sent {proxyMessage}\n              </Notice>\n            </div>\n          ))}\n      </>\n    );\n  }\n}\n\nexport default Test;\n","// 'None' imports\nimport './css/App.css';\n\n// 'All' imports\nimport * as utils from './utils';\n\n// 'Single' Imports\nimport Heading from './components/heading/Heading';\nimport Output from './components/output/Output';\nimport { ProxyData } from './components/test/request/proxy/Proxy';\nimport React from 'react';\n\n// 'Multiple' imports\nimport { ColumnCount, DataType, HTTPMethods, OutputType } from './enums';\nimport Config, { ConfigData } from './components/config/Config';\nimport Data, { DataData } from './components/data/Data';\nimport History, { HistoryEntry } from './components/history/History';\nimport Test, { ValidatePayloadResult } from './components/test/Test';\n\ninterface AppProps {}\n\ninterface AppState {\n  config: ConfigData;\n  data: DataData;\n  history: HistoryEntry[];\n  output: OutputState;\n  proxy: ProxyData;\n  validation: ValidatePayloadResult;\n}\n\ninterface OutputState {\n  type: OutputType;\n}\n\nexport default class App extends React.Component<AppProps, AppState> {\n  isStorageAvailable = false;\n\n  constructor(props: AppProps) {\n    super(props);\n    this.state = {\n      config: {\n        domain: 'https://api.github.com',\n        endpoint: '/users/octocat',\n        headers: [],\n        method: HTTPMethods.GET,\n        queryParams: []\n      },\n      data: {\n        data: {\n          form: null,\n          graphQL: { query: 'query {viewer {username}}' },\n          json: { test: 'value' }\n        },\n        type: DataType.JSON\n      },\n      history: utils.getHistory(),\n      output: {\n        type: OutputType.CURL\n      },\n      proxy: {\n        isEnabled: true,\n        url: utils.PROXY\n      },\n      validation: {\n        message: [],\n        success: true\n      }\n    };\n    // Only called once, no need to add to state\n    this.isStorageAvailable = utils.isStorageAvailable();\n  }\n\n  addToHistory = (config: ConfigData, data: DataData, status: number): void => {\n    this.setState(_ => {\n      utils.addToHistory(config, data, status);\n      return {\n        history: utils.getHistory()\n      };\n    });\n  };\n\n  clearHistory = (): void => {\n    window.localStorage.clear();\n    this.setState({\n      history: []\n    });\n  };\n\n  onConfigChange = (config: ConfigData): void => {\n    console.log(config.headers);\n    this.setState(\n      {\n        config: {\n          domain: config.domain,\n          endpoint: config.endpoint,\n          headers: config.headers.map(header => header),\n          method: config.method,\n          queryParams: config.queryParams.map(qp => qp)\n        }\n      },\n      () => this.setState({ validation: this.validatePayload() })\n    );\n  };\n\n  onDataChange = (data: DataData): void => {\n    this.setState(\n      {\n        data\n      },\n      () => this.setState({ validation: this.validatePayload() })\n    );\n  };\n\n  onProxyChange = (proxy: ProxyData): void => {\n    this.setState({\n      proxy\n    });\n  };\n\n  validatePayload = (): ValidatePayloadResult => {\n    const result = {\n      message: [] as string[],\n      success: true\n    };\n    if (!utils.isValidMethod(this.state.config.method)) {\n      result.message.push(\n        `Invalid ${this.state.config.method}, check settings above`\n      );\n      result.success = false;\n    }\n    if (!utils.isValidHeaders(this.state.config.headers)) {\n      result.message.push(`Invalid headers, check settings above`);\n      result.success = false;\n    }\n    if (\n      !utils.isValidURL(this.state.config.domain, this.state.config.endpoint)\n    ) {\n      result.message.push(\n        `Invalid URL ${this.state.config.domain} or ${this.state.config.endpoint}, check settings above`\n      );\n      result.success = false;\n    }\n\n    if (\n      this.state.data.type === DataType.GQL &&\n      !utils.isValidGraphQLString(this.state.data.data.graphQL.query)\n    ) {\n      result.message.push(`Invalid GraphQL string, check settings above`);\n      result.success = false;\n    }\n    return result;\n  };\n\n  render() {\n    const showData = utils.methodHasPayload(this.state.config.method);\n    return (\n      <div className=\"container App\">\n        <div className=\"row\">\n          <Heading imageSrc={process.env.PUBLIC_URL + '/images/banner.png'} />\n        </div>\n        <div className=\"row\">\n          <Config data={this.state.config} updateConfig={this.onConfigChange} />\n        </div>\n        <div className=\"row\">\n          <div className={showData ? ColumnCount.SIX : ColumnCount.TWELVE}>\n            <Output\n              className=\"u-full-width\"\n              config={this.state.config}\n              data={this.state.data}\n              output={this.state.output.type}\n              updateConfig={this.onConfigChange}\n              updateData={this.onDataChange}\n            />\n          </div>\n          {showData && (\n            <div className=\"six columns\">\n              <Data\n                className=\"u-full-width\"\n                data={this.state.data}\n                updateData={this.onDataChange}\n              />\n            </div>\n          )}\n        </div>\n        {this.isStorageAvailable && (\n          <div className=\"row\">\n            <History\n              clearHistory={this.clearHistory}\n              history={this.state.history}\n              updateConfig={this.onConfigChange}\n              updateData={this.onDataChange}\n            />\n          </div>\n        )}\n        <div className=\"row\">\n          <Test\n            addToHistory={this.addToHistory}\n            config={this.state.config}\n            data={this.state.data}\n            proxy={this.state.proxy}\n            updateConfig={this.onConfigChange}\n            updateData={this.onDataChange}\n            updateProxy={this.onProxyChange}\n            validation={this.state.validation}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}