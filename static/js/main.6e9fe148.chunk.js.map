{"version":3,"sources":["enums/index.tsx","components/shared/Select.tsx","components/config/method/Method.tsx","components/data/graphql/GraphQL.tsx","components/config/headers/type/Types.tsx","components/shared/Input.tsx","components/config/headers/value/Value.tsx","components/config/headers/Headers.tsx","components/config/destination/domain/Domain.tsx","components/config/destination/endpoint/Endpoint.tsx","components/config/destination/Destination.tsx","components/config/Config.tsx","components/shared/Button.tsx","components/shared/Copy.tsx","components/shared/Saving.tsx","components/shared/TextArea.tsx","components/data/graphql/type/Type.tsx","components/data/json/Json.tsx","components/data/selector/Selector.tsx","components/data/Data.tsx","components/heading/Heading.tsx","utils/index.ts","components/output/curl/Curl.tsx","components/output/Output.tsx","components/shared/Checkbox.tsx","components/shared/Toggler.tsx","components/shared/Notice.tsx","components/test/request/proxy/Proxy.tsx","components/shared/Confirm.tsx","components/test/request/Request.tsx","components/shared/Table.tsx","components/test/fetchresponse/responseheaders/ResponseHeaders.tsx","components/test/fetchresponse/responsejson/ResponseJson.tsx","components/test/fetchresponse/responseraw/ResponseRaw.tsx","components/test/fetchresponse/FetchResponse.tsx","components/shared/Loading.tsx","components/test/Test.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["HTTPMethods","HTTPHeaders","DataType","OutputType","InputTypes","ColumnCount","JsonValueTypes","Select","props","selected","react_default","a","createElement","Fragment","label","className","name","size","style","disabled","isDisabled","multiple","isMultiple","onChange","value","values","map","i","key","concat","GraphQLType","Method","width","shared_Select","e","target","onUpdate","Object","Types","isFullWidth","index","Input","type","TEXT","checked","isChecked","id","Value","shared_Input","Headers","updateType","header","updateValue","addHeader","preventDefault","length","removeHeader","currentTarget","split","pop","undefined","parseInt","filter","includes","onClick","type_Types","toConsumableArray","value_Value","Domain","URL","Endpoint","Destination","domain","endpoint","domain_Domain","endpoint_Endpoint","Config","headers_Headers","data","headers","push","updateConfig","TWELVE","method_Method","method","TWO","destination_Destination","TEN","Button","isPrimary","Copy","copy","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","navigator","clipboard","writeText","content","stop","apply","this","arguments","shared_Button","Saving","react_transition_group","transitionName","transitionLeave","transitionEnter","transitionEnterTimeout","isSaved","TextArea","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChangeDirect","state","React","Component","Type","GraphQL","updateGraphQL","draft","getDocAndTypeFromGQLString","gql","onUpdateData","query","setState","_","replace","pretty","PrettyMe","shared_Saving","type_Type","shared_Copy","TextArea_TextArea","ref","doc","parse","definitions","operation","print","newProps","PureComponent","Json","updateJson","hasDraft","object","JSON","stringify","Selector","Data","selector_Selector","updateData","Json_Json","json","GQL","GraphQL_GraphQL","graphQL","Heading","src","imageSrc","alt","methodHasPayload","GET","HEAD","PROXY","regEx","url","curlHeader","curlMethod","curlData","dateTimeZoneChars","jsonData","newLine","newLineAndTab","multipleSpaces","quotes","singleEscapedNewLine","isValidMethod","string","isValidURL","charAt","possUrl","match","isValidHeaders","types","reduce","curr","isValidGraphQLString","isStringANumber","isNaN","isStringADate","Date","isStringBooleanOrNull","toLowerCase","isStringAURL","Curl","serializerCurl","config","hasNewConfig","hasNewData","getMethod","getHeaders","newData","getData","domainAndEndpoint","getDomainAndEndpoint","FORM","updateCurl","curl","getValue","regex","utils","exec","payload","join","keys","parsePayloadString","Output","output","CURL","Curl_Curl","Checkbox","isCheckedLabel","isNotCheckedLabel","CHECKBOX","Toggler","isToggled","onToggle","children","Notice","lines","heading","line","Proxy","toggleProxySettings","prevState","showProxySettings","onUpdateProxyUrl","onUpdateProxy","isEnabled","proxy","onUpdateProxyEnabled","isExpanded","shared_Toggler","shared_Notice","placeholder","shared_Checkbox","Confirm","window","confirm","message","onConfirm","onCancel","Request","onRequest","Proxy_Proxy","hasRun","shouldConfirm","shared_Confirm","Table","row","j","data-label","ResponseHeaders","href","toggleHeaders","showHeaders","_this2","shared_Table","Array","from","Header","get","ResponseJson","toggleJson","showJson","replacer","p1","p2","p3","p4","part","indent","end","valueClass","STRING","NUMBER","DATE","BOOLEAN","ReactDOMServer","renderToString","repeat","dangerouslySetInnerHTML","__html","ResponseRaw","toggleRaw","showRaw","FetchResponse","ResponseHeaders_ResponseHeaders","ResponseRaw_ResponseRaw","ResponseJson_ResponseJson","Loading","Test","baseState","getDestination","destination","getFetchData","fetchData","body","onTest","_callee2","_context2","isLoading","response","dest","fetch","sent","text","t0","prevProps","prevProxy","newProxy","validation","success","idx","shared_Loading","proxyMessage","request_Request","updateProxy","fetchresponse_FetchResponse","App","onConfigChange","validatePayload","onDataChange","result","test","form","heading_Heading","process","config_Config","data_Data","output_Output","test_Test","Boolean","location","hostname","ReactDOM","render","App_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6e9fe148.chunk.js","sourcesContent":["export enum HTTPMethods {\n  DELETE = \"DELETE\",\n  GET = \"GET\",\n  HEAD = \"HEAD\",\n  PATCH = \"PATCH\",\n  POST = \"POST\",\n  PUT = \"PUT\",\n};\n\nexport enum HTTPHeaders {\n  \"A-IM\" = \"A-IM\",\n  Accept = \"Accept\",\n  \"Accept-Charset\" = \"Accept-Charset\",\n  \"Accept-Datetime\" = \"Accept-Datetime\",\n  \"Accept-Encoding\" = \"Accept-Encoding\",\n  \"Accept-Language\" = \"Accept-Language\",\n  \"Access-Control-Request-Method\" = \"Access-Control-Request-Method\",\n  \"Access-Control-Request-Headers\" = \"Access-Control-Request-Headers\",\n  Authorization = \"Authorization\",\n  Authentication = \"Authentication\",\n  \"Cache-Control\" = \"Cache-Control\",\n  \"Content-Length\" = \"Content-Length\",\n  \"Content-MD5\" = \"Content-MD5\",\n  \"Content-Type\" = \"Content-Type\",\n  Cookie = \"Cookie\",\n  Date = \"Date\",\n  Expect = \"Expect\",\n  Forwarded = \"Forwarded\",\n  From = \"From\",\n  Host = \"Host\",\n  \"HTTP2-Settings\" = \"HTTP2-Settings\",\n  \"If-Match\" = \"If-Match\",\n  \"If-Modified-Since\" = \"If-Modified-Since\",\n  \"If-None-Match\" = \"If-None-Match\",\n  \"If-Range\" = \"If-Range\",\n  \"If-Unmodified-Since\" = \"If-Unmodified-Since\",\n  \"Max-Forwards\" = \"Max-Forwards\",\n  Pragma = \"Pragma\",\n  \"Proxy-Authorization\" = \"Proxy-Authorization\",\n  Range = \"Range\",\n  Referer = \"Referer\",\n  TE = \"TE\",\n  Upgrade = \"Upgrade\",\n  \"User-Agent\" = \"User-Agent\",\n  Via = \"Via\",\n  Warning = \"Warning\",\n}\n\nexport enum DataType {\n  FORM = \"form\",\n  JSON = \"json\",\n  GQL = \"graphQL\",\n}\n\nexport enum OutputType {\n  CURL = \"curl\",\n}\n\nexport enum InputTypes {\n  BUTTON = \"button\",\n  CHECKBOX = \"checkbox\",\n  COLOR = \"color\",\n  DATE = \"date\",\n  DATETIME_LOCAL = \"datetime-local\",\n  EMAIL = \"email\",\n  FILE = \"file\",\n  HIDDEN = \"hidden\",\n  IMAGE = \"image\",\n  MONTH = \"month\",\n  NUMBER = \"number\",\n  PASSWORD = \"password\",\n  RADIO = \"radio\",\n  RANGE = \"range\",\n  RESET = \"reset\",\n  SEARCH = \"search\",\n  SUBMIT = \"submit\",\n  TEL = \"tel\",\n  TEXT = \"text\",\n  TIME = \"time\",\n  URL = \"url\",\n  WEEK = \"week\",\n}\n\nexport enum ColumnCount {\n  ONE = 'one column',\n  TWO = 'two columns',\n  THREE = 'three columns',\n  FOUR = 'four columns',\n  FIVE = 'five columns',\n  SIX = 'six columns',\n  SEVEN = 'seven columns',\n  EIGHT = 'eight columns',\n  NINE = 'nine columns',\n  TEN =  'ten columns',\n  ELEVEN = 'eleven columns',\n  TWELVE = 'twelve columns',\n}\n\nexport enum JsonValueTypes {\n  NUMBER = 'number',\n  DATE = 'date',\n  BOOLEAN = 'boolean',\n  URL = 'url',\n  STRING = 'string',\n}\n","import React from 'react';\n\ninterface selectProps {\n  className?: string;\n  isDisabled?: boolean;\n  label?: string;\n  name?: string;\n  onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n  selected?: string | string[] | null;\n  style?: {[key: string]: string};\n  values: string[];\n  isMultiple?: boolean;\n  size?: number;\n}\n\nconst Select: React.FunctionComponent<selectProps> = (props) => {\n  const selected = props.selected || '';\n  return (\n    <>\n    { props.label && (<label>{props.label}</label>) }\n    <select\n      className={props.className || ''}\n      name={props.name || ''}\n      size={props.size || 0}\n      style={props.style || {}}\n      disabled={props.isDisabled || false}\n      multiple={props.isMultiple || false}\n      onChange={props.onChange || null}\n      value={selected}>\n      <option value=\"\" disabled>Please Select</option>\n      {props.values.map((value: string, i:number) => (\n        <option\n          value={value}\n          key={`${value}_${i}`}>\n          {value}\n        </option>\n      ))}\n    </select>\n    </>\n  );\n}\n\nexport default Select;\n","import React from 'react';\n\nimport Select from '../../shared/Select';\n\nimport './css/Method.css'\n\nimport {\n  ColumnCount,\n  HTTPMethods,\n} from '../../../enums/';\n\ninterface methodProps {\n  onUpdate: (value: HTTPMethods) => void;\n  selected: HTTPMethods;\n  width: ColumnCount;\n};\n\nconst Method: React.FunctionComponent<methodProps> = (props) => {\n\n  const updateSelected = (\n    e: React.ChangeEvent<HTMLSelectElement>,\n  ): void => {\n    const value: HTTPMethods = e.target.value as HTTPMethods;\n    props.onUpdate(value);\n  }\n\n  return (\n    <div className={props.width}>\n      <Select\n        className=\"u-full-width Method\"\n        label=\"HTTP Method\"\n        onChange={updateSelected}\n        selected={props.selected}\n        values={Object.values(HTTPMethods)} />\n    </div>\n  );\n}\n\nexport default Method;\n","import React from 'react';\nimport {parse, print, OperationDefinitionNode} from 'graphql';\n\nimport Button from '../../shared/Button';\nimport Copy from '../../shared/Copy';\nimport Saving from '../../shared/Saving';\nimport TextArea from '../../shared/TextArea';\nimport Type from './type/Type';\n\nimport './css/GraphQL.css';\n\nimport {gqlPayloadType} from '../Data';\n\nexport enum GraphQLType {\n  QUERY = 'query',\n  MUTATION = 'mutation',\n}\n\ninterface ParsedGQL {\n  gql: string;\n  type: GraphQLType;\n}\n\ninterface GraphQLProps {\n  data: gqlPayloadType;\n  onUpdateData: (value: gqlPayloadType) => void;\n}\n\ninterface GraphQLState {\n  draft: string;\n  isSaved: boolean;\n  type: GraphQLType;\n}\n\nexport default class GraphQL extends React.PureComponent<GraphQLProps, GraphQLState> {\n\n  constructor(props: GraphQLProps) {\n    super(props);\n    const gql = GraphQL.getDocAndTypeFromGQLString(props.data.query);\n    this.state = {\n      draft: gql.gql,\n      isSaved: true,\n      type: gql.type,\n    }\n  }\n\n  static getDocAndTypeFromGQLString(\n    gql: string\n  ): ParsedGQL {\n    const doc = parse(gql);\n    const def: OperationDefinitionNode = doc.definitions[0] as OperationDefinitionNode;\n    const type = def.operation as GraphQLType;\n    return {\n      gql: print(doc),\n      type\n    };\n  }\n\n  static getDerivedStateFromProps(newProps: GraphQLProps, state: GraphQLState): GraphQLState {\n    if (newProps.data.query !== state.draft && !state.isSaved) {\n      return state;\n    }\n    try {\n      const gql = GraphQL.getDocAndTypeFromGQLString(newProps.data.query);\n      return {\n        draft: newProps.data.query,\n        isSaved: true,\n        type: gql.type,\n      };\n\n    } catch (e) {\n      return state;\n    }\n  }\n\n  updateGraphQL = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const draft = e.target.value;\n    try {\n      const gql = GraphQL.getDocAndTypeFromGQLString(draft);\n      if (gql.gql !== this.state.draft) {\n        this.props.onUpdateData(\n          // replace any existing operation with an empty string\n          {query: draft}\n        );\n        this.setState({isSaved: true});\n      } else {\n        this.setState({\n          draft,\n          isSaved:false,\n        });\n      }\n    } catch (_) {\n      this.setState({\n        draft,\n        isSaved: false,\n      });\n    }\n\n\n  }\n\n  updateType = (type: GraphQLType): void => {\n    this.props.onUpdateData(\n      {query: type +  ' ' + this.state.draft.replace(this.state.type, '')},\n    );\n  }\n\n  pretty = () => {\n    this.props.onUpdateData(\n      {query: this.state.type + ' ' + GraphQL.PrettyMe(this.state.draft).replace(this.state.type, '')},\n    );\n  }\n\n  static PrettyMe(gql: string): string {\n    try {\n      return print(parse(gql));\n    } catch (_) {\n      return gql;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"GraphQL\">\n        <div className=\"row\">\n          <div className=\"six columns\">\n            <Saving isSaved={this.state.isSaved} label=\"GraphQL\" />\n          </div>\n          <div className=\"two columns\">\n            <Type\n              className=\"u-full-width\"\n              selected={this.state.type}\n              onUpdate={this.updateType} />\n          </div>\n          <div className=\"two columns\">\n            <Button\n              className=\"u-full-width\"\n              label=\"Pretty\"\n              onClick={this.pretty}\n              isDisabled={!this.state.isSaved}\n              isPrimary={false} />\n          </div>\n          <div className=\"two columns\">\n            <Copy\n              className=\"u-pull-right\"\n              content={GraphQL.PrettyMe(this.state.draft)}\n              label={`Copy GQL data` } />\n          </div>\n        </div>\n        <div className=\"row\">\n          <TextArea\n            isFullWidth={true}\n            onChangeDirect={this.updateGraphQL}\n            ref=\"input_gql\"\n            value={this.state.draft} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport Select from '../../../shared/Select';\n\nimport './css/Types.css';\n\nimport {HTTPHeaders} from '../../../../enums';\n\ninterface TypeProps {\n  index: number;\n  isFullWidth: boolean;\n  values: (HTTPHeaders | string)[];\n  selected: HTTPHeaders | string;\n  onUpdate: (value: HTTPHeaders, index: number) => void;\n}\n\nconst Types: React.FunctionComponent<TypeProps> = (props) => {\n  const updateSelected = (\n    e: React.ChangeEvent<HTMLSelectElement>,\n  ): void => {\n    const value: HTTPHeaders = e.target.value as HTTPHeaders;\n    props.onUpdate(value, props.index);\n  }\n\n  return (\n    <Select\n      className={(props.isFullWidth ? 'u-full-width' : '') + ' Types'}\n      onChange={updateSelected}\n      selected={props.selected}\n      values={props.values} />\n  );\n}\n\nexport default Types;\n","// Import React\nimport React from 'react';\n\n// Import Enums\nimport {InputTypes} from '../../enums';\n\n// Define Interfaces\ninterface InputProps {\n  className?: string;\n  isChecked?: boolean\n  isDisabled?: boolean;\n  label?: string;\n  name?: string;\n  id?: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  placeholder?: string;\n  type?: InputTypes;\n  value?: string;\n}\n\n// Input Component\nconst Input: React.FunctionComponent<InputProps> = (props) => (\n  <>\n  { props.label && (<label>{props.label}</label>) }\n  <input\n    type={props.type || InputTypes.TEXT}\n    checked={props.isChecked}\n    className={props.className || ''}\n    name={props.name || ''}\n    id={props.id || ''}\n    value={props.value || ''}\n    disabled={props.isDisabled}\n    onChange={props.onChange}\n     />\n  </>\n);\n\nexport default Input;\n","import React from 'react';\n\nimport Input from '../../../shared/Input'\n\nimport './css/Value.css'\n\ninterface ValueProps {\n  index: number;\n  isFullWidth: boolean;\n  value: string;\n  onUpdate: (value: string, index: number) => void;\n}\n\nconst Value: React.FunctionComponent<ValueProps> = (props) => {\n  const updateValue = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    props.onUpdate(e.target.value, props.index);\n  }\n\n  return (\n    <Input\n      className={(props.isFullWidth ? 'u-full-width' : '') + ' Value'}\n      onChange={updateValue}\n      value={props.value} />\n  );\n}\n\nexport default Value;\n","import React from 'react';\n\nimport Types from './type/Types';\nimport Value from './value/Value';\n\nimport './css/Headers.css';\n\nimport {\n  ColumnCount,\n  HTTPHeaders,\n} from '../../../enums';\n\nexport interface Header {\n  type: HTTPHeaders | string;\n  value: string;\n};\n\ninterface HeadersProps {\n  onUpdate: (value: Header | null, index: number) => void;\n  selected: Header[];\n  width: ColumnCount,\n}\n\n\nconst Headers: React.FunctionComponent<HeadersProps> = (props) => {\n\n  const updateType = (type: HTTPHeaders, index: number): void => {\n    const header = props.selected[index];\n    header.type = type;\n    props.onUpdate(header, index);\n  }\n\n  const updateValue = (value: string, index: number): void => {\n    const header = props.selected[index];\n    header.value = value;\n    props.onUpdate(header, index);\n  }\n\n  const addHeader = (e: React.MouseEvent<HTMLElement>): void => {\n    e.preventDefault();\n    // create a pending header, add this to the end of the index\n    props.onUpdate(\n      {\n        type: '',\n        value: '',\n      },\n      props.selected.length,\n    );\n  }\n\n  const removeHeader = (e: React.MouseEvent<HTMLElement>): void => {\n    e.preventDefault();\n    const index = e.currentTarget.id.split('_').pop();\n\n    if (index === undefined) {\n      // oh no...\n      return;\n    }\n    props.onUpdate(null, parseInt(index));\n  }\n\n  // Don't allow duplicate headers. \n  const selected = props.selected.map(header => header.type);\n  const values = Object.values(HTTPHeaders).filter(header => !selected.includes(header));\n\n  return (\n\n    <div className={props.width + ' Headers'}>\n      <div className=\"row\">\n        <div className=\"twelve rows\">\n          <label> HTTP Headers </label>\n        </div>\n      </div>\n\n        {\n          props\n            .selected\n            .map(\n              (header: Header, index: number) => (\n\n                <div className=\"row\" key={`${header.type}_${index}`}>\n                {\n                  // TODO: selected and values aren't behaving below\n                }\n                  <div className=\"two columns\">\n                    <button\n                      className='u-full-width'\n                      onClick={removeHeader}\n                      id={`remove_${index}`}>\n                      Remove\n                    </button>\n                  </div>\n                  <div className=\"four columns\">\n                    <Types\n                      index={index}\n                      isFullWidth={true}\n                      values={[...values, header.type]}\n                      selected={header.type}\n                      onUpdate={updateType} />\n                  </div>\n                  <div className=\"four columns\">\n                    <Value\n                      index={index}\n                      isFullWidth={true}\n                      value={header.value || ''}\n                      onUpdate={updateValue} />\n                  </div>\n                  <div className=\"two columns\">\n                    <button\n                      className='u-full-width'\n                      onClick={addHeader}>\n                      Add\n                    </button>\n                  </div>\n                </div>\n            )\n          )\n        }\n        {\n          props.selected.length === 0 && (\n            <div className=\"row\">\n              <button\n                className='u-full-width'\n                onClick={addHeader}>\n                Click to add header\n              </button>\n            </div>\n          )\n        }\n    </div>\n  );\n}\n\nexport default Headers;\n","import React from 'react';\n\nimport Input from '../../../shared/Input'\n\nimport './css/Domain.css';\n\nimport {InputTypes} from '../../../../enums';\n\ninterface DomainProps {\n  isFullWidth: boolean;\n  value: string;\n  onUpdate: (value: string) => void;\n}\n\nconst Domain: React.FunctionComponent<DomainProps> = (props) => {\n  const updateValue = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    props.onUpdate(e.target.value);\n  }\n\n  return (\n    <Input\n      className={(props.isFullWidth ? 'u-full-width' : '') + ' Domain'}\n      onChange={updateValue}\n      type={InputTypes.URL}\n      value={props.value} />\n  );\n}\n\nexport default Domain;\n","import React from 'react';\n\nimport Input from '../../../shared/Input'\n\nimport './css/Endpoint.css';\n\ninterface EndpointProps {\n  isFullWidth: boolean;\n  value: string;\n  onUpdate: (value: string) => void;\n}\n\nconst Endpoint: React.FunctionComponent<EndpointProps> = (props) => {\n  const updateValue = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    ;\n    props.onUpdate(e.target.value);\n  }\n\n  ;\n  return (\n    <Input\n      className={(props.isFullWidth ? 'u-full-width' : '') + ' Endpoint'}\n      onChange={updateValue}\n      value={props.value} />\n  );\n}\n\nexport default Endpoint;\n","import React from 'react';\n\nimport Domain from './domain/Domain';\nimport Endpoint from './endpoint/Endpoint';\n\nimport './css/Destination.css';\n\nimport {ColumnCount} from '../../../enums';\n\ntype DomainOrEndpoint = 'domain' | 'endpoint';\n\ninterface DestinationProps {\n  onUpdate: (domain: string, endpoint: string) => void;\n  domain: string;\n  endpoint: string;\n  width: ColumnCount;\n}\n\nconst Destination: React.FunctionComponent<DestinationProps> = (props) => {\n\n  const onUpdate = (value: string, type: DomainOrEndpoint): void => {\n    props.onUpdate(\n      (type === 'domain') ? value : props.domain,\n      (type === 'endpoint') ? value : props.endpoint,\n    );\n  }\n\n  const onUpdateEndpoint = (endpoint: string): void => {\n    onUpdate(endpoint, 'endpoint');\n  }\n\n  const onUpdateDomain = (domain: string): void => {\n    onUpdate(domain, 'domain');\n  }\n\n  return (\n    <div className={props.width + ' Destination'}>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n        <label> Destination </label>\n        </div>\n      </div>\n      <div className=\"row\">\n          <div className=\"six columns\">\n            <Domain\n              isFullWidth={true}\n              onUpdate={onUpdateDomain}\n              value={props.domain} />\n          </div>\n          <div className=\"six columns\">\n            <Endpoint\n              isFullWidth={true}\n              onUpdate={onUpdateEndpoint}\n              value={props.endpoint} />\n          </div>\n        </div>\n      </div>\n  );\n}\n\nexport default Destination;\n","import React from 'react';\n\nimport Method from './method/Method';\nimport Headers, { Header } from './headers/Headers';\nimport Destination from './destination/Destination';\n\nimport {\n  ColumnCount,\n  HTTPMethods,\n} from '../../enums';\n\nexport interface ConfigData {\n  method: HTTPMethods;\n  headers: Header[];\n  domain: string;\n  endpoint: string;\n}\n\ninterface ConfigProps {\n  data: ConfigData;\n  updateConfig: (data: ConfigData) => void;\n}\n\nconst Config: React.FunctionComponent<ConfigProps> = (props) => {\n  const updateMethod = (value: HTTPMethods) => {\n    const data = props.data;\n    data.method = value;\n    props.updateConfig(data);\n  }\n\n  const updateHeaders = (value: Header | null, index: number): void => {\n    const data = props.data;\n    if (!data.headers[index] && value) {\n      data.headers.push(value);\n    } else {\n      if (!value) {\n        delete data.headers[index];\n        data.headers = data.headers.filter(header => header);\n      } else {\n        data.headers[index] = value;\n      }\n    }\n    props.updateConfig(data);\n  }\n\n  const updateDestination = (domain: string, endpoint: string) => {\n    const data = props.data;\n    data.domain = domain;\n    data.endpoint = endpoint;\n    props.updateConfig(data);\n  }\n\n  return (\n    <>\n      <div className=\"row\">\n        <Headers\n          onUpdate={updateHeaders}\n          selected={props.data.headers}\n          width={ColumnCount.TWELVE} />\n      </div>\n      <div className=\"row\">\n      <Method\n        selected={props.data.method}\n        width={ColumnCount.TWO}\n        onUpdate={updateMethod} />\n      <Destination\n        onUpdate={updateDestination}\n        domain={props.data.domain}\n        endpoint={props.data.endpoint}\n        width={ColumnCount.TEN} />\n      </div>\n    </>\n  );\n}\nexport default Config;\n","import React from 'react';\n\ninterface ButtonProps {\n  className?: string;\n  isDisabled?: boolean;\n  isPrimary: boolean;\n  label: string;\n  onClick: () => void;\n}\n\nconst Button: React.FunctionComponent<ButtonProps> = (props) => {\n  const clickHandler = (e: React.MouseEvent) => {\n    e.preventDefault();\n    props.onClick();\n  }\n\n  return (\n    <input\n      type=\"button\"\n      className={(props.isPrimary ? 'button-primary ' : ' ') + props.className || ' '}\n      disabled={props.isDisabled}\n      onClick={clickHandler}\n      value={props.label} />\n  );\n}\n\nexport default Button;\n","import React from 'react';\n\nimport Button from './Button';\n\ninterface CopyProps {\n  className?: string;\n  label?: string;\n  content: string;\n}\n\nconst Copy: React.FunctionComponent<CopyProps> = (props) => {\n\n  const copy = async () => {\n    await navigator.clipboard.writeText(props.content);\n  }\n\n  return (\n    <Button\n      className={props.className || ''}\n      isPrimary={false}\n      label= {props.label || \"Copy\"}\n      onClick={copy} />\n  )\n}\n\nexport default Copy;\n","import React from 'react';\nimport { CSSTransitionGroup } from 'react-transition-group';\n\nimport './css/Saving.css';\n\ninterface SavingProps {\n  className?: string;\n  label?: string;\n  isSaved: boolean;\n}\n\nconst Saving: React.FunctionComponent<SavingProps> = (props) => {\n\n  return (\n    <CSSTransitionGroup\n      transitionName=\"save-notice\"\n      transitionLeave={false}\n      transitionEnter={true}\n      transitionEnterTimeout={500}>\n      <div\n        className={\n          ((props.isSaved) ? 'Saved' : 'NotSaved')\n          +  \" SavingNotice \"\n          + (props.className || '')\n        }\n        key={\"notice-\" + props.isSaved}>\n        {props.isSaved ? `Saved ${props.label}`  : `${props.label} Not Saved`}\n      </div>\n    </CSSTransitionGroup>\n  )\n}\n\nexport default Saving;\n","import React from 'react';\n\ninterface TextAreaProps {\n  className?: string\n  isFullWidth: boolean\n  onChangeDirect?: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  onUpdate?: (value: string) => void;\n  style?: {\n    [key: string]: string,\n  };\n  value: string;\n}\n\ninterface TextAreaState {}\n\nexport default class TextArea extends React.Component<TextAreaProps, TextAreaState> {\n\n  constructor(props: TextAreaProps) {\n    super(props);\n    this.state = {};\n  }\n\n  onUpdate = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    if (this.props.onChangeDirect) {\n      this.props.onChangeDirect(e);\n    } else if (this.props.onUpdate) {\n      this.props.onUpdate(e.target.value);\n    }\n  }\n\n  render () {\n    return (\n      <textarea\n        className={((this.props.isFullWidth) ? 'u-full-width ' : ' ') + this.props.className || '' }\n        onChange={this.onUpdate}\n        style={this.props.style || {}}\n        value={this.props.value}>\n      </textarea>\n    );\n  }\n}\n","import React from 'react';\n\nimport Select from '../../../shared/Select';\n\nimport './css/Type.css';\n\nimport {GraphQLType} from '../GraphQL';\n\ninterface TypeProps {\n  className?: string;\n  selected: GraphQLType;\n  onUpdate: (type: GraphQLType) => void;\n}\n\nconst Type: React.FunctionComponent<TypeProps> = (props) => {\n  const updateSelected = (\n    e: React.ChangeEvent<HTMLSelectElement>,\n  ): void => {\n    const value: GraphQLType = e.target.value as GraphQLType;\n    props.onUpdate(value);\n  }\n\n  return (\n    <Select\n      className={(props.className || '') + \" Type\"}\n      onChange={updateSelected}\n      selected={props.selected}\n      values={Object.values(GraphQLType)} />\n  );\n}\n\nexport default Type\n","/**\n * @file Curl component\n * @author Mattamorphic\n */\nimport React from 'react';\n\n// Imported components\nimport Button from '../../shared/Button';\nimport Copy from '../../shared/Copy';\nimport Saving from '../../shared/Saving';\nimport TextArea from '../../shared/TextArea';\n\n// CSS imports\nimport './css/Json.css';\n\n// Type imports\nimport {payloadType} from '../Data';\n\ninterface JsonProps {\n  data: payloadType;\n  onUpdateData: (value: payloadType) => void;\n}\n\ninterface JsonState {\n  draft: string;\n  hasDraft: boolean;\n}\n\nexport default class Json extends React.PureComponent<JsonProps, JsonState> {\n\n  constructor(props: JsonProps) {\n    super(props);\n    this.state = {\n      draft: JSON.stringify(props.data, null, 2),\n      hasDraft: false,\n    };\n  }\n\n  /**\n   * @function We have to update the state based on the props, this needs removing\n   *\n   * @param {JsonProps} newProps The new received props\n   * @param {JsonState} state    The current state\n   *\n   * @return {JsonState}\n   */\n  static getDerivedStateFromProps(newProps: JsonProps, state: JsonState): JsonState {\n    let draft = state.draft;\n    let hasDraft = state.hasDraft;\n    if (!state.hasDraft && JSON.stringify(newProps.data) !== JSON.stringify(JSON.parse(state.draft))) {\n      draft = JSON.stringify(newProps.data, null, 2);\n      hasDraft = false;\n    } else {\n      try {\n        JSON.parse(draft);\n        hasDraft = false;\n      } catch(_) {}\n    }\n    return {\n      draft,\n      hasDraft,\n    };\n  }\n\n  /**\n   * @function Update the data from the json string\n   *\n   * @param {string} value The possible json string\n   */\n  updateJson = (value: string) => {\n    this.setState({\n      draft: value,\n      hasDraft: true\n    });\n    try {\n      const object = JSON.parse(value);\n      this.props.onUpdateData(object);\n    } catch (_) {}\n  }\n\n  /**\n   * @function Pretty print the json in the state\n   */\n  pretty = () => {\n    try {\n      this.setState({\n        draft: JSON.stringify(JSON.parse(this.state.draft), null, 2),\n        hasDraft: true,\n      });\n    } catch (_) {\n      return;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Json\">\n        <div className=\"row\">\n          <div className=\"four columns\">\n            <Saving\n              className=\"u-full-width\"\n              isSaved={!this.state.hasDraft}\n              label=\"Json\" />\n          </div>\n          <div className=\"four columns\">\n            <Button\n              className=\"u-full-width\"\n              label=\"Pretty\"\n              onClick={this.pretty}\n              isPrimary={false} />\n          </div>\n          <div className=\"four columns\">\n            <Copy\n              className=\"u-full-width\"\n              content={this.state.draft}\n              label={`Copy JSON data` } />\n          </div>\n        </div>\n        <div className=\"row\">\n          <TextArea\n            isFullWidth={true}\n            onUpdate={this.updateJson}\n            value={this.state.draft} />\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react';\n\nimport Select from '../../shared/Select';\n\nimport './css/Selector.css';\n\nimport {DataType} from '../../../enums';\n\ninterface SelectorProps {\n  className?: string;\n  selected: DataType;\n  onUpdate: (value: DataType) => void;\n}\n\nconst Selector: React.FunctionComponent<SelectorProps> = (props) => {\n  const updateSelected = (\n    e: React.ChangeEvent<HTMLSelectElement>,\n  ): void => {\n    const value: DataType = e.target.value as DataType;\n    props.onUpdate(value);\n  }\n\n  return (\n    <Select\n      className={(props.className || '') + \" Selector\"}\n      onChange={updateSelected}\n      selected={props.selected}\n      values={Object.values(DataType)} />\n  );\n}\n\nexport default Selector;\n","import React from 'react';\n\nimport GraphQL from './graphql/GraphQL';\nimport Json from './json/Json';\nimport Selector from './selector/Selector';\n\nimport './css/Data.css';\n\nimport {\n  DataType,\n} from '../../enums';\n\nexport type payloadType = {[key: string]: any}\nexport type gqlPayloadType = {query: string}\n\nexport interface DataData {\n  type: DataType;\n  data: {\n    [DataType.JSON]: payloadType;\n    [DataType.GQL]: gqlPayloadType;\n    [DataType.FORM]: null;\n  }\n}\n\ninterface DataProps {\n  data: DataData;\n  updateData: (data: DataData) => void;\n}\n\nconst Data: React.FunctionComponent<DataProps> = (props) => {\n  const updateType = (value: DataType) => {\n    const data = props.data;\n    data.type = value;\n    props.updateData(data);\n  }\n\n  const updateJsonData = (value: payloadType) => {\n    const data = props.data;\n    data.data.json = value;\n    props.updateData(data);\n  }\n\n  const updateGraphQLData = (value: gqlPayloadType) => {\n    const data = props.data;\n    data.data.graphQL = value\n    props.updateData(data);\n  }\n\n  return (\n    <div className=\"Data\">\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n          <label> Data </label>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n          <Selector\n            className=\"u-full-width\"\n            selected={props.data.type}\n            onUpdate={updateType} />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n        {\n          props.data.type === DataType.JSON\n            && (<Json data={props.data.data.json} onUpdateData={updateJsonData} />)\n        }\n        {\n          props.data.type === DataType.GQL\n            && (<GraphQL\n              data={props.data.data.graphQL}\n              onUpdateData={updateGraphQLData} />)\n        }\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default Data;\n","import React from 'react';\n\nimport './css/Heading.css'\n\ninterface HeadingProps {\n  imageSrc: string;\n}\n\nconst Heading: React.FunctionComponent<HeadingProps> = (props) => {\n  return (\n    <div className=\"Heading\">\n      <img src={props.imageSrc} alt=\"curlify logo\" />\n\n    </div>\n  );\n}\n\nexport default Heading;\n","import {parse} from 'graphql';\n\nimport {HTTPHeaders, HTTPMethods} from '../enums';\n\n// import {ConfigData} from '../components/config/Config';\n// import {DataData} from '../components/data/Data';\nimport {Header} from '../components/config/headers/Headers';\nimport {ProxyData} from '../components/test/request/proxy/Proxy';\n\nexport const methodHasPayload = (method: HTTPMethods) => (\n  ![HTTPMethods.GET, HTTPMethods.HEAD]\n    .includes(method)\n)\n\nexport const PROXY = \"https://curlify-proxy.herokuapp.com/\";\n\nexport const regEx = {\n  url: /^((?:http(?:s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+))+([\\w\\-\\._~:\\/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+)$/gim,\n  curlHeader: /(?:-H \")([\\w\\d]{1,})(?:\\s{0,}:\\s{0,})(.+?)(?=\")/gim,\n  curlMethod: /(?:-X\\s{0,})(\\w{3,6})/gim,\n  // Todo: convert to /gms https://github.com/babel/babel/pull/10347\n  curlData: /(?:-d\\s{0,}'|\")({.*})(?=['|\"])/gim,\n  dateTimeZoneChars: /[T|Z]/gim,\n  jsonData: /^( *)(\"[^\"]+\": )?(\"[^\"].*\"|[\\w.+-]*)?([{}[\\],]*)?$/mg,\n  newLine: /[\\r|\\n]/gm,\n  newLineAndTab: /[\\n|\\r|\\t]/gm,\n  multipleSpaces: / +/gm,\n  quotes:/[\\\"\\']/gim,\n  singleEscapedNewLine: /(?<!\\\\)\\\\n/gm,\n\n};\n\n// export const hasDataChanged = (\n//   prevData: DataData,\n//   newData: DataData\n// ): boolean => {\n//   return false;\n// }\n//\n// export const hasConfigChanged = (\n//   prevData: DataData,\n//   newData: DataData\n// ): boolean => {\n//   return false;\n// }\n\nexport const hasProxyChanged = (\n  prevProxy: ProxyData,\n  newProxy: ProxyData\n): boolean => {\n  return prevProxy.isEnabled !== newProxy.isEnabled\n    || prevProxy.url !== newProxy.url;\n}\n\nexport const isValidMethod = (string: string): boolean => (\n  Object\n  .values(HTTPMethods)\n  .includes(string)\n)\n\nexport const isValidURL = (domain: string, endpoint: string): boolean => {\n  const url = domain\n    + ((domain.charAt(domain.length-1) !== '/' && endpoint.charAt(0) !== '/')\n      ? '/'\n      : '')\n    + endpoint;\n\n  const possUrl = (url).match(regEx.url);\n  return (!possUrl || possUrl[0] !== url) ? false : true;\n}\n\nexport const isValidHeaders = (headers: Header[]): boolean => {\n  const types = Object.values(HTTPHeaders)\n  return headers.reduce(\n    (_: boolean, curr: Header) => {\n      return types.includes(curr.type); // TODO: validate the value\n    },\n    true,\n  );\n}\n\nexport const isValidJsonString = (json: string) => {\n  try {\n    JSON.parse(json);\n    return true;\n  } catch (_) {\n    return false;\n  }\n}\n\nexport const isValidGraphQLString = (gql: string) => {\n  try {\n    parse(gql);\n    return true;\n  } catch (_) {\n    return false;\n  }\n}\n\nexport const isStringANumber = (value: string): boolean => {\n  return !isNaN(parseInt(value));\n}\n\nexport const isStringADate = (value: string): boolean => {\n  return !isNaN(Date.parse(value.replace(regEx.dateTimeZoneChars, ' ')));\n}\n\nexport const isStringBooleanOrNull = (value: string): boolean => {\n  const permitted = ['true', 'false', 'null', 'nil', 'undefined'];\n  return (permitted.includes(value.toLowerCase()));\n}\n\nexport const isStringAURL = (value: string): boolean => {\n  return !!value.replace(regEx.quotes, '').match(regEx.url);\n}\n","/**\n * @file Curl component\n * @author Mattamorphic\n */\nimport React from 'react';\n\n// Imported components\nimport Copy from '../../shared/Copy';\nimport Saving from '../../shared/Saving';\nimport TextArea from '../../shared/TextArea';\n\n// Resuable helper functions / objects\nimport * as utils from '../../../utils';\n\n// Imported types / interfaces\nimport {ConfigData} from '../../config/Config';\nimport {DataData, payloadType} from '../../data/Data';\nimport {Header} from '../../config/headers/Headers';\n\n// CSS imports\nimport './css/Curl.css';\n\n// Enum imports\nimport {\n  DataType,\n  HTTPHeaders,\n  HTTPMethods,\n} from '../../../enums';\n\ninterface DomainAndEndpoint {\n  domain: string | null;\n  endpoint: string | null;\n}\n\ninterface SerializedCurl {\n  config: ConfigData;\n  data: DataData;\n  hasNewData: boolean;\n  hasNewConfig: boolean;\n}\n\ninterface CurlProps {\n  config: ConfigData;\n  data: DataData;\n  updateConfig: (data: ConfigData) => void;\n  updateData: (data: DataData) => void;\n}\n\ninterface CurlState {\n  draft: string;\n  hasDraft: boolean;\n}\n\nexport default class Curl extends React.Component<CurlProps, CurlState>  {\n\n  constructor(props: CurlProps) {\n    super(props);\n    this.state = {\n      draft: Curl.getValue(props.config, props.data),\n      hasDraft: false,\n    };\n  }\n\n\n  static getDerivedStateFromProps(newProps: CurlProps, state: CurlState): CurlState {\n    const draft = (state.hasDraft)\n      ? state.draft\n      : Curl.getValue(newProps.config, newProps.data);\n\n    return {\n      hasDraft: state.hasDraft,\n      draft,\n    };\n  }\n\n  /**\n   * @function Get the headers from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {Header[] | null}\n   */\n  getHeaders(value: string): Header[] | null {\n    const regex = utils.regEx.curlHeader;\n    const headers = [];\n    let match = null;\n    while (match = regex.exec(value)) {\n      headers.push({\n        type: match[1] as HTTPHeaders,\n        value: match[2] as string,\n      });\n    }\n    if (headers.length === 0) {\n      return null;\n    }\n    return headers;\n  }\n\n  /**\n   * @function Get the method from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {HTTPMethods | null}\n   */\n  getMethod(value: string): HTTPMethods | null {\n    const regex = utils.regEx.curlMethod;\n    if (!value.match(regex)) {\n      return null;\n    }\n    const match = regex.exec(value);\n    if (!match) {\n      return null;\n    }\n    return match[1] as HTTPMethods;\n  }\n\n  /**\n   * @function Get the data from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {payloadType | null}\n   */\n  getData(value: string): payloadType | null {\n    const regex = utils.regEx.curlData;\n    if (!value.match(regex)) {\n      return null;\n    }\n    const match = regex.exec(value);\n    if (!match) {\n      return null;\n    }\n    try {\n      return JSON.parse(match[1]);\n    } catch (_) {\n      return null;\n    }\n  }\n\n  /**\n   * @function Get the domain and endpoint from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {DomainAndEndpoint | null}\n   */\n  getDomainAndEndpoint(value: string): DomainAndEndpoint | null {\n    const regex = utils.regEx.url;\n    if (!value.match(regex)) {\n      return null;\n    }\n    const match = regex.exec(value);\n    if (!match) {\n      return null;\n    }\n    return {\n      domain: match[1] || null,\n      endpoint: match[2] || null,\n    };\n  }\n\n  /**\n   * @function Serialize a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {SerializedCurl}\n   */\n  serializerCurl = (value: string): SerializedCurl => {\n    // Get the current values\n    const config = this.props.config;\n    const data = this.props.data;\n\n    let hasNewConfig = false;\n    let hasNewData = false;\n\n    // Only update if we have a match :)\n\n     // decide which method to use\n    const method = this.getMethod(value);\n\n    // decide which headers to use\n    const headers = this.getHeaders(value);\n\n    // decide which data to use\n    const newData = this.getData(value);\n\n    // decide which domain and endpoint to use\n    const domainAndEndpoint = this.getDomainAndEndpoint(value);\n\n    if (\n      method\n      && method !== config.method\n      && Object.values(HTTPMethods).includes(method)\n    ) {\n      hasNewConfig = true;\n      config.method = method;\n    }\n\n    // Todo - this needs to actually check the header\n    if (headers) {\n      hasNewConfig = true;\n      config.headers = headers;\n    }\n    if (newData && JSON.stringify(newData) !== JSON.stringify(data.data[data.type])) {\n      hasNewData = true;\n      switch (data.type) {\n        case DataType.GQL:\n          data.data.graphQL.query = newData.query;\n          break;\n        case DataType.JSON:\n          data.data.json = newData;\n          break;\n        case DataType.FORM:\n          break;\n      }\n    }\n    if (domainAndEndpoint) {\n      if (domainAndEndpoint.domain && domainAndEndpoint.domain !== config.domain) {\n        hasNewConfig = true;\n        config.domain = domainAndEndpoint.domain;\n      }\n      if (domainAndEndpoint.endpoint && domainAndEndpoint.endpoint !== config.endpoint) {\n        hasNewConfig = true;\n        config.endpoint = domainAndEndpoint.endpoint;\n      }\n    }\n\n    return {\n      config,\n      data,\n      hasNewConfig,\n      hasNewData,\n    };\n  }\n\n  /**\n   * @function Update the data from the curl string\n   *\n   * @param {string} value The curl string\n   */\n  updateCurl = (value: string): void => {\n    const curl = this.serializerCurl(value);\n\n    if (curl.hasNewData || curl.hasNewConfig) {\n      this.setState({draft: value, hasDraft: false}, () => {\n        curl.hasNewData && this.props.updateData(curl.data);\n        curl.hasNewConfig && this.props.updateConfig(curl.config);\n      });\n    }\n    if (!curl.hasNewData && !curl.hasNewConfig) {\n      this.setState({draft: value, hasDraft: true});\n    }\n  }\n\n  /**\n   * @function Pass the config and data into a curl string\n   *\n   * @params {ConfigData} config The Configuration data for the curl request\n   * @params {DataData}   data   The data for the curl request\n   */\n  static getValue(\n    config: ConfigData,\n    data: DataData,\n  ): string {\n    let payload = {};\n    switch (data.type) {\n      case DataType.JSON:\n        payload = data.data.json;\n        break;\n      case DataType.GQL:\n        payload = data.data.graphQL;\n        break;\n      case DataType.FORM:\n        break;\n    }\n\n    return \"curl -X \" + config.method + \" \\\\ \\n\"\n       + (config.headers.map(header => \"-H \\\"\" + header.type + \": \" + header.value + \"\\\" \\\\ \\n\").join(''))\n       + ((payload && Object.keys(payload).length > 0 && utils.methodHasPayload(config.method))\n         ? \"-d '\" + Curl.parsePayloadString(JSON.stringify(payload)) + \"' \\\\ \\n\" : '')\n       + config.domain + config.endpoint;\n  }\n\n  /**\n   * @function Parse a string remove new line / tab and remove multiple spaces\n   *\n   * @param {string} value\n   */\n  static parsePayloadString(value: string): string {\n    return value\n      .replace(utils.regEx.newLineAndTab, '')\n      .replace(utils.regEx.multipleSpaces, ' ')\n      .replace(utils.regEx.singleEscapedNewLine, '');\n  }\n\n  render () {\n    return (\n      <div className=\"Curl\">\n        <div className=\"row\">\n          <TextArea\n            isFullWidth={true}\n            onUpdate={this.updateCurl}\n            value={this.state.draft} />\n        </div>\n        <div className=\"row\">\n          <div className=\"ten columns\">\n            <Saving className=\"u-pull-left\" isSaved={!this.state.hasDraft} label=\"Curl\" />\n          </div>\n          <div className=\"two columns\">\n            <Copy\n              className=\"u-pull-right\"\n              content={this.state.draft}\n              label={`Copy Curl data` } />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport {ConfigData} from '../config/Config';\nimport Curl from './curl/Curl';\nimport {DataData} from '../data/Data';\n\nimport './css/Output.css';\n\nimport {OutputType} from '../../enums';\n\ninterface OutputProps {\n  config: ConfigData;\n  data: DataData;\n  output: OutputType;\n  updateConfig: (data: ConfigData) => void;\n  updateData: (data: DataData) => void;\n}\n\nconst Output: React.FunctionComponent<OutputProps> = (props) => {\n  return (\n    <div className=\"Output\">\n      {\n        (props.output === OutputType.CURL) && (\n          <Curl\n            config={props.config}\n            data={props.data}\n            updateConfig={props.updateConfig}\n            updateData={props.updateData} />\n        )\n      }\n    </div>\n  );\n}\n\nexport default Output;\n","/**\n * @file Checkbox component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport Input from './Input';\nimport {InputTypes} from '../../enums';\n\ninterface CheckboxProps {\n  className?: string;\n  isDisabled?: boolean;\n  label?: string;\n  isCheckedLabel?: string;\n  isNotCheckedLabel?: string;\n  name?: string;\n  id?: string;\n  isChecked: boolean;\n  onChange: (value: boolean) => void;\n  value?: string;\n}\n\nconst Checkbox: React.FunctionComponent<CheckboxProps> = (props) => {\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    props.onChange(e.target.checked)\n  }\n\n  const label = props.isChecked\n    ? props.isCheckedLabel || props.label\n    : props.isNotCheckedLabel || props.label\n\n  return (\n    <div className={props.className || ''}>\n      <Input\n        type={InputTypes.CHECKBOX}\n        isChecked={props.isChecked}\n        isDisabled={props.isDisabled || false}\n        name={props.name || ''}\n        id={props.id || ''}\n        onChange={onChange}\n        value={props.value || ''} />\n      <span> {label} </span>\n    </div>\n  )\n};\n\nexport default Checkbox;\n","import React from 'react';\n\nimport Button from './Button';\n\ninterface TogglerProps {\n  className?: string;\n  label: string;\n  onToggle: () => void;\n  isToggled: boolean;\n}\n\nconst Toggler: React.FunctionComponent<TogglerProps> = (props) => {\n\n  return (\n    <div className={props.className || ''}>\n      <div className=\"row\">\n      <Button\n        className=\"u-full-width\"\n        isPrimary={false}\n        label= {(!props.isToggled ? 'Show ' : 'Hide ') + props.label}\n        onClick={props.onToggle} />\n      </div>\n      {\n        props.isToggled && (\n          <div className=\"row\">{props.children}</div>\n        )\n      }\n    </div>\n  )\n}\n\nexport default Toggler;\n","/**\n * @file Notice component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport './css/Notice.css';\n\ninterface NoticeProps {\n  className?: string;\n  heading: string;\n  content: string;\n}\n\nconst Notice: React.FunctionComponent<NoticeProps> = (props) => {\n  const lines = props.content.split(\"\\n\");\n\n  return (\n    <div className={(props.className || '') + ' Notice'}>\n      <h4> {props.heading} </h4>\n      {\n        lines.map(line => (<>{line} <br /></>))\n      }\n    </div>\n  )\n};\n\nexport default Notice;\n","/**\n * @file Proxy component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport Checkbox from '../../../shared/Checkbox';\nimport Toggler from '../../../shared/Toggler';\nimport Input from '../../../shared/Input';\nimport Notice from '../../../shared/Notice';\nimport {InputTypes} from '../../../../enums';\n\nimport './css/Proxy.css'\n\nimport * as utils from '../../../../utils';\n\nexport interface ProxyData {\n  url: string,\n  isEnabled: boolean\n}\n\ninterface ProxyProps {\n  isExpanded: boolean;\n  proxy: ProxyData;\n  onUpdateProxy: (data: ProxyData) => void;\n}\n\ninterface ProxyState {\n  showProxySettings: boolean;\n}\n\nexport default class Proxy extends React.PureComponent<ProxyProps, ProxyState> {\n\n  constructor(props: ProxyProps) {\n    super(props);\n    this.state = {\n      showProxySettings: props.isExpanded,\n    };\n  }\n\n  toggleProxySettings = () => {\n    this.setState(prevState => ({\n      showProxySettings: !prevState.showProxySettings,\n    }));\n  }\n\n  onUpdateProxyUrl = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.props.onUpdateProxy({\n      url: e.target.value,\n      isEnabled: this.props.proxy.isEnabled,\n    })\n  }\n\n  onUpdateProxyEnabled = (isEnabled: boolean) => {\n    this.props.onUpdateProxy({\n      url: this.props.proxy.url,\n      isEnabled\n    })\n  }\n\n  render() {\n\n    return (\n      <Toggler\n        isToggled={this.state.showProxySettings}\n        className=\"Proxy\"\n        label=\"Proxy Settings\"\n        onToggle={this.toggleProxySettings}>\n        <div className=\"row\">\n          <Notice\n            className=\"twelve columns u-full-width\"\n            heading=\"Proxy Overview\"\n            content={\"Requests are proxied through a copy of cors-anywhere\\n\"\n              + `This is hosted on: ${utils.PROXY}${\"\\n\"}`\n              + \"You can find the code for this at https://github.com/Mattamorphic/curlify/tree/proxy\\n\"\n              + \"If you'd like to use your own proxy, simply replace the URL\\n\"\n              + \"This should follow cors-anywhere entry design\\n\"\n              + \"This proxy forwards request, gets around the cors issue, and allows us to return headers\\n\"\n              + \"No data is recorded in the proxy\\n\"} />\n        </div>\n        <div className=\"row\">\n          <Input\n            className=\"six columns u-full-width\"\n            isDisabled={!this.props.proxy.isEnabled}\n            type={InputTypes.URL}\n            onChange={this.onUpdateProxyUrl}\n            placeholder=\"Proxy Url\"\n            value={this.props.proxy.url} />\n          <Checkbox\n            className=\"checkbox six columns u-full-width\"\n            isChecked={this.props.proxy.isEnabled}\n            isCheckedLabel=\"Proxy is enabled\"\n            isNotCheckedLabel=\"Proxy is not enabled\"\n            onChange={this.onUpdateProxyEnabled}\n            value=\"proxy\" />\n        </div>\n      </Toggler>\n    );\n  }\n}\n","/**\n * @file $COMPONENT component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport Button from './Button';\n\nimport './css/Confirm.css';\n\ninterface ConfirmProps {\n  className?: string;\n  label: string;\n  message: string;\n  onConfirm: () => void;\n  onCancel: () => void;\n  isPrimary?: boolean;\n}\n\nconst Confirm: React.FunctionComponent<ConfirmProps> = (props) => {\n\n  const onConfirm = () => {\n    const result = window.confirm(props.message);\n    result ? props.onConfirm() : props.onCancel();\n  }\n\n  return (\n    <Button\n      className={props.className || ''}\n      isPrimary={props.isPrimary || false}\n      label={props.label}\n      onClick={onConfirm} />\n  )\n};\n\nexport default Confirm;\n","import React from 'react';\n\nimport Proxy, {ProxyData} from './proxy/Proxy';\n\nimport './css/Request.css';\n\nimport Button from '../../shared/Button';\nimport Confirm from '../../shared/Confirm';\n\n\ninterface RequestProps {\n  shouldConfirm: boolean;\n  incompleteData?: string;\n  hasRun: boolean;\n  proxy: ProxyData;\n  onRequest: () => void;\n  onUpdateProxy: (data: ProxyData) => void;\n}\n\nconst Request: React.FunctionComponent<RequestProps> = (props) => {\n  const onConfirm = props.onRequest;\n  const onCancel = () => {};\n\n\n  return (\n    <div className=\"row\">\n      <div className=\"Request\">\n        <Proxy\n          isExpanded={!props.hasRun}\n          proxy={props.proxy}\n          onUpdateProxy={props.onUpdateProxy} />\n        {\n          props.shouldConfirm\n            ? <Confirm\n                className=\"u-full-width\"\n                label=\"Test\"\n                onConfirm={onConfirm}\n                onCancel={onCancel}\n                message=\"Are you sure?\" />\n            :  <Button\n                className=\"u-full-width\"\n                isPrimary={false}\n                label=\"Test\"\n                onClick={props.onRequest} />\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default Request;\n","/**\n * @file Table component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport './css/Table.css';\n\nexport interface TableRow {\n  [key: string]: string | JSX.Element;\n}\n\ninterface TableProps {\n  className?: string\n  data: TableRow[]\n}\n\nconst Table: React.FunctionComponent<TableProps> = (props) => {\n  if (props.data.length === 0) {\n    return <table className={props.className || ''} />\n  }\n\n  const headers = Object.keys(props.data[0])\n\n  return (\n    <table className={props.className || ''}>\n      <thead>\n        {\n          headers.map(\n            (header: string, i: number) => (\n              <th key={`header_${i}`}>{header}</th>\n            )\n          )\n        }\n      </thead>\n      <tbody>\n      {\n\n        props.data.map(\n          (row: TableRow, i: number) => (\n            <tr key={`tr_${i}`}>\n              {\n                headers.map(\n                  (header: string, j: number) => (\n                    <td key={`tr_${i}_${j}`} data-label={header}>\n                      {row[header]}\n                    </td>\n                  )\n                )\n              }\n            </tr>\n          )\n        )\n      }\n      </tbody>\n    </table>\n  );\n};\n\nexport default Table;\n","/**\n * @file ResponseHeaders component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport Table from '../../../shared/Table';\nimport Toggler from '../../../shared/Toggler';\n\nimport './css/ResponseHeaders.css';\n\nimport * as utils from '../../../../utils';\n\ninterface ResponseHeadersProps {\n  headers: Headers;\n}\n\ninterface ResponseHeadersState {\n  showHeaders: boolean\n}\n\nexport default class ResponseHeaders extends React.PureComponent<\n  ResponseHeadersProps,\n  ResponseHeadersState> {\n  constructor(props: ResponseHeadersProps) {\n    super(props);\n    this.state = {\n      showHeaders: false,\n    };\n  }\n\n  parse = (value: string): string | JSX.Element => {\n\n    if (utils.isStringANumber(value)) {\n      return (<span className='header-value header-number'>{value}</span>);\n    }\n    if (utils.isStringADate(value)) {\n      return (<span className='header-value header-date'>{value}</span>);\n    }\n    if (utils.isStringAURL(value)) {\n      return (\n        <span className='header-value header-url'>\n          <a href={value}>{value}</a>\n        </span>\n      );\n    }\n    if (utils.isStringBooleanOrNull(value)) {\n      return (<span className='header-value header-boolean'>{value}</span>);\n    }\n    return <span className='header-value header-string'>{value}</span>;\n  }\n\n  toggleHeaders = () => {\n    this.setState(prevState => ({\n      showHeaders: !prevState.showHeaders\n    }));\n  }\n\n  render() {\n\n    return (\n      <Toggler\n        isToggled={this.state.showHeaders}\n        className=\"Headers\"\n        label=\"Headers\"\n        onToggle={this.toggleHeaders}>\n        <Table\n          className=\"u-max-full-width ResponseHeadersTable\"\n          data={\n            Array.from(this.props.headers.keys()).map(\n              key => ({\n                Header: this.parse(key),\n                Value: this.parse(this.props.headers.get(key) || ''),\n              })\n            )\n          } />\n      </Toggler>\n    );\n  }\n}\n","/**\n * @file ResponseJson component\n * @author Mattamorphic\n */\nimport React from 'react';\nimport ReactDOMServer from 'react-dom/server';\n\nimport Toggler from '../../../shared/Toggler';\n\nimport './css/ResponseJson.css'\n\nimport * as utils from '../../../../utils';\n\nimport {JsonValueTypes} from '../../../../enums';\n\ninterface ResponseJsonProps {\n  data: {[key: string]: any}\n}\n\ninterface ResponseJsonState {\n  showJson: boolean;\n}\n\nexport default class ResponseJson extends React.PureComponent<\n  ResponseJsonProps,\n  ResponseJsonState> {\n\n  constructor(props: ResponseJsonProps) {\n    super(props);\n    this.state = {\n      showJson: false,\n    };\n  }\n\n  toggleJson = () => {\n    this.setState(prevState => ({\n      showJson: !prevState.showJson,\n    }));\n  }\n\n  replacer = (_: string, p1: string, p2: string, p3: string, p4: string) => {\n    const part = { indent: p1, key: p2, value: p3, end: p4 };\n\n    let valueClass = \"json-value\";\n    let type = JsonValueTypes.STRING;\n    if (part.value !== undefined && part.value !== null) {\n      if (utils.isStringANumber(part.value)) {\n        valueClass = \"json-number\";\n        type = JsonValueTypes.NUMBER;\n      } else if (utils.isStringADate(part.value)) {\n        valueClass = \"json-date\";\n        type = JsonValueTypes.DATE;\n      } else if (utils.isStringBooleanOrNull(part.value)) {\n        valueClass = \"json-boolean\";\n        type = JsonValueTypes.BOOLEAN;\n      } else if (utils.isStringAURL(part.value)) {\n        valueClass = \"json-url\";\n        type = JsonValueTypes.URL;\n      } else {\n        valueClass = \"json-string\";\n        type = JsonValueTypes.STRING;\n      }\n    }\n    return ReactDOMServer.renderToString(\n      <>\n        {\"\\u00a0\".repeat(part.indent.length)}\n        {part.key && <span className=\"json-key\"> {part.key} </span>}\n        {\n          part.value\n          &&\n            <span className={valueClass}>\n              {\n                type === JsonValueTypes.URL\n                  ? (\n                    <a href={part.value.replace(utils.regEx.quotes, '')}>\n                      {part.value}\n                    </a>\n                  )\n                  : part.value\n              }\n            </span>\n        }\n        {part.end && <span className=\"json-key\"> {part.end} </span>}\n        <br />\n      </>\n    );\n  }\n\n  render() {\n    return (\n      <Toggler\n        isToggled={this.state.showJson}\n        label=\"Data\"\n        onToggle={this.toggleJson}>\n        <div\n          className=\"ResponseJson\"\n          dangerouslySetInnerHTML={{__html:\n            JSON.stringify(this.props.data, null, 3)\n              .replace(\n                utils.regEx.jsonData,\n                this.replacer,\n              )\n          }} />\n      </Toggler>\n    );\n  }\n\n}\n","/**\n * @file ResponseRaw component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport Toggler from '../../../shared/Toggler';\n\nimport './css/ResponseRaw.css';\n\ninterface ResponseRawProps {\n  data: string;\n}\n\ninterface ResponseRawState {\n  showRaw: boolean;\n}\n\nexport default class ResponseRaw extends React.PureComponent<\n  ResponseRawProps,\n  ResponseRawState> {\n\n  constructor(props: ResponseRawProps) {\n    super(props);\n    this.state = {\n      showRaw: false,\n    };\n  }\n\n  toggleRaw = () => {\n    this.setState(prevState => ({\n      showRaw: !prevState.showRaw,\n    }));\n  }\n\n  render() {\n    return (\n      <Toggler\n        isToggled={this.state.showRaw}\n        label=\"Raw\"\n        onToggle={this.toggleRaw}>\n          <div className=\"ResponseRaw\">\n            {this.props.data}\n          </div>\n      </Toggler>\n    );\n  }\n\n}\n","import React from 'react';\n\nimport ResponseHeaders from './responseheaders/ResponseHeaders';\nimport ResponseJson from './responsejson/ResponseJson';\nimport ResponseRaw from './responseraw/ResponseRaw';\n\nimport './css/FetchResponse.css';\n\ninterface FetchResponseProps {\n  headers: Headers,\n  data: string;\n}\n\nconst FetchResponse: React.FunctionComponent<FetchResponseProps> = (props) => {\n  let json = {}\n  try {\n    json = JSON.parse(props.data)\n  } catch (_) {}\n\n  return (\n    <div className=\"FetchResponse\">\n      <ResponseHeaders headers={props.headers} />\n      <ResponseRaw data={props.data} />\n      <ResponseJson data={json} />\n    </div>\n  );\n}\n\nexport default FetchResponse;\n","import React from 'react';\n\nimport './css/Loading.css';\n\ninterface LoadingProps {\n  className?: string;\n}\n\nconst Loading: React.FunctionComponent<LoadingProps> = (props) => {\n  return (\n    <div className={(props.className || '') + \" LoadingContainer\"}>\n      <div className=\"Loading\">\n        <div />\n      </div>\n      <div>\n        Loading\n      </div>\n    </div>\n  );\n}\n\nexport default Loading;\n","import React from 'react';\n\nimport Request from './request/Request';\nimport FetchResponse from './fetchresponse/FetchResponse';\nimport Loading from '../shared/Loading';\nimport Notice from '../shared/Notice';\n\nimport './css/Test.css';\n\nimport {ConfigData} from '../config/Config';\nimport {DataData} from '../data/Data';\nimport {ProxyData} from './request/proxy/Proxy';\n\nimport * as utils from '../../utils';\n\nexport interface ValidatePayloadResult {\n  message: string[];\n  success: boolean;\n}\n\ninterface TestProps {\n  config: ConfigData;\n  data: DataData;\n  proxy: ProxyData;\n  updateConfig: (data: ConfigData) => void;\n  updateData: (data: DataData) => void;\n  updateProxy: (data: ProxyData) => void;\n  validation: ValidatePayloadResult;\n}\n\ninterface TestState {\n  isLoading: boolean;\n  hasRun: boolean;\n  response: {\n    headers?: Headers,\n    data?: string,\n  };\n}\n\nclass Test extends React.PureComponent<TestProps, TestState> {\n\n  baseState: TestState;\n\n  constructor(props: TestProps) {\n    super(props);\n    this.state = {\n      // is the request executing\n      isLoading: false,\n      // has there been an execution\n      hasRun: false,\n      // hold the response\n      response: {},\n    };\n    this.baseState = this.state;\n  }\n\n  componentDidUpdate(prevProps: TestProps) {\n    if (utils.hasProxyChanged(prevProps.proxy, this.props.proxy)) {\n      this.setState(this.baseState);\n    }\n  }\n\n\n  getDestination = (): string => {\n    const destination = this.props.config.domain + this.props.config.endpoint;\n    return this.props.proxy.isEnabled\n      ? this.props.proxy.url + destination\n      : destination;\n  }\n\n  getFetchData = () => {\n    const fetchData: RequestInit = {\n      method: this.props.config.method,\n      body: null,\n      headers: new Headers(\n        this.props.config.headers.map(header => [header.type, header.value]),\n      ),\n    };\n\n    if (utils.methodHasPayload(this.props.config.method)) {\n      fetchData.body = JSON.stringify(this.props.data.data[this.props.data.type]);\n    }\n    return fetchData;\n  }\n\n  onTest = async () => {\n    this.setState(\n      {\n        isLoading: true,\n        hasRun: true,\n        response: {}\n      },\n      async () => {\n      // Todo: Run our own proxy service instead of using this.\n      const dest = new URL(this.getDestination());\n      let data = null;\n      let response: Response | null = null;\n      try {\n        response = await fetch(\n          dest.href,\n          this.getFetchData(),\n        );\n        data = await response.text();\n        this.setState({\n          isLoading: false,\n          response: {\n            headers: response.headers as Headers,\n            data,\n          }\n        });\n      } catch (_) {\n        this.setState({\n          isLoading: false,\n        });\n      }\n    });\n  }\n\n  render () {\n    if (!this.props.validation.success) {\n      return (\n        <div className=\"row\">\n          <div className=\"Test Disabled\">\n            {\n              this.props.validation.message.map(\n                (string, idx) => (\n                  <label key={`validation_${idx}`}> {string} </label>\n                ),\n              )\n            }\n          </div>\n        </div>\n      )\n    }\n    if (this.state.isLoading) {\n      return (\n        <div className=\"row\">\n          <Loading />\n        </div>\n      );\n    }\n\n    const proxyMessage = `${this.props.proxy.isEnabled ? 'through Proxy' : ''} to ${this.getDestination()}`;\n\n    return (\n      <>\n        <Request\n          hasRun={this.state.hasRun}\n          proxy={this.props.proxy}\n          onUpdateProxy={this.props.updateProxy}\n          shouldConfirm={false} // Todo: We need to ensure that everything matches up\n          onRequest={this.onTest} />\n        {\n          this.state.hasRun && (\n            this.state.response.headers && this.state.response.data\n              ? (\n                <>\n                  <div className=\"row\">\n                    <Notice\n                      className=\"twelve columns u-full-width\"\n                      heading=\"Request complete\"\n                      content={`Request sent ${proxyMessage}`} />\n                  </div>\n                  <div className=\"row\">\n                    <FetchResponse\n                      headers={this.state.response.headers}\n                      data={this.state.response.data} />\n                  </div>\n                </>)\n              : (\n                <div className=\"row\">\n                  <Notice\n                    className=\"twelve columns u-full-width\"\n                    heading=\"Request Failed\"\n                    content={`Request couldn't be sent ${proxyMessage}`} />\n                </div>\n              )\n          )\n        }\n      </>\n    );\n  };\n}\n\nexport default Test;\n","import React from 'react';\nimport Config, {ConfigData} from './components/config/Config';\nimport Data, {DataData} from './components/data/Data';\nimport Heading from './components/heading/Heading';\nimport Output from './components/output/Output';\nimport {ProxyData} from './components/test/request/proxy/Proxy';\nimport Test, {ValidatePayloadResult} from './components/test/Test';\n\nimport './css/App.css'\n\nimport * as utils from './utils';\n\nimport {\n  DataType,\n  HTTPMethods,\n  OutputType,\n} from './enums';\n\ninterface OutputState {\n  type: OutputType;\n}\n\ninterface AppState {\n  config: ConfigData;\n  data: DataData;\n  output: OutputState;\n  proxy: ProxyData;\n  validation: ValidatePayloadResult;\n}\n\ninterface AppProps {}\n\nexport default class App extends React.Component<AppProps, AppState> {\n\n  onConfigChange = (config: ConfigData): void => {\n    this.setState({\n      config,\n    }, () => this.setState({validation: this.validatePayload()}));\n  }\n\n  onDataChange = (data: DataData): void => {\n    this.setState({\n      data,\n    }, () => this.setState({validation: this.validatePayload()}));\n  }\n\n  onUpdateProxy = (proxy: ProxyData): void => {\n    this.setState({\n      proxy,\n    });\n  }\n\n  constructor(props: AppProps) {\n    super(props);\n    this.state = {\n      config: {\n        method: HTTPMethods.GET,\n        headers: [],\n        domain: 'https://api.github.com',\n        endpoint: '/users/octocat',\n      },\n      data: {\n        type: DataType.JSON,\n        data: {\n          json: {test: \"value\"},\n          graphQL: {query: \"query {viewer {username}}\"},\n          form: null,\n        },\n      },\n      output: {\n        type: OutputType.CURL,\n      },\n      proxy: {\n        url: utils.PROXY,\n        isEnabled: true,\n      },\n      validation: {\n        message: [],\n        success: true,\n      }\n    }\n  }\n\n  validatePayload = (): ValidatePayloadResult => {\n    const result = {\n      message: [] as string[],\n      success: true,\n    };\n    if (!utils.isValidMethod(this.state.config.method)) {\n      result.message.push(\n        `Invalid ${this.state.config.method}, check settings above`,\n      );\n      result.success = false;\n    }\n    if (!utils.isValidHeaders(this.state.config.headers)) {\n      result.message.push(\n        `Invalid headers, check settings above`,\n      );\n      result.success = false;\n    }\n    if (!utils.isValidURL(\n      this.state.config.domain,\n      this.state.config.endpoint,\n    )) {\n      result.message.push(\n        `Invalid URL ${this.state.config.domain} or ${this.state.config.endpoint}, check settings above`,\n      );\n      result.success = false;\n    }\n\n    if (\n      this.state.data.type === DataType.GQL\n      && !utils.isValidGraphQLString(this.state.data.data.graphQL.query)) {\n        result.message.push(\n          `Invalid GraphQL string, check settings above`,\n        );\n        result.success = false;\n    }\n    return result;\n  }\n\n  render () {\n    return (\n      <div className='container App'>\n        <div className=\"row\">\n          <Heading imageSrc={process.env.PUBLIC_URL + '/images/banner.png'} />\n        </div>\n        <div className=\"row\">\n          <Config\n            data={this.state.config}\n            updateConfig={this.onConfigChange} />\n        </div>\n        <div className=\"row\">\n          {\n            utils.methodHasPayload(this.state.config.method) &&\n              (<Data data={this.state.data} updateData={this.onDataChange} />)\n          }\n        </div>\n        <div className=\"row\">\n          <Output\n            config={this.state.config}\n            data={this.state.data}\n            output={this.state.output.type}\n            updateConfig={this.onConfigChange}\n            updateData={this.onDataChange} />\n        </div>\n        <div className=\"row\">\n          <Test\n            validation={this.state.validation}\n            config={this.state.config}\n            data={this.state.data}\n            proxy={this.state.proxy}\n            updateConfig={this.onConfigChange}\n            updateData={this.onDataChange}\n            updateProxy={this.onUpdateProxy} />\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}