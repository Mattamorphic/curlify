{"version":3,"sources":["serviceWorker.ts","enums/index.tsx","components/data/graphql/GraphQL.tsx","utils/index.ts","components/heading/Heading.tsx","components/shared/Button.tsx","components/shared/Tooltip.tsx","components/shared/Copy.tsx","components/shared/Saving.tsx","components/shared/TextArea.tsx","components/output/curl/Curl.tsx","components/shared/Select.tsx","components/output/selector/Selector.tsx","components/output/Output.tsx","components/shared/Input.tsx","components/config/destination/domain/Domain.tsx","components/config/destination/endpoint/Endpoint.tsx","components/config/destination/Destination.tsx","components/shared/Toggler.tsx","components/shared/Autocomplete.tsx","components/shared/KeyValueInput.tsx","components/config/headers/Headers.tsx","components/config/method/Method.tsx","components/config/queryparams/QueryParams.tsx","components/config/Config.tsx","components/data/graphql/type/Type.tsx","components/data/json/Json.tsx","components/data/selector/Selector.tsx","components/data/Data.tsx","components/history/clearhistory/ClearHistory.tsx","components/history/listhistory/listhistoryentry/loadhistoryentry/LoadHistoryEntry.tsx","components/history/listhistory/listhistoryentry/ListHistoryEntry.tsx","components/history/listhistory/ListHistory.tsx","components/history/History.tsx","components/shared/Table.tsx","components/test/fetchresponse/responseheaders/ResponseHeaders.tsx","components/test/fetchresponse/responsejson/ResponseJson.tsx","components/test/fetchresponse/responseraw/ResponseRaw.tsx","components/test/fetchresponse/FetchResponse.tsx","components/shared/Loading.tsx","components/shared/Notice.tsx","components/shared/Confirm.tsx","components/shared/Checkbox.tsx","components/test/request/proxy/Proxy.tsx","components/test/request/Request.tsx","components/test/Test.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","HTTPMethods","HTTPHeaders","DataType","OutputType","InputTypes","ColumnCount","JsonValueTypes","GraphQLType","methodHasPayload","method","GET","HEAD","includes","PROXY","regEx","curlData","curlHeader","curlMethod","dateTimeZoneChars","jsonData","multipleSpaces","newLine","newLineAndTab","queryParams","quotes","singleEscapedNewLine","url","isValidMethod","string","Object","values","isValidURL","domain","endpoint","charAt","length","possUrl","isValidHeaders","headers","reduce","_","curr","key","undefined","isValidGraphQLString","gql","parse","isStringANumber","value","isNaN","parseInt","isStringADate","Date","replace","isStringBooleanOrNull","toLowerCase","isStringAURL","isStorageAvailable","storage","x","setItem","removeItem","e","addToHistory","config","data","status","localStorage","keys","i","push","removeKey","sort","shift","id","getTime","toString","item","JSON","stringify","getHistory","requestHistory","getItem","a","b","a_id","b_id","clearHistory","clear","parseURLString","str","uri","URL","params","fromEntries","URLSearchParams","search","pathname","origin","map","rawUrl","href","convertKeyValueArrayToQueryParams","qp","p","join","Heading","props","react_default","createElement","className","alt","src","imageSrc","Button","isPrimary","disabled","isDisabled","onClick","onClickRaw","preventDefault","clickValue","name","children","label","Tooltip","text","Copy","copy","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","navigator","clipboard","writeText","content","stop","apply","this","arguments","useDiv","shared_Tooltip","tooltip","noIcon","react_fontawesome_index_es","icon","faCopy","size","shared_Button","Saving","react_transition_group","transitionEnter","transitionEnterTimeout","transitionLeave","transitionName","isSaved","faSave","TextArea","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onUpdate","onChangeDirect","target","state","isFullWidth","onChange","style","React","Component","Curl","serializerCurl","hasNewConfig","hasNewData","getMethod","getHeaders","newData","getData","parseUrl","type","GQL","graphQL","query","json","FORM","urlString","updateCurl","setState","draft","hasDraft","debounce","curl","updateData","updateConfig","getValue","regex","utils","exec","TextArea_TextArea","background","concat","process","backgroundAttachment","backgroundColor","backgroundRepeat","color","shared_Saving","shared_Copy","payload","header","parsePayloadString","Select","selected","Fragment","multiple","isMultiple","placeholder","Selector","shared_Select","Output","output","toUpperCase","CURL","Curl_Curl","selector_Selector","Input","checked","isChecked","onChangeRaw","TEXT","Domain","shared_Input","Endpoint","Destination","width","domain_Domain","endpoint_Endpoint","Toggler","heading","isToggled","collapsedData","onToggle","faChevronUp","faChevronDown","Autocomplete","userInput","currentTarget","filteredSuggestions","suggestions","filter","suggestion","input","indexOf","showSuggestions","onSuggestionMouseDown","stopPropagation","innerText","onSelectSuggestion","onBlur","activeSuggestion","_this2","index","onMouseDown","PureComponent","KeyValueInput","addEntry","onAddEntry","removeEntry","maybeIndexStr","split","pop","Error","refineIndex","onRemoveEntry","onChangeKey","entry","onUpdateEntry","updateEntryKey","onChangeValue","updateEntryValue","faPlus","faMinus","keyInput","Autocomplete_Autocomplete","valueInput","Headers","toggleHeaders","prevState","showHeaders","addHeader","shared_Toggler","h","shared_KeyValueInput","onRemove","Method","QueryParams","addQueryParam","toggleQueryParams","showQueryParams","s","Config","toggleConfigSettings","showConfigSettings","updateDestination","updateHeaders","removeHeader","updateMethod","updateQueryParams","removeQueryParameter","queryparam","destination","method_Method","TWO","destination_Destination","TEN","QueryParams_QueryParams","Headers_Headers","TWELVE","Type","GraphQL","updateGraphQL","getDocAndTypeFromGQLString","onUpdateData","updateType","pretty","PrettyMe","type_Type","faMagic","doc","definitions","operation","print","newProps","Json","updateJson","object","Data","Json_Json","GraphQL_GraphQL","data_selector_Selector","ClearHistory","faTrash","LoadHistoryEntry","faUpload","ListHistoryEntry","statusClass","loadhistoryentry_LoadHistoryEntry","ListHistory","updateFilter","history","historyEntry","listhistoryentry_ListHistoryEntry","History","loadHistory","toggleHistory","showHistory","ListHistory_ListHistory","clearhistory_ClearHistory","Table","row","j","data-label","ResponseHeaders","headerKeys","Array","from","shared_Table","Header","Value","get","ResponseJson","toggleJson","showJson","replacer","p1","p2","p3","p4","part","end","indent","valueClass","STRING","NUMBER","DATE","BOOLEAN","ReactDOMServer","renderToString","repeat","response","dangerouslySetInnerHTML","__html","ResponseRaw","toggleRaw","showRaw","FetchResponse","ResponseHeaders_ResponseHeaders","ResponseRaw_ResponseRaw","ResponseJson_ResponseJson","Loading","Notice","Confirm","confirm","message","onConfirm","onCancel","Checkbox","isCheckedLabel","isNotCheckedLabel","CHECKBOX","Proxy","toggleProxySettings","showProxySettings","onUpdateProxyUrl","onUpdateProxy","isEnabled","proxy","onUpdateProxyEnabled","shared_Notice","shared_Checkbox","Request","onRequest","Proxy_Proxy","shouldConfirm","shared_Confirm","Test","baseState","getDestination","getFetchData","fetchData","body","onTest","_callee2","_context2","hasRun","isLoading","dest","fetch","sent","t0","finish","prevProps","prevProxy","newProxy","validation","success","idx","shared_Loading","proxyMessage","request_Request","updateProxy","fetchresponse_FetchResponse","App","onConfigChange","validatePayload","onDataChange","onProxyChange","result","form","test","showData","heading_Heading","Config_Config","SIX","output_Output","data_Data","History_History","test_Test","ReactDOM","render","App_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.58ed18b2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export enum HTTPMethods {\n  DELETE = 'DELETE',\n  GET = 'GET',\n  HEAD = 'HEAD',\n  PATCH = 'PATCH',\n  POST = 'POST',\n  PUT = 'PUT'\n}\n\nexport enum HTTPHeaders {\n  'A-IM' = 'A-IM',\n  Accept = 'Accept',\n  'Accept-Charset' = 'Accept-Charset',\n  'Accept-Datetime' = 'Accept-Datetime',\n  'Accept-Encoding' = 'Accept-Encoding',\n  'Accept-Language' = 'Accept-Language',\n  'Access-Control-Request-Method' = 'Access-Control-Request-Method',\n  'Access-Control-Request-Headers' = 'Access-Control-Request-Headers',\n  Authorization = 'Authorization',\n  Authentication = 'Authentication',\n  'Cache-Control' = 'Cache-Control',\n  'Content-Length' = 'Content-Length',\n  'Content-MD5' = 'Content-MD5',\n  'Content-Type' = 'Content-Type',\n  Cookie = 'Cookie',\n  Date = 'Date',\n  Expect = 'Expect',\n  Forwarded = 'Forwarded',\n  From = 'From',\n  Host = 'Host',\n  'HTTP2-Settings' = 'HTTP2-Settings',\n  'If-Match' = 'If-Match',\n  'If-Modified-Since' = 'If-Modified-Since',\n  'If-None-Match' = 'If-None-Match',\n  'If-Range' = 'If-Range',\n  'If-Unmodified-Since' = 'If-Unmodified-Since',\n  'Max-Forwards' = 'Max-Forwards',\n  Pragma = 'Pragma',\n  'Proxy-Authorization' = 'Proxy-Authorization',\n  Range = 'Range',\n  Referer = 'Referer',\n  TE = 'TE',\n  Upgrade = 'Upgrade',\n  'User-Agent' = 'User-Agent',\n  Via = 'Via',\n  Warning = 'Warning'\n}\n\nexport enum DataType {\n  FORM = 'form',\n  JSON = 'json',\n  GQL = 'graphQL'\n}\n\nexport enum OutputType {\n  CURL = 'curl'\n}\n\nexport enum InputTypes {\n  BUTTON = 'button',\n  CHECKBOX = 'checkbox',\n  COLOR = 'color',\n  DATE = 'date',\n  DATETIME_LOCAL = 'datetime-local',\n  EMAIL = 'email',\n  FILE = 'file',\n  HIDDEN = 'hidden',\n  IMAGE = 'image',\n  MONTH = 'month',\n  NUMBER = 'number',\n  PASSWORD = 'password',\n  RADIO = 'radio',\n  RANGE = 'range',\n  RESET = 'reset',\n  SEARCH = 'search',\n  SUBMIT = 'submit',\n  TEL = 'tel',\n  TEXT = 'text',\n  TIME = 'time',\n  URL = 'url',\n  WEEK = 'week'\n}\n\nexport enum ColumnCount {\n  ONE = 'one column',\n  TWO = 'two columns',\n  THREE = 'three columns',\n  FOUR = 'four columns',\n  FIVE = 'five columns',\n  SIX = 'six columns',\n  SEVEN = 'seven columns',\n  EIGHT = 'eight columns',\n  NINE = 'nine columns',\n  TEN = 'ten columns',\n  ELEVEN = 'eleven columns',\n  TWELVE = 'twelve columns'\n}\n\nexport enum JsonValueTypes {\n  NUMBER = 'number',\n  DATE = 'date',\n  BOOLEAN = 'boolean',\n  URL = 'url',\n  STRING = 'string'\n}\n","/**\n * @file GraphQL component\n * @author Mattamorphic\n */\nimport './css/GraphQL.css';\n\nimport Button from '../../shared/Button';\nimport Copy from '../../shared/Copy';\nimport { faMagic } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { gqlPayloadType } from '../Data';\nimport React from 'react';\nimport Saving from '../../shared/Saving';\nimport TextArea from '../../shared/TextArea';\nimport Tooltip from '../../shared/Tooltip';\nimport Type from './type/Type';\n\nimport { OperationDefinitionNode, parse, print } from 'graphql';\n\nexport enum GraphQLType {\n  QUERY = 'query',\n  MUTATION = 'mutation'\n}\n\ninterface ParsedGQL {\n  gql: string;\n  type: GraphQLType;\n}\n\ninterface GraphQLProps {\n  data: gqlPayloadType;\n  onUpdateData: (value: gqlPayloadType) => void;\n}\n\ninterface GraphQLState {\n  draft: string;\n  isSaved: boolean;\n  type: GraphQLType;\n}\n\nexport default class GraphQL extends React.PureComponent<\n  GraphQLProps,\n  GraphQLState\n> {\n  constructor(props: GraphQLProps) {\n    super(props);\n    const gql = GraphQL.getDocAndTypeFromGQLString(props.data.query);\n    this.state = {\n      draft: gql.gql,\n      isSaved: true,\n      type: gql.type\n    };\n  }\n\n  static getDocAndTypeFromGQLString(gql: string): ParsedGQL {\n    const doc = parse(gql);\n    const def: OperationDefinitionNode = doc\n      .definitions[0] as OperationDefinitionNode;\n    const type = def.operation as GraphQLType;\n    return {\n      gql: print(doc),\n      type\n    };\n  }\n\n  static getDerivedStateFromProps(\n    newProps: GraphQLProps,\n    state: GraphQLState\n  ): GraphQLState {\n    if (newProps.data.query !== state.draft && !state.isSaved) {\n      return state;\n    }\n    try {\n      const gql = GraphQL.getDocAndTypeFromGQLString(newProps.data.query);\n      return {\n        draft: newProps.data.query,\n        isSaved: true,\n        type: gql.type\n      };\n    } catch (e) {\n      return state;\n    }\n  }\n\n  updateGraphQL = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const draft = e.target.value;\n    try {\n      const gql = GraphQL.getDocAndTypeFromGQLString(draft);\n      if (gql.gql !== this.state.draft) {\n        this.props.onUpdateData(\n          // replace any existing operation with an empty string\n          { query: draft }\n        );\n        this.setState({ isSaved: true });\n      } else {\n        this.setState({\n          draft,\n          isSaved: false\n        });\n      }\n    } catch (_) {\n      this.setState({\n        draft,\n        isSaved: false\n      });\n    }\n  };\n\n  updateType = (type: GraphQLType): void => {\n    this.props.onUpdateData({\n      query: type + ' ' + this.state.draft.replace(this.state.type, '')\n    });\n  };\n\n  pretty = () => {\n    this.props.onUpdateData({\n      query:\n        this.state.type +\n        ' ' +\n        GraphQL.PrettyMe(this.state.draft).replace(this.state.type, '')\n    });\n  };\n\n  static PrettyMe(gql: string): string {\n    try {\n      return print(parse(gql));\n    } catch (_) {\n      // Todo: print errors\n      return gql;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"GraphQL\">\n        <div className=\"row\">\n          <TextArea\n            isFullWidth={true}\n            onChangeDirect={this.updateGraphQL}\n            style={{\n              background: `url('${process.env.PUBLIC_URL}/images/textarea.png')`,\n              backgroundAttachment: 'local',\n              backgroundColor: '#19404A',\n              backgroundRepeat: 'no-repeat',\n              color: '#EEE8D5'\n            }}\n            value={this.state.draft}\n          />\n        </div>\n        <div className=\"row\">\n          <div className=\"two columns\">\n            <Saving isSaved={this.state.isSaved} />\n          </div>\n          <div className=\"two columns\">\n            <Type\n              className=\"u-full-width\"\n              onUpdate={this.updateType}\n              selected={this.state.type}\n            />\n          </div>\n          <div className=\"two columns\">\n            <Tooltip text=\"Pretty payload\">\n              <Button\n                className=\"u-full-width GraphQLPretty\"\n                isDisabled={!this.state.isSaved}\n                isPrimary={false}\n                onClick={this.pretty}\n              >\n                <FontAwesomeIcon icon={faMagic} size=\"lg\" />\n              </Button>\n            </Tooltip>\n          </div>\n          <div className=\"two columns\">\n            <Copy\n              className=\"u-pull-right\"\n              content={GraphQL.PrettyMe(this.state.draft)}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","/**\n * @file Utils\n * @author Mattamorphic\n */\nimport { ConfigData } from '../components/config/Config';\nimport { DataData } from '../components/data/Data';\nimport { HistoryEntry } from '../components/history/History';\nimport { HTTPMethods } from '../enums';\nimport { KeyValueEntry } from '../components/shared/KeyValueInput';\nimport { parse } from 'graphql';\nimport { ProxyData } from '../components/test/request/proxy/Proxy';\n\nexport interface ParsedURL {\n  domain: string;\n  endpoint: string;\n  queryParams: KeyValueEntry[];\n  rawUrl: string;\n}\n\n/**\n * Does the given method suppport a payload?\n *\n * @params {HTTPMethods} method\n *\n * @returns boolean\n */\nexport const methodHasPayload = (method: HTTPMethods): boolean =>\n  ![HTTPMethods.GET, HTTPMethods.HEAD].includes(method);\n\n// Proxy address\nexport const PROXY = 'https://curlify-proxy.herokuapp.com/';\n\n// Common RegEx patterns used\nexport const regEx = {\n  // Todo: convert to /gms https://github.com/babel/babel/pull/10347\n  curlData: /(?:-d\\s{0,}'|\")({.*})(?=['|\"])/gim,\n  curlHeader: /(?:-H \")([\\w\\d]{1,})(?:\\s{0,}:\\s{0,})(.+?)(?=\")/gim,\n  curlMethod: /(?:-X\\s{0,})(\\w{3,6})/gim,\n  dateTimeZoneChars: /[T|Z]/gim,\n  jsonData: /^( *)(\"[^\"]+\": )?(\"[^\"].*\"|[\\w.+-]*)?([{}[\\],]*)?$/gm,\n  multipleSpaces: / +/gm,\n  newLine: /[\\r|\\n]/gm,\n  newLineAndTab: /[\\n|\\r|\\t]/gm,\n  queryParams: /(\\?.*)/g,\n  quotes: /[\"']/gim,\n  singleEscapedNewLine: /(?<!\\\\)\\\\n/gm,\n  url: /^((?:http(?:s)?:\\/\\/)+[\\w.-]+(?:.[\\w.-]+))+([\\w-._~:/?#[\\]@!$&'()*+,;=.]+)$/gim\n};\n\n/**\n * Determine if the proxy has changed\n *\n * @params {ProxyData} prevProxy\n * @params {ProxyData} newProxy\n *\n * @returns {boolean}\n */\nexport const hasProxyChanged = (\n  prevProxy: ProxyData,\n  newProxy: ProxyData\n): boolean => {\n  return (\n    prevProxy.isEnabled !== newProxy.isEnabled || prevProxy.url !== newProxy.url\n  );\n};\n\n/**\n * Is the given string a HTTP method?\n *\n * @params {string} string\n *\n * @returns {boolean}\n */\nexport const isValidMethod = (string: string): boolean =>\n  Object.values(HTTPMethods).includes(string);\n\n/**\n * Does the domain / endpoint make a valid URL?\n *\n * @params {string} domain\n * @params {string} endpoin\n *\n * @returns {boolean}\n */\nexport const isValidURL = (domain: string, endpoint: string): boolean => {\n  const url =\n    domain +\n    (domain.charAt(domain.length - 1) !== '/' && endpoint.charAt(0) !== '/'\n      ? '/'\n      : '') +\n    endpoint;\n\n  const possUrl = url.match(regEx.url);\n  return !possUrl || possUrl[0] !== url ? false : true;\n};\n\n/**\n * Are the headers provided valid?\n *\n * @params {KeyValueEntry[]} headers\n *\n * @returns {boolean}\n */\nexport const isValidHeaders = (headers: KeyValueEntry[]): boolean => {\n  return headers.reduce((_: boolean, curr: KeyValueEntry) => {\n    return (\n      curr.key !== null &&\n      curr.key !== undefined &&\n      typeof curr.key === 'string' &&\n      curr.key !== ''\n    );\n  }, true);\n};\n\n/**\n * Is given string valid json?\n *\n * @params {string} json\n *\n * @returns {boolean}\n */\nexport const isValidJsonString = (json: string): boolean => {\n  try {\n    JSON.parse(json);\n    return true;\n  } catch (_) {\n    return false;\n  }\n};\n\n/**\n * Is given string valid graphql?\n *\n * @params {string} gql\n *\n * @returns {boolean}\n */\nexport const isValidGraphQLString = (gql: string): boolean => {\n  try {\n    parse(gql);\n    return true;\n  } catch (_) {\n    return false;\n  }\n};\n\n/**\n * Is given string a valid number?\n *\n * @params {string} value\n *\n * @returns {boolean}\n */\nexport const isStringANumber = (value: string): boolean => {\n  return !isNaN(parseInt(value));\n};\n\n/**\n * Is given string a valid date?\n *\n * @params {string} value\n *\n * @returns {boolean}\n */\nexport const isStringADate = (value: string): boolean => {\n  return !isNaN(Date.parse(value.replace(regEx.dateTimeZoneChars, ' ')));\n};\n\n/**\n * Is given string a nully value?\n *\n * @params {string} value\n *\n * @returns {boolean}\n */\nexport const isStringBooleanOrNull = (value: string): boolean => {\n  const permitted = ['true', 'false', 'null', 'nil', 'undefined'];\n  return permitted.includes(value.toLowerCase());\n};\n\n/**\n * Is given string a valid url?\n *\n * @params {string} value\n *\n * @returns {boolean}\n */\nexport const isStringAURL = (value: string): boolean => {\n  return !!value.replace(regEx.quotes, '').match(regEx.url);\n};\n\n/**\n * Is local storage available?\n *\n * @returns {boolean}\n */\nexport const isStorageAvailable = (): boolean => {\n  let storage;\n  try {\n    storage = window['localStorage'];\n    var x = '__storage_test__';\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Add history item to local storage\n *\n * @params {ConfigData} config  Request Config\n * @params {DataData}   data    Request Data\n * @params {number}     status  Status code\n *\n * @returns {string}\n */\nexport const addToHistory = (\n  config: ConfigData,\n  data: DataData,\n  status: number\n): string => {\n  const storage = window.localStorage;\n\n  if (storage.length + 1 === 20) {\n    let keys = [];\n    for (let i = 0; i < storage.length; i++) {\n      const key = storage.key(i);\n      if (key) {\n        keys.push(key);\n      }\n    }\n    const removeKey = keys.sort().shift();\n    if (removeKey) {\n      storage.removeItem(removeKey);\n    }\n  }\n  const id = new Date().getTime().toString();\n  const item = JSON.stringify({\n    config,\n    data,\n    id,\n    status\n  });\n  storage.setItem(id, item);\n  return id;\n};\n\n/**\n * Fetch the history from local storage\n *\n * @returns {HistoryEntry[]}\n */\nexport const getHistory = (): HistoryEntry[] => {\n  if (!isStorageAvailable()) {\n    return [];\n  }\n  const requestHistory = [] as HistoryEntry[];\n  const storage = window.localStorage;\n  for (let i = 0; i < storage.length; i++) {\n    const key = storage.key(i);\n    if (!key) {\n      break;\n    }\n    const data = storage.getItem(key);\n    if (!data) {\n      break;\n    }\n    try {\n      requestHistory.push(JSON.parse(data));\n    } catch (_) {\n      storage.removeItem(key);\n    }\n  }\n  return requestHistory.sort((a, b) => {\n    const a_id = parseInt(a.id);\n    const b_id = parseInt(b.id);\n    return a_id > b_id ? -1 : a_id < b_id ? 1 : 0;\n  });\n};\n\n/**\n * Clear the local storage\n */\nexport const clearHistory = () => {\n  window.localStorage.clear();\n};\n\n/**\n * Parse a URL into it's component parts\n *\n * @params {string} str Possible url\n *\n * @returns {ParsedURL}\n */\nexport const parseURLString = (str: string): ParsedURL => {\n  const uri = new URL(str);\n  const params = Object.fromEntries(new URLSearchParams(uri.search));\n  let endpoint = uri.pathname;\n  if (str.charAt(str.length - 1) === '?' && uri.search === '') {\n    endpoint += '?';\n  }\n  return {\n    domain: uri.origin,\n    endpoint,\n    queryParams: Object.keys(params).map(key => ({ key, value: params[key] })),\n    rawUrl: uri.href\n  };\n};\n\n/**\n * Is a nully value?\n *\n * @params {any} value\n *\n * @returns {boolean}\n */\nexport const isNull = (value: any): boolean => {\n  if (value === null || value === undefined || value === '') {\n    return true;\n  }\n  return false;\n};\n\n/**\n * Convert an array to a query string\n *\n * @params {KeyValueEntry[]} qp\n *\n * @returns {string}\n */\nexport const convertKeyValueArrayToQueryParams = (\n  qp: KeyValueEntry[]\n): string => {\n  if (qp.length === 0) {\n    return '';\n  }\n  return (\n    '?' +\n    qp\n      .map(p => {\n        return p.key + (isNull(p.value) ? '' : '=' + p.value);\n      })\n      .join('&')\n  );\n};\n","/**\n * @file Heading component\n * @author Mattamorphic\n */\nimport './css/Heading.css';\n\nimport React from 'react';\n\ninterface HeadingProps {\n  imageSrc: string;\n}\n\nconst Heading: React.FunctionComponent<HeadingProps> = props => {\n  return (\n    <div className=\"Heading\">\n      <img alt=\"curlify logo\" src={props.imageSrc} />\n    </div>\n  );\n};\n\nexport default Heading;\n","import React from 'react';\n\ninterface ButtonProps {\n  className?: string;\n  id?: string;\n  isDisabled?: boolean;\n  isPrimary: boolean;\n  label?: string;\n  name?: string;\n  onClick: (val: any, name?: string) => void;\n  onClickRaw?: (e: React.MouseEvent<HTMLElement>) => void;\n  clickValue?: any;\n}\n\nconst Button: React.FunctionComponent<ButtonProps> = props => {\n  const clickHandler = (e: React.MouseEvent) => {\n    e.preventDefault();\n    props.onClick(props.clickValue, props.name);\n  };\n\n  return (\n    <button\n      className={\n        (props.isPrimary ? 'button-primary ' : ' ') + props.className || ' '\n      }\n      disabled={props.isDisabled}\n      id={props.id}\n      onClick={props.onClickRaw || clickHandler}\n    >\n      {props.children || props.label || ''}\n    </button>\n  );\n};\n\nexport default Button;\n","/**\n * @file Tooltip component\n * @author Mattamorphic\n */\nimport './css/Tooltip.css';\n\nimport React from 'react';\n\ninterface TooltipProps {\n  text: string;\n}\n\nconst Tooltip: React.FunctionComponent<TooltipProps> = props => {\n  return (\n    <div className=\"Tooltip\">\n      <span className=\"TooltipText\">{props.text}</span>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Tooltip;\n","import './css/Copy.css';\n\nimport Button from './Button';\nimport { faCopy } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport Tooltip from './Tooltip';\n\ninterface CopyProps {\n  className?: string;\n  noIcon?: boolean;\n  useDiv?: boolean;\n  content: string;\n  tooltip?: string;\n}\n\nconst Copy: React.FunctionComponent<CopyProps> = props => {\n  const copy = async () => {\n    await navigator.clipboard.writeText(props.content);\n  };\n  if (!props.useDiv) {\n    return (\n      <Tooltip text={props.tooltip || 'Copy'}>\n        <Button\n          className={(props.className || '') + ' Copy'}\n          isPrimary={false}\n          onClick={copy}\n        >\n          {!props.noIcon && <FontAwesomeIcon icon={faCopy} size=\"lg\" />}\n          {props.children}\n        </Button>\n      </Tooltip>\n    );\n  }\n  return (\n    <Tooltip text={props.tooltip || 'Copy'}>\n      <div className={(props.className || '') + ' Copy'} onClick={copy}>\n        {!props.noIcon && <FontAwesomeIcon icon={faCopy} size=\"lg\" />}\n        {props.children}\n      </div>\n    </Tooltip>\n  );\n};\n\nexport default Copy;\n","import './css/Saving.css';\n\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport { faSave } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\n\ninterface SavingProps {\n  className?: string;\n  isSaved: boolean;\n}\n\nconst Saving: React.FunctionComponent<SavingProps> = props => {\n  return (\n    <CSSTransitionGroup\n      transitionEnter={true}\n      transitionEnterTimeout={500}\n      transitionLeave={false}\n      transitionName=\"save-notice\"\n    >\n      <div\n        key={'notice-' + props.isSaved}\n        className={\n          (props.isSaved ? 'Saved' : 'NotSaved') +\n          ' SavingNotice ' +\n          (props.className || '')\n        }\n      >\n        <FontAwesomeIcon icon={faSave} size=\"lg\" />\n      </div>\n    </CSSTransitionGroup>\n  );\n};\n\nexport default Saving;\n","import React from 'react';\n\ninterface TextAreaProps {\n  className?: string;\n  isFullWidth: boolean;\n  onChangeDirect?: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  onUpdate?: (value: string) => void;\n  style?: {\n    [key: string]: string;\n  };\n  value: string;\n}\n\ninterface TextAreaState {}\n\nexport default class TextArea extends React.Component<\n  TextAreaProps,\n  TextAreaState\n> {\n  constructor(props: TextAreaProps) {\n    super(props);\n    this.state = {};\n  }\n\n  onUpdate = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    if (this.props.onChangeDirect) {\n      this.props.onChangeDirect(e);\n    } else if (this.props.onUpdate) {\n      this.props.onUpdate(e.target.value);\n    }\n  };\n\n  render() {\n    return (\n      <textarea\n        className={\n          (this.props.isFullWidth ? 'u-full-width ' : ' ') +\n            this.props.className || ''\n        }\n        onChange={this.onUpdate}\n        style={this.props.style || {}}\n        value={this.props.value}\n      ></textarea>\n    );\n  }\n}\n","/**\n * @file Curl component\n * @author Mattamorphic\n */\nimport './css/Curl.css';\n\nimport * as utils from '../../../utils';\n\nimport { ConfigData } from '../../config/Config';\nimport Copy from '../../shared/Copy';\nimport { debounce } from 'lodash';\nimport { KeyValueEntry } from '../../shared/KeyValueInput';\nimport React from 'react';\nimport Saving from '../../shared/Saving';\nimport TextArea from '../../shared/TextArea';\n\nimport { DataData, payloadType } from '../../data/Data';\nimport { DataType, HTTPMethods } from '../../../enums';\n\ninterface SerializedCurl {\n  config: ConfigData;\n  data: DataData;\n  hasNewConfig: boolean;\n  hasNewData: boolean;\n}\n\ninterface CurlProps {\n  config: ConfigData;\n  data: DataData;\n  updateConfig: (data: ConfigData) => void;\n  updateData: (data: DataData) => void;\n}\n\ninterface CurlState {\n  draft: string;\n  hasDraft: boolean;\n}\n\nexport default class Curl extends React.Component<CurlProps, CurlState> {\n  constructor(props: CurlProps) {\n    super(props);\n    this.state = {\n      draft: Curl.getValue(props.config, props.data),\n      hasDraft: false\n    };\n  }\n\n  /**\n   * @function Get the headers from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {Header[] | null}\n   */\n  getHeaders(value: string): KeyValueEntry[] | null {\n    const regex = utils.regEx.curlHeader;\n    const headers = [];\n    let match = null;\n    while ((match = regex.exec(value))) {\n      headers.push({\n        key: match[1] as string,\n        value: match[2] as string\n      });\n    }\n    if (headers.length === 0) {\n      return null;\n    }\n    return headers;\n  }\n\n  /**\n   * @function Get the method from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {HTTPMethods | null}\n   */\n  getMethod(value: string): HTTPMethods | null {\n    const regex = utils.regEx.curlMethod;\n    if (!value.match(regex)) {\n      return null;\n    }\n    const match = regex.exec(value);\n    if (!match) {\n      return null;\n    }\n    return match[1] as HTTPMethods;\n  }\n\n  /**\n   * @function Get the data from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {payloadType | null}\n   */\n  getData(value: string): payloadType | null {\n    const regex = utils.regEx.curlData;\n    if (!value.match(regex)) {\n      return null;\n    }\n    const match = regex.exec(value);\n    if (!match) {\n      return null;\n    }\n    try {\n      return JSON.parse(match[1]);\n    } catch (_) {\n      return null;\n    }\n  }\n\n  /**\n   * @function Get the domain and endpoint from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {ParsedURL | null}\n   */\n  parseUrl(value: string): utils.ParsedURL | null {\n    const regex = utils.regEx.url;\n    if (!value.match(regex)) {\n      return null;\n    }\n    const match = regex.exec(value);\n    if (!match) {\n      return null;\n    }\n    return utils.parseURLString(match[0]);\n  }\n\n  /**\n   * @function Serialize a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {SerializedCurl}\n   */\n  serializerCurl = (value: string): SerializedCurl => {\n    // Get the current values\n    const config = this.props.config;\n    const data = this.props.data;\n\n    let hasNewConfig = false;\n    let hasNewData = false;\n\n    // decide which method to use\n    const method = this.getMethod(value);\n\n    // decide which headers to use\n    const headers = this.getHeaders(value);\n\n    // decide which data to use\n    const newData = this.getData(value);\n\n    // decide which domain and endpoint to use\n    const url = this.parseUrl(value);\n\n    if (\n      method &&\n      method !== config.method &&\n      Object.values(HTTPMethods).includes(method)\n    ) {\n      hasNewConfig = true;\n      config.method = method;\n    }\n\n    // Todo - this needs to actually check the header\n    if (headers) {\n      hasNewConfig = true;\n      config.headers = headers;\n    }\n    if (\n      newData &&\n      JSON.stringify(newData) !== JSON.stringify(data.data[data.type])\n    ) {\n      hasNewData = true;\n      switch (data.type) {\n        case DataType.GQL:\n          data.data.graphQL.query = newData.query;\n          break;\n        case DataType.JSON:\n          data.data.json = newData;\n          break;\n        case DataType.FORM:\n          break;\n      }\n    }\n    if (url) {\n      if (url.domain && url.domain !== config.domain) {\n        hasNewConfig = true;\n        config.domain = url.domain;\n      }\n      if (url.endpoint && url.endpoint !== config.endpoint) {\n        hasNewConfig = true;\n        config.endpoint = url.endpoint;\n      }\n      if (\n        url.queryParams &&\n        JSON.stringify(url.queryParams) !== JSON.stringify(config.queryParams)\n      ) {\n        hasNewConfig = true;\n        config.queryParams = url.queryParams;\n      }\n      if (url.rawUrl !== config.urlString) {\n        hasNewConfig = true;\n        config.urlString = url.rawUrl;\n      }\n    }\n\n    return {\n      config,\n      data,\n      hasNewConfig,\n      hasNewData\n    };\n  };\n\n  /**\n   * @function Update the data from the curl string\n   *\n   * @param {string} value The curl string\n   */\n  updateCurl = (value: string): void => {\n    this.setState(\n      {\n        draft: value,\n        hasDraft: true\n      },\n      debounce(() => {\n        const curl = this.serializerCurl(this.state.draft);\n        if (curl.hasNewData || curl.hasNewConfig) {\n          // set draft to null, we'll update with the new props\n          this.setState({ hasDraft: false }, () => {\n            curl.hasNewData && this.props.updateData(curl.data);\n            curl.hasNewConfig && this.props.updateConfig(curl.config);\n          });\n        }\n      }, 300)\n    );\n  };\n\n  /**\n   * @function Pass the config and data into a curl string\n   *\n   * @params {ConfigData} config The Configuration data for the curl request\n   * @params {DataData}   data   The data for the curl request\n   */\n  static getValue(config: ConfigData, data: DataData): string {\n    let payload = {};\n    switch (data.type) {\n      case DataType.JSON:\n        payload = data.data.json;\n        break;\n      case DataType.GQL:\n        payload = data.data.graphQL;\n        break;\n      case DataType.FORM:\n        break;\n    }\n\n    return (\n      `curl -X ${config.method} \\\\${'\\n'}` +\n      `${config.headers\n        .map(header => `-H \"${header.key}: ${header.value}\" \\\\${'\\n'}`)\n        .join('')}` +\n      `${\n        payload &&\n        Object.keys(payload).length > 0 &&\n        utils.methodHasPayload(config.method)\n          ? `-d '${Curl.parsePayloadString(JSON.stringify(payload))}' \\\\${'\\n'}`\n          : ''\n      }` +\n      `${config.urlString}`\n    );\n  }\n\n  /**\n   * @function Parse a string remove new line / tab and remove multiple spaces\n   *\n   * @param {string} value\n   */\n  static parsePayloadString(value: string): string {\n    return value\n      .replace(utils.regEx.newLineAndTab, '')\n      .replace(utils.regEx.multipleSpaces, ' ')\n      .replace(utils.regEx.singleEscapedNewLine, '');\n  }\n\n  render() {\n    const draft = this.state.hasDraft\n      ? this.state.draft\n      : Curl.getValue(this.props.config, this.props.data);\n    return (\n      <div className=\"Curl\">\n        <div className=\"row\">\n          <TextArea\n            isFullWidth={true}\n            onUpdate={this.updateCurl}\n            style={{\n              background: `url('${process.env.PUBLIC_URL}/images/textarea.png')`,\n              backgroundAttachment: 'local',\n              backgroundColor: '#19404A',\n              backgroundRepeat: 'no-repeat',\n              color: '#EEE8D5'\n            }}\n            value={draft}\n          />\n        </div>\n        <div className=\"row\">\n          <div className=\"two columns\">\n            <Saving className=\"u-full-width\" isSaved={!this.state.hasDraft} />\n          </div>\n          <div className=\"six columns\">\n            <div className=\"u-full-width\" />\n          </div>\n          <div className=\"four columns\">\n            <Copy className=\"u-full-width\" content={draft} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\ninterface selectProps {\n  className?: string;\n  id?: string;\n  isDisabled?: boolean;\n  label?: string;\n  name?: string;\n  onChange: (value: string, name?: string) => void;\n  placeholder?: string;\n  selected?: string | string[] | null;\n  style?: { [key: string]: string };\n  values: string[];\n  isMultiple?: boolean;\n  size?: number;\n}\n\nconst Select: React.FunctionComponent<selectProps> = props => {\n  const onChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    props.onChange(e.target.value, props.name);\n  };\n\n  const selected = props.selected || '';\n  return (\n    <>\n      {props.label && <label>{props.label}</label>}\n      <select\n        className={props.className || ''}\n        disabled={props.isDisabled || false}\n        id={props.id || ''}\n        multiple={props.isMultiple || false}\n        name={props.name || ''}\n        onChange={onChange}\n        size={props.size || 0}\n        style={props.style || {}}\n        value={selected}\n      >\n        <option value=\"\" disabled>\n          {props.placeholder || 'Please Select'}\n        </option>\n        {props.values.map((value: string, i: number) => (\n          <option key={`${value}_${i}`} value={value}>\n            {value}\n          </option>\n        ))}\n      </select>\n    </>\n  );\n};\n\nexport default Select;\n","/**\n * @file Selector component\n * @author Mattamorphic\n */\nimport './css/Selector.css';\n\nimport { OutputType } from '../../../enums';\nimport React from 'react';\nimport Select from '../../shared/Select';\n\ninterface SelectorProps {\n  className?: string;\n  selected: OutputType;\n  onUpdate: (value: OutputType) => void;\n}\n\nconst Selector: React.FunctionComponent<SelectorProps> = props => {\n  const updateSelected = (value: string): void => {\n    props.onUpdate(value as OutputType);\n  };\n\n  return (\n    <Select\n      className={(props.className || '') + ' Selector'}\n      onChange={updateSelected}\n      selected={props.selected}\n      values={Object.values(OutputType)}\n    />\n  );\n};\n\nexport default Selector;\n","/**\n * @file Output component\n * @author Mattamorphic\n */\nimport './css/Output.css';\n\nimport { ConfigData } from '../config/Config';\nimport Curl from './curl/Curl';\nimport { DataData } from '../data/Data';\nimport { OutputType } from '../../enums';\nimport React from 'react';\nimport Selector from './selector/Selector';\n\ninterface OutputProps {\n  className?: string;\n  config: ConfigData;\n  data: DataData;\n  output: OutputType;\n  updateConfig: (data: ConfigData) => void;\n  updateData: (data: DataData) => void;\n}\n\nconst Output: React.FunctionComponent<OutputProps> = props => {\n  const updateType = (_: OutputType) => {\n    // Todo : Implement changer here in future.\n  };\n\n  return (\n    <div className={(props.className || '') + ' Output'}>\n      <div className=\"row OutputHeading\">\n        <h4> Request Config: {props.output.toUpperCase()} </h4>\n      </div>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n          {props.output === OutputType.CURL && (\n            <Curl\n              config={props.config}\n              data={props.data}\n              updateConfig={props.updateConfig}\n              updateData={props.updateData}\n            />\n          )}\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n          <Selector\n            className=\"u-full-width\"\n            onUpdate={updateType}\n            selected={props.output}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Output;\n","import { InputTypes } from '../../enums';\nimport React from 'react';\n\n// Define Interfaces\ninterface InputProps {\n  className?: string;\n  isChecked?: boolean;\n  isDisabled?: boolean;\n  label?: string;\n  name?: string;\n  id?: string;\n  onChange?: (value: string, name?: string) => void;\n  onChangeRaw?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  placeholder?: string;\n  type?: InputTypes;\n  value?: string;\n}\n\n// Input Component\nconst Input: React.FunctionComponent<InputProps> = props => {\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (props.onChangeRaw) {\n      return props.onChangeRaw(e);\n    } else if (props.onChange) {\n      return props.onChange(e.target.value, props.name);\n    }\n  };\n\n  return (\n    <>\n      {props.label && <label>{props.label}</label>}\n      <input\n        checked={props.isChecked}\n        className={props.className || ''}\n        disabled={props.isDisabled}\n        id={props.id || ''}\n        name={props.name || ''}\n        onChange={onChange}\n        placeholder={props.placeholder || ''}\n        type={props.type || InputTypes.TEXT}\n        value={props.value || ''}\n      />\n    </>\n  );\n};\n\nexport default Input;\n","/**\n * @file Domain component\n * @author Mattamorphic\n */\nimport './css/Domain.css';\n\nimport Input from '../../../shared/Input';\nimport { InputTypes } from '../../../../enums';\nimport React from 'react';\nimport Tooltip from '../../../shared/Tooltip';\n\ninterface DomainProps {\n  isFullWidth: boolean;\n  onUpdate: (value: string) => void;\n  value: string;\n}\n\nconst Domain: React.FunctionComponent<DomainProps> = props => (\n  <Tooltip text=\"Domain\">\n    <Input\n      className={(props.isFullWidth ? 'u-full-width' : '') + ' Domain'}\n      onChange={props.onUpdate}\n      type={InputTypes.URL}\n      value={props.value}\n    />\n  </Tooltip>\n);\n\nexport default Domain;\n","/**\n * @file Endpoint component\n * @author Mattamorphic\n */\nimport './css/Endpoint.css';\n\nimport Input from '../../../shared/Input';\nimport React from 'react';\nimport Tooltip from '../../../shared/Tooltip';\n\ninterface EndpointProps {\n  isFullWidth: boolean;\n  onUpdate: (value: string) => void;\n  value: string;\n}\n\nconst Endpoint: React.FunctionComponent<EndpointProps> = props => (\n  <Tooltip text=\"Endpoint\">\n    <Input\n      className={(props.isFullWidth ? 'u-full-width' : '') + ' Endpoint'}\n      onChange={props.onUpdate}\n      value={props.value}\n    />\n  </Tooltip>\n);\n\nexport default Endpoint;\n","/**\n * @file Destination component\n * @author Mattamorphic\n */\nimport './css/Destination.css';\n\nimport * as utils from '../../../utils';\n\nimport { ColumnCount } from '../../../enums';\nimport Domain from './domain/Domain';\nimport Endpoint from './endpoint/Endpoint';\nimport { KeyValueEntry } from '../../shared/KeyValueInput';\nimport React from 'react';\n\ninterface DestinationProps {\n  domain: string;\n  endpoint: string;\n  onUpdate: (\n    domain: string,\n    endpoint: string,\n    queryParams: KeyValueEntry[],\n    rawUrl: string\n  ) => void;\n  queryParams: KeyValueEntry[];\n  width: ColumnCount;\n}\n\nconst Destination: React.FunctionComponent<DestinationProps> = props => {\n  const onUpdate = (value: string): void => {\n    const url = utils.parseURLString(value);\n    props.onUpdate(url.domain, url.endpoint, url.queryParams, url.rawUrl);\n  };\n\n  const onUpdateDomain = (domain: string): void => {\n    onUpdate(\n      domain +\n        props.endpoint +\n        utils.convertKeyValueArrayToQueryParams(props.queryParams)\n    );\n  };\n\n  const onUpdateEndpoint = (endpoint: string): void => {\n    onUpdate(\n      props.domain +\n        endpoint +\n        utils.convertKeyValueArrayToQueryParams(props.queryParams)\n    );\n  };\n\n  return (\n    <div className={props.width + ' Destination'}>\n      <div className=\"row\">\n        <div className=\"six columns\">\n          <Domain\n            isFullWidth={true}\n            onUpdate={onUpdateDomain}\n            value={props.domain}\n          />\n        </div>\n        <div className=\"six columns\">\n          <Endpoint\n            isFullWidth={true}\n            onUpdate={onUpdateEndpoint}\n            value={props.endpoint}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Destination;\n","import './css/Toggler.css';\n\nimport Button from './Button';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport Tooltip from './Tooltip';\n\nimport { faChevronDown, faChevronUp } from '@fortawesome/free-solid-svg-icons';\n\ninterface TogglerProps {\n  className?: string;\n  collapsedData?: JSX.Element;\n  heading?: string;\n  label: string | JSX.Element;\n  onToggle: () => void;\n  isToggled: boolean;\n  tooltip?: string;\n}\n\nconst Toggler: React.FunctionComponent<TogglerProps> = props => {\n  if (props.heading) {\n    return (\n      <>\n        <div className=\"row Toggler\">\n          <div className=\"five columns\">\n            <h4 className=\"u-pull-left\"> {props.heading} </h4>\n          </div>\n          <div className=\"six columns\">\n            <span className=\"TogglerPreview\">\n              {!props.isToggled ? (\n                props.collapsedData || <span>&nbsp;</span>\n              ) : (\n                <span>&nbsp;</span>\n              )}\n            </span>\n          </div>\n          <div className=\"one column\">\n            <Button\n              className=\"u-full-width\"\n              isPrimary={false}\n              onClick={props.onToggle}\n            >\n              <Tooltip text={props.tooltip || 'show/hide'}>\n                {typeof props.label === 'string' ? (\n                  !props.isToggled ? (\n                    <FontAwesomeIcon icon={faChevronDown} size=\"lg\" />\n                  ) : (\n                    <FontAwesomeIcon icon={faChevronUp} size=\"lg\" />\n                  )\n                ) : (\n                  props.label\n                )}\n              </Tooltip>\n            </Button>\n          </div>\n        </div>\n        <div className=\"row\">\n          {props.isToggled && (\n            <div className={props.className || ''}>\n              <div className=\"row\">{props.children}</div>\n            </div>\n          )}\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"row\">\n        <Button\n          className=\"u-full-width\"\n          isPrimary={false}\n          onClick={props.onToggle}\n        >\n          <Tooltip text={props.tooltip || 'show/hide'}>\n            {typeof props.label === 'string' ? (\n              !props.isToggled ? (\n                <FontAwesomeIcon icon={faChevronDown} size=\"lg\" />\n              ) : (\n                <FontAwesomeIcon icon={faChevronUp} size=\"lg\" />\n              )\n            ) : (\n              props.label\n            )}\n          </Tooltip>\n        </Button>\n        {!props.isToggled && props.collapsedData}\n      </div>\n      {props.isToggled && (\n        <div className={props.className || ''}>\n          <div className=\"row\">{props.children}</div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Toggler;\n","/**\n * @file Autocomplete component\n * @author Mattamorphic\n */\n\nimport './css/Autocomplete.css';\n\nimport React from 'react';\n\ninterface AutocompleteProps {\n  className?: string;\n  name?: string;\n  placeholder?: string;\n  suggestions: string[];\n  onSelectSuggestion: (value: string, name?: string) => void;\n  selected: string;\n}\n\ninterface AutocompleteState {\n  activeSuggestion: number;\n  filteredSuggestions: string[];\n  showSuggestions: boolean;\n  userInput: string;\n}\n\nexport default class Autocomplete extends React.PureComponent<\n  AutocompleteProps,\n  AutocompleteState\n> {\n  constructor(props: AutocompleteProps) {\n    super(props);\n    this.state = {\n      activeSuggestion: 0,\n      filteredSuggestions: [],\n      showSuggestions: false,\n      userInput: props.selected\n    };\n  }\n\n  onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const userInput = e.currentTarget.value;\n    const filteredSuggestions = [userInput].concat(\n      this.props.suggestions.filter(suggestion => {\n        suggestion = suggestion.toLowerCase();\n        const input = userInput.toLowerCase();\n        return suggestion.indexOf(input) > -1 && suggestion !== input;\n      })\n    );\n    this.setState({\n      filteredSuggestions,\n      showSuggestions: true,\n      userInput\n    });\n  };\n  // onKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {}\n  onSuggestionMouseDown = (e: React.MouseEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const userInput = e.currentTarget.innerText;\n    this.setState({ userInput }, () =>\n      this.props.onSelectSuggestion(userInput, this.props.name)\n    );\n  };\n\n  onBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    e.preventDefault();\n    const userInput = e.currentTarget.value;\n    this.setState({ userInput }, () =>\n      this.props.onSelectSuggestion(userInput, this.props.name)\n    );\n  };\n\n  render() {\n    return (\n      <div className={(this.props.className || '') + ' Autocomplete'}>\n        <input\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          placeholder={this.props.placeholder || ''}\n          type=\"text\"\n          value={this.state.userInput}\n        />\n        <div className=\"AutocompleteList\">\n          {this.state.showSuggestions && this.state.userInput && (\n            <div className=\"AutocompleteResults\">\n              {this.state.filteredSuggestions.length && (\n                <ul className=\"AutocompleteResultsList\">\n                  {this.state.filteredSuggestions.map(\n                    (suggestion: string, index: number) => (\n                      <li\n                        key={index + '_' + suggestion}\n                        onMouseDown={this.onSuggestionMouseDown}\n                      >\n                        {suggestion}\n                      </li>\n                    )\n                  )}\n                </ul>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","/**\n * @file KeyValueInput component\n * @author Mattamorphic\n */\n\nimport Autocomplete from './Autocomplete';\nimport Button from './Button';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Input from './Input';\nimport React from 'react';\nimport Select from './Select';\nimport Tooltip from './Tooltip';\n\nimport { faMinus, faPlus } from '@fortawesome/free-solid-svg-icons';\n\ninterface InputConfig {\n  type: 'TEXT' | 'AUTOCOMPLETE' | 'SELECT';\n  placeholder?: string;\n  values?: string[];\n}\n\nexport interface KeyValueEntry {\n  key: string;\n  value: string;\n}\n\ninterface KeyValueInputProps {\n  className?: string;\n  id: string;\n  keyInput: InputConfig;\n  valueInput: InputConfig;\n  selected: KeyValueEntry[];\n  onUpdateEntry: (entry: KeyValueEntry, index: number) => void;\n  onAddEntry: () => void;\n  onRemoveEntry: (index: number) => void;\n}\n\nconst KeyValueInput: React.FunctionComponent<KeyValueInputProps> = props => {\n  const addEntry = (_: any) => {\n    props.onAddEntry();\n  };\n  const removeEntry = (_: any, name?: string) => {\n    const maybeIndexStr = (name || '').split('_').pop();\n    if (!maybeIndexStr) {\n      throw new Error('Invalid name');\n    }\n    const refineIndex = parseInt(maybeIndexStr);\n    props.onRemoveEntry(refineIndex);\n  };\n\n  const updateEntryKey = (key: string, index: string) => {\n    const refineIndex = parseInt(index);\n    const entry = props.selected[refineIndex];\n    entry.key = key;\n    props.onUpdateEntry(entry, refineIndex);\n  };\n\n  const updateEntryValue = (value: string, index: string) => {\n    const refineIndex = parseInt(index);\n    const entry = props.selected[refineIndex];\n    entry.value = value;\n    props.onUpdateEntry(entry, refineIndex);\n  };\n\n  const onChangeKey = (key: string, name?: string) => {\n    const maybeIndexStr = (name || '').split('_').pop();\n    if (!maybeIndexStr) {\n      throw new Error('Invalid name');\n    }\n    updateEntryKey(key, maybeIndexStr);\n  };\n\n  const onChangeValue = (value: string, name?: string) => {\n    const maybeIndexStr = (name || '').split('_').pop();\n    if (!maybeIndexStr) {\n      throw new Error('Invalid name');\n    }\n    updateEntryValue(value, maybeIndexStr);\n  };\n\n  if (props.selected.length === 0) {\n    return (\n      <div className=\"row\">\n        <Tooltip text=\"Add a header\">\n          <Button className=\"u-full-width\" isPrimary={false} onClick={addEntry}>\n            <FontAwesomeIcon icon={faPlus} size=\"lg\" />\n          </Button>\n        </Tooltip>\n      </div>\n    );\n  }\n  return (\n    <div className={props.className || ''}>\n      {props.selected.map((entry, index) => (\n        <div className=\"row\" key={props.id + '_' + index + '_' + 'row'}>\n          <div className=\"two columns\">\n            <Tooltip text=\"Remove this header\">\n              <Button\n                className=\"u-full-width\"\n                name={`remove_${props.id}_${index}`}\n                isPrimary={false}\n                onClick={removeEntry}\n              >\n                <FontAwesomeIcon icon={faMinus} size=\"lg\" />\n              </Button>\n            </Tooltip>\n          </div>\n          <div className=\"four columns\">\n            {props.keyInput.type === 'TEXT' && (\n              <Input\n                name={entry.key + '_' + index}\n                onChange={onChangeKey}\n                placeholder={props.keyInput.placeholder || ''}\n                value={entry.key}\n              />\n            )}\n            {props.keyInput.type === 'AUTOCOMPLETE' && (\n              <Autocomplete\n                name={entry.key + '_' + index}\n                placeholder={props.keyInput.placeholder || ''}\n                selected={entry.key}\n                suggestions={props.keyInput.values || []}\n                onSelectSuggestion={onChangeKey}\n              />\n            )}\n            {props.keyInput.type === 'SELECT' && (\n              <Select\n                name={entry.key + '_' + index}\n                onChange={onChangeKey}\n                placeholder={props.keyInput.placeholder || ''}\n                selected={entry.key}\n                values={props.keyInput.values || []}\n              />\n            )}\n          </div>\n          <div className=\"four columns\">\n            {props.valueInput.type === 'TEXT' && (\n              <Input\n                name={entry.value + '_' + index}\n                onChange={onChangeValue}\n                placeholder={props.valueInput.placeholder || ''}\n                value={entry.value}\n              />\n            )}\n            {props.valueInput.type === 'AUTOCOMPLETE' && (\n              <Autocomplete\n                name={entry.value + '_' + index}\n                placeholder={props.valueInput.placeholder || ''}\n                selected={entry.value}\n                suggestions={props.keyInput.values || []}\n                onSelectSuggestion={onChangeValue}\n              />\n            )}\n            {props.valueInput.type === 'SELECT' && (\n              <Select\n                name={entry.value + '_' + index}\n                onChange={onChangeValue}\n                placeholder={props.valueInput.placeholder || ''}\n                selected={entry.value}\n                values={props.keyInput.values || []}\n              />\n            )}\n          </div>\n          <div className=\"two columns\">\n            <Tooltip text=\"Add a new header\">\n              <Button\n                className=\"u-full-width\"\n                isPrimary={false}\n                onClick={addEntry}\n              >\n                <FontAwesomeIcon icon={faPlus} size=\"lg\" />\n              </Button>\n            </Tooltip>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default KeyValueInput;\n","/**\n * @file Headers component\n * @author Mattamorphic\n */\nimport './css/Headers.css';\n\nimport React from 'react';\nimport Toggler from '../../shared/Toggler';\n\nimport { ColumnCount, HTTPHeaders } from '../../../enums';\nimport KeyValueInput, { KeyValueEntry } from '../../shared/KeyValueInput';\n\ninterface HeadersProps {\n  onRemove: (index: number) => void;\n  onUpdate: (entry: KeyValueEntry, index: number) => void;\n  selected: KeyValueEntry[];\n  width: ColumnCount;\n}\n\ninterface HeadersState {\n  showHeaders: boolean;\n}\n\nexport default class Headers extends React.PureComponent<\n  HeadersProps,\n  HeadersState\n> {\n  constructor(props: HeadersProps) {\n    super(props);\n    this.state = {\n      showHeaders: false\n    };\n  }\n\n  toggleHeaders = () => {\n    this.setState(prevState => ({\n      showHeaders: !prevState.showHeaders\n    }));\n  };\n\n  addHeader = (): void => {\n    this.props.onUpdate(\n      {\n        key: '',\n        value: ''\n      },\n      this.props.selected.length\n    );\n  };\n\n  render() {\n    // Don't allow duplicate headers.\n    const selected = this.props.selected.map(header => header.key);\n    const values = Object.values(HTTPHeaders).filter(\n      header => !selected.includes(header)\n    );\n    return (\n      <Toggler\n        collapsedData={\n          <em>\n            {this.props.selected.map(h => h.key).join(', ')}\n            &nbsp;\n          </em>\n        }\n        heading=\"HTTP Headers\"\n        label=\"HTTP Headers\"\n        onToggle={this.toggleHeaders}\n        isToggled={this.state.showHeaders}\n        tooltip=\"Configure HTTP Headers\"\n      >\n        <KeyValueInput\n          className=\"Headers\"\n          id=\"HTTPHeaders\"\n          keyInput={{\n            placeholder: 'Enter HTTP Header',\n            type: 'AUTOCOMPLETE',\n            values: values\n          }}\n          valueInput={{\n            placeholder: 'Enter Value',\n            type: 'TEXT'\n          }}\n          selected={this.props.selected}\n          onAddEntry={this.addHeader}\n          onUpdateEntry={this.props.onUpdate}\n          onRemoveEntry={this.props.onRemove}\n        />\n      </Toggler>\n    );\n  }\n}\n","/**\n * @file Method component\n * @author Mattamorphic\n */\nimport './css/Method.css';\n\nimport React from 'react';\nimport Select from '../../shared/Select';\nimport Tooltip from '../../shared/Tooltip';\n\nimport { ColumnCount, HTTPMethods } from '../../../enums/';\n\ninterface methodProps {\n  onUpdate: (value: HTTPMethods) => void;\n  selected: HTTPMethods;\n  width: ColumnCount;\n}\n\nconst Method: React.FunctionComponent<methodProps> = props => {\n  const onUpdate = (value: string): void => {\n    props.onUpdate(value as HTTPMethods);\n  };\n  return (\n    <div className={props.width}>\n      <Tooltip text=\"Method\">\n        <Select\n          className=\"u-full-width Method\"\n          onChange={onUpdate}\n          selected={props.selected}\n          values={Object.values(HTTPMethods)}\n        />\n      </Tooltip>\n    </div>\n  );\n};\n\nexport default Method;\n","/**\n * @file QueryParams component\n * @author Mattamorphic\n */\nimport './css/QueryParams.css';\n\nimport React from 'react';\nimport Toggler from '../../shared/Toggler';\n\nimport KeyValueInput, { KeyValueEntry } from '../../shared/KeyValueInput';\n\ninterface QueryParamsProps {\n  onRemove: (index: number) => void;\n  onUpdate: (entry: KeyValueEntry, index: number) => void;\n  selected: KeyValueEntry[];\n}\n\ninterface QueryParamsState {\n  showQueryParams: boolean;\n}\n\nexport default class QueryParams extends React.PureComponent<\n  QueryParamsProps,\n  QueryParamsState\n> {\n  constructor(props: QueryParamsProps) {\n    super(props);\n    this.state = {\n      showQueryParams: Object.keys(this.props.selected).length > 0\n    };\n  }\n\n  addQueryParam = (): void => {\n    this.props.onUpdate(\n      {\n        key: '',\n        value: ''\n      },\n      this.props.selected.length\n    );\n  };\n\n  toggleQueryParams = () => {\n    this.setState(prevState => ({\n      showQueryParams: !prevState.showQueryParams\n    }));\n  };\n\n  render() {\n    return (\n      <Toggler\n        collapsedData={\n          <em>\n            {this.props.selected.map(s => s.key).join(', ')}\n            &nbsp;\n          </em>\n        }\n        heading=\"Query Parameters\"\n        label=\"Query Parameter\"\n        onToggle={this.toggleQueryParams}\n        isToggled={this.state.showQueryParams}\n        tooltip=\"Configure query parameters\"\n      >\n        <KeyValueInput\n          className=\"QueryParams\"\n          id=\"QueryParameters\"\n          keyInput={{\n            placeholder: 'Enter QueryParameter',\n            type: 'TEXT'\n          }}\n          valueInput={{\n            placeholder: 'Enter Value',\n            type: 'TEXT'\n          }}\n          selected={this.props.selected}\n          onAddEntry={this.addQueryParam}\n          onUpdateEntry={this.props.onUpdate}\n          onRemoveEntry={this.props.onRemove}\n        />\n      </Toggler>\n    );\n  }\n}\n","/**\n * @file Config component\n * @author Mattamorphic\n */\nimport './css/Config.css';\n\nimport * as utils from '../../utils';\n\nimport Destination from './destination/Destination';\nimport Headers from './headers/Headers';\nimport { KeyValueEntry } from '../shared/KeyValueInput';\nimport Method from './method/Method';\nimport QueryParams from './queryparams/QueryParams';\nimport React from 'react';\nimport Toggler from '../shared/Toggler';\n\nimport { ColumnCount, HTTPMethods } from '../../enums';\n\nexport interface ConfigData {\n  domain: string;\n  endpoint: string;\n  headers: KeyValueEntry[];\n  method: HTTPMethods;\n  queryParams: KeyValueEntry[];\n  urlString: string;\n}\n\ninterface ConfigProps {\n  data: ConfigData;\n  updateConfig: (data: ConfigData) => void;\n}\n\ninterface ConfigState {\n  showConfigSettings: boolean;\n}\n\nexport default class Config extends React.PureComponent<\n  ConfigProps,\n  ConfigState\n> {\n  constructor(props: ConfigProps) {\n    super(props);\n    this.state = {\n      showConfigSettings: true\n    };\n  }\n\n  toggleConfigSettings = () => {\n    this.setState(prevState => ({\n      showConfigSettings: !prevState.showConfigSettings\n    }));\n  };\n\n  updateDestination = (\n    domain: string,\n    endpoint: string,\n    queryParams: KeyValueEntry[],\n    rawUrl: string\n  ) => {\n    const data = this.props.data;\n    data.domain = domain;\n    data.endpoint = endpoint;\n    data.queryParams = queryParams;\n    data.urlString = rawUrl;\n    this.props.updateConfig(data);\n  };\n\n  updateHeaders = (value: KeyValueEntry, index: number): void => {\n    const data = this.props.data;\n    if (!data.headers[index] && value) {\n      data.headers.push(value);\n    } else {\n      data.headers[index] = value;\n    }\n    this.props.updateConfig(data);\n  };\n\n  removeHeader = (index: number): void => {\n    const data = this.props.data;\n    delete data.headers[index];\n    data.headers = data.headers.filter(header => header);\n    this.props.updateConfig(data);\n  };\n\n  updateMethod = (value: HTTPMethods) => {\n    const data = this.props.data;\n    data.method = value;\n    this.props.updateConfig(data);\n  };\n\n  updateQueryParams = (value: KeyValueEntry, index: number): void => {\n    const data = this.props.data;\n    if (!data.queryParams[index] && value) {\n      data.queryParams.push(value);\n    } else {\n      data.queryParams[index] = value;\n    }\n    data.urlString =\n      data.domain +\n      data.endpoint +\n      utils.convertKeyValueArrayToQueryParams(data.queryParams);\n    this.props.updateConfig(data);\n  };\n\n  removeQueryParameter = (index: number): void => {\n    const data = this.props.data;\n    delete data.queryParams[index];\n    data.queryParams = data.queryParams.filter(queryparam => queryparam);\n    data.urlString =\n      data.domain +\n      data.endpoint +\n      utils.convertKeyValueArrayToQueryParams(data.queryParams);\n    this.props.updateConfig(data);\n  };\n\n  render() {\n    const destination = this.props.data.domain + this.props.data.endpoint;\n    return (\n      <>\n        <Toggler\n          className=\"Config\"\n          collapsedData={\n            <>\n              Sending a [<strong>{this.props.data.method}</strong>] request to:\n              [\n              <strong>\n                <a href={destination}>{destination}</a>\n              </strong>\n              ]\n              {this.props.data.headers.length > 0 && (\n                <>\n                  , with the HTTP Headers:{' '}\n                  {this.props.data.headers.map(header => (\n                    <span key={header.key + '_snip'}>\n                      <br />\n                      <strong>{header.key}</strong>: <em>{header.value}</em>\n                    </span>\n                  ))}\n                </>\n              )}\n            </>\n          }\n          isToggled={this.state.showConfigSettings}\n          heading=\"Request Config Settings\"\n          label=\"Config Settings\"\n          tooltip=\"Toggle request config\"\n          onToggle={this.toggleConfigSettings}\n        >\n          <div className=\"row\">\n            <Method\n              onUpdate={this.updateMethod}\n              selected={this.props.data.method}\n              width={ColumnCount.TWO}\n            />\n            <Destination\n              domain={this.props.data.domain}\n              endpoint={this.props.data.endpoint}\n              queryParams={this.props.data.queryParams}\n              onUpdate={this.updateDestination}\n              width={ColumnCount.TEN}\n            />\n          </div>\n          <div className=\"row\">\n            <QueryParams\n              onUpdate={this.updateQueryParams}\n              onRemove={this.removeQueryParameter}\n              selected={this.props.data.queryParams}\n            />\n          </div>\n          <div className=\"row\">\n            <Headers\n              onRemove={this.removeHeader}\n              onUpdate={this.updateHeaders}\n              selected={this.props.data.headers}\n              width={ColumnCount.TWELVE}\n            />\n          </div>\n        </Toggler>\n      </>\n    );\n  }\n}\n","/**\n * @file Type component\n * @author Mattamorphic\n */\nimport './css/Type.css';\n\nimport { GraphQLType } from '../GraphQL';\nimport React from 'react';\nimport Select from '../../../shared/Select';\n\ninterface TypeProps {\n  className?: string;\n  onUpdate: (type: GraphQLType) => void;\n  selected: GraphQLType;\n}\n\nconst Type: React.FunctionComponent<TypeProps> = props => {\n  const updateSelected = (value: string): void => {\n    props.onUpdate(value as GraphQLType);\n  };\n\n  return (\n    <Select\n      className={(props.className || '') + ' Type'}\n      onChange={updateSelected}\n      selected={props.selected}\n      values={Object.values(GraphQLType)}\n    />\n  );\n};\n\nexport default Type;\n","/**\n * @file Json component\n * @author Mattamorphic\n */\nimport './css/Json.css';\n\nimport Button from '../../shared/Button';\nimport Copy from '../../shared/Copy';\nimport { faMagic } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { payloadType } from '../Data';\nimport React from 'react';\nimport Saving from '../../shared/Saving';\nimport TextArea from '../../shared/TextArea';\nimport Tooltip from '../../shared/Tooltip';\n\ninterface JsonProps {\n  data: payloadType;\n  onUpdateData: (value: payloadType) => void;\n}\n\ninterface JsonState {\n  draft: string;\n  hasDraft: boolean;\n}\n\nexport default class Json extends React.PureComponent<JsonProps, JsonState> {\n  constructor(props: JsonProps) {\n    super(props);\n    this.state = {\n      draft: JSON.stringify(props.data, null, 2),\n      hasDraft: false\n    };\n  }\n\n  /**\n   * @function We have to update the state based on the props, this needs removing\n   *\n   * @param {JsonProps} newProps The new received props\n   * @param {JsonState} state    The current state\n   *\n   * @return {JsonState}\n   */\n  static getDerivedStateFromProps(\n    newProps: JsonProps,\n    state: JsonState\n  ): JsonState {\n    let draft = state.draft;\n    let hasDraft = state.hasDraft;\n    if (\n      !state.hasDraft &&\n      JSON.stringify(newProps.data) !== JSON.stringify(JSON.parse(state.draft))\n    ) {\n      draft = JSON.stringify(newProps.data, null, 2);\n      hasDraft = false;\n    } else {\n      try {\n        JSON.parse(draft);\n        hasDraft = false;\n      } catch (_) {}\n    }\n    return {\n      draft,\n      hasDraft\n    };\n  }\n\n  /**\n   * @function Update the data from the json string\n   *\n   * @param {string} value The possible json string\n   */\n  updateJson = (value: string) => {\n    this.setState({\n      draft: value,\n      hasDraft: true\n    });\n    try {\n      const object = JSON.parse(value);\n      this.props.onUpdateData(object);\n    } catch (_) {\n      // Todo: print the error\n    }\n  };\n\n  /**\n   * @function Pretty print the json in the state\n   */\n  pretty = () => {\n    try {\n      this.setState({\n        draft: JSON.stringify(JSON.parse(this.state.draft), null, 2),\n        hasDraft: true\n      });\n    } catch (_) {\n      // Todo: Print the error;\n      return;\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"Json\">\n        <div className=\"row\">\n          <TextArea\n            isFullWidth={true}\n            onUpdate={this.updateJson}\n            style={{\n              background: `url('${process.env.PUBLIC_URL}/images/textarea.png')`,\n              backgroundAttachment: 'local',\n              backgroundColor: '#19404A',\n              backgroundRepeat: 'no-repeat',\n              color: '#EEE8D5'\n            }}\n            value={this.state.draft}\n          />\n        </div>\n        <div className=\"row\">\n          <div className=\"two columns\">\n            <Saving className=\"u-full-width\" isSaved={!this.state.hasDraft} />\n          </div>\n          <div className=\"four columns\">\n            <Tooltip text=\"Pretty payload\">\n              <Button\n                className=\"u-full-width JsonPretty\"\n                isDisabled={this.state.hasDraft}\n                isPrimary={false}\n                onClick={this.pretty}\n              >\n                <FontAwesomeIcon icon={faMagic} size=\"lg\" />\n              </Button>\n            </Tooltip>\n          </div>\n          <div className=\"four columns\">\n            <Copy className=\"u-full-width\" content={this.state.draft} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","/**\n * @file Selector component\n * @author Mattamorphic\n */\nimport './css/Selector.css';\n\nimport { DataType } from '../../../enums';\nimport React from 'react';\nimport Select from '../../shared/Select';\n\ninterface SelectorProps {\n  className?: string;\n  selected: DataType;\n  onUpdate: (value: DataType) => void;\n}\n\nconst Selector: React.FunctionComponent<SelectorProps> = props => {\n  const updateSelected = (value: string): void => {\n    props.onUpdate(value as DataType);\n  };\n\n  return (\n    <Select\n      className={(props.className || '') + ' Selector'}\n      onChange={updateSelected}\n      selected={props.selected}\n      values={Object.values(DataType)}\n    />\n  );\n};\n\nexport default Selector;\n","/**\n * @file Data component\n * @author Mattamorphic\n */\nimport './css/Data.css';\n\nimport { DataType } from '../../enums';\nimport GraphQL from './graphql/GraphQL';\nimport Json from './json/Json';\nimport React from 'react';\nimport Selector from './selector/Selector';\n\nexport type payloadType = { [key: string]: any };\nexport type gqlPayloadType = { query: string };\n\nexport interface DataData {\n  data: {\n    [DataType.FORM]: null;\n    [DataType.GQL]: gqlPayloadType;\n    [DataType.JSON]: payloadType;\n  };\n  type: DataType;\n}\n\ninterface DataProps {\n  className?: string;\n  data: DataData;\n  updateData: (data: DataData) => void;\n}\n\nconst Data: React.FunctionComponent<DataProps> = props => {\n  const updateType = (value: DataType) => {\n    const data = props.data;\n    data.type = value;\n    props.updateData(data);\n  };\n\n  const updateJsonData = (value: payloadType) => {\n    const data = props.data;\n    data.data.json = value;\n    props.updateData(data);\n  };\n\n  const updateGraphQLData = (value: gqlPayloadType) => {\n    const data = props.data;\n    data.data.graphQL = value;\n    props.updateData(data);\n  };\n\n  return (\n    <div className={(props.className || '') + ' Data'}>\n      <div className=\"row DataHeading\">\n        <h4> Request Data: {props.data.type.toUpperCase()} </h4>\n      </div>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n          {props.data.type === DataType.JSON && (\n            <Json data={props.data.data.json} onUpdateData={updateJsonData} />\n          )}\n          {props.data.type === DataType.GQL && (\n            <GraphQL\n              data={props.data.data.graphQL}\n              onUpdateData={updateGraphQLData}\n            />\n          )}\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n          <Selector\n            className=\"u-full-width\"\n            onUpdate={updateType}\n            selected={props.data.type}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default Data;\n","/**\n * @file ClearHistory component\n * @author Mattamorphic\n */\nimport Button from '../../shared/Button';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport Tooltip from '../../shared/Tooltip';\n\ninterface ClearHistoryProps {\n  clear: () => void;\n}\n\nconst ClearHistory: React.FunctionComponent<ClearHistoryProps> = props => {\n  return (\n    <Button isPrimary={false} onClick={props.clear}>\n      <Tooltip text=\"Clear history\">\n        <FontAwesomeIcon icon={faTrash} size=\"lg\" />\n      </Tooltip>\n    </Button>\n  );\n};\n\nexport default ClearHistory;\n","/**\n * @file LoadHistoryEntry component\n * @author Mattamorphic\n */\nimport './css/LoadHistoryEntry.css';\n\nimport Button from '../../../../shared/Button';\nimport { ConfigData } from '../../../../config/Config';\nimport { DataData } from '../../../../data/Data';\nimport { faUpload } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\n\ninterface LoadHistoryEntryProps {\n  className?: string;\n  config: ConfigData;\n  data: DataData;\n  updateConfig: (config: ConfigData) => void;\n  updateData: (data: DataData) => void;\n}\n\nconst LoadHistoryEntry: React.FunctionComponent<\n  LoadHistoryEntryProps\n> = props => {\n  const load = () => {\n    props.updateConfig(props.config);\n    props.updateData(props.data);\n  };\n\n  return (\n    <Button className={props.className} isPrimary={false} onClick={load}>\n      <FontAwesomeIcon icon={faUpload} size=\"lg\" />\n    </Button>\n  );\n};\n\nexport default LoadHistoryEntry;\n","/**\n * @file ListHistoryEntry component\n * @author Mattamorphic\n */\nimport './css/ListHistoryEntry.css';\n\nimport { ConfigData } from '../../../config/Config';\nimport Copy from '../../../shared/Copy';\nimport { DataData } from '../../../data/Data';\nimport LoadHistoryEntry from './loadhistoryentry/LoadHistoryEntry';\nimport React from 'react';\nimport Tooltip from '../../../shared/Tooltip';\n\ninterface ListHistoryEntryProps {\n  className?: string;\n  config: ConfigData;\n  data: DataData;\n  id: string;\n  status: number;\n  updateConfig: (config: ConfigData) => void;\n  updateData: (data: DataData) => void;\n}\n\nconst ListHistoryEntry: React.FunctionComponent<\n  ListHistoryEntryProps\n> = props => {\n  const url = props.config.domain + props.config.endpoint;\n  let statusClass = 'success';\n  if (props.status > 200) {\n    if (props.status < 400) {\n      statusClass = 'redirect';\n    } else if (props.status < 500) {\n      statusClass = 'client';\n    } else {\n      statusClass = 'server';\n    }\n  }\n\n  return (\n    <div className={(props.className || '') + ' ListHistoryEntry'}>\n      <div className=\"row\">\n        <div className=\"two columns\">\n          <Tooltip text=\"Status code\">\n            <div\n              className={statusClass + ' u-full-width ListHistoryEntryStatus'}\n            >\n              {props.status}\n            </div>\n          </Tooltip>\n        </div>\n        <div className=\"two columns\">\n          <Tooltip text=\"Request method\">\n            <div\n              className={\n                props.config.method.toLowerCase() +\n                ' u-full-width ListHistoryEntryMethod'\n              }\n            >\n              {props.config.method}\n            </div>\n          </Tooltip>\n        </div>\n        <div className=\"two columns\">\n          <div\n            className={\n              props.config.method.toLowerCase() +\n              ' u-full-width ListHistoryEntryID'\n            }\n          >\n            <Copy\n              content={props.id}\n              noIcon={true}\n              tooltip=\"Copy Timestamp / ID\"\n              useDiv={true}\n            >\n              {props.id}\n            </Copy>\n          </div>\n        </div>\n        <div className=\"four columns\">\n          <Copy content={url} noIcon={true} tooltip=\"Copy URL\" useDiv={true}>\n            <div className=\"u-full-width ListHistoryEntryDest\">{url}</div>\n          </Copy>\n        </div>\n        <div className=\"two columns ListHistoryEntryAction\">\n          <Tooltip text=\"Load entry\">\n            <LoadHistoryEntry\n              className=\"u-full-width\"\n              config={props.config}\n              data={props.data}\n              updateConfig={props.updateConfig}\n              updateData={props.updateData}\n            />\n          </Tooltip>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ListHistoryEntry;\n","/**\n * @file ListHistory component\n * @author Mattamorphic\n */\nimport './css/ListHistory.css';\n\nimport { ConfigData } from '../../config/Config';\nimport { DataData } from '../../data/Data';\nimport { HistoryEntry } from '../History';\nimport Input from '../../shared/Input';\nimport ListHistoryEntry from './listhistoryentry/ListHistoryEntry';\nimport React from 'react';\n\ninterface ListHistoryProps {\n  history: HistoryEntry[];\n  updateConfig: (config: ConfigData) => void;\n  updateData: (data: DataData) => void;\n}\n\ninterface ListHistoryState {\n  filter: string | null;\n}\n\nexport default class ListHistory extends React.PureComponent<\n  ListHistoryProps,\n  ListHistoryState\n> {\n  constructor(props: ListHistoryProps) {\n    super(props);\n    this.state = {\n      filter: null\n    };\n  }\n\n  updateFilter = (filter: string) => {\n    this.setState({\n      filter\n    });\n  };\n\n  render() {\n    const history = this.props.history.filter(entry =>\n      JSON.stringify(entry).includes(this.state.filter || '')\n    );\n\n    return (\n      <>\n        <div className=\"row\">\n          <Input\n            className=\"u-full-width ListHistoryFilter\"\n            isDisabled={this.props.history.length === 0}\n            onChange={this.updateFilter}\n            placeholder=\"Filter...\"\n            value={this.state.filter || ''}\n          />\n        </div>\n        <div className=\"ListHistory\">\n          {history.map((historyEntry: HistoryEntry, i: number) => (\n            <ListHistoryEntry\n              className={i % 2 === 0 ? 'dark' : 'light'}\n              config={historyEntry.config}\n              data={historyEntry.data}\n              id={historyEntry.id}\n              key={historyEntry.id}\n              status={historyEntry.status}\n              updateConfig={this.props.updateConfig}\n              updateData={this.props.updateData}\n            />\n          ))}\n        </div>\n      </>\n    );\n  }\n}\n","/**\n * @file History component\n * @author Mattamorphic\n */\nimport './css/History.css';\n\nimport ClearHistory from './clearhistory/ClearHistory';\nimport { ConfigData } from '../config/Config';\nimport { DataData } from '../data/Data';\nimport ListHistory from './listhistory/ListHistory';\nimport React from 'react';\nimport Toggler from '../shared/Toggler';\n\nexport interface HistoryEntry {\n  id: string;\n  config: ConfigData;\n  data: DataData;\n  status: number;\n}\n\ninterface HistoryProps {\n  history: HistoryEntry[];\n  clearHistory: () => void;\n  updateConfig: (config: ConfigData) => void;\n  updateData: (data: DataData) => void;\n}\n\ninterface HistoryState {\n  showHistory: boolean;\n}\n\nexport default class History extends React.PureComponent<\n  HistoryProps,\n  HistoryState\n> {\n  constructor(props: HistoryProps) {\n    super(props);\n    this.state = {\n      showHistory: false\n    };\n  }\n\n  loadHistory = (id: string): boolean => {\n    const item = window.localStorage.getItem(id);\n    if (item === null) {\n      return false;\n    }\n    const payload = JSON.parse(item);\n    this.props.updateConfig(payload.config);\n    this.props.updateData(payload.data);\n    return true;\n  };\n\n  toggleHistory = (): void => {\n    this.setState(prevState => ({\n      showHistory: !prevState.showHistory\n    }));\n  };\n\n  render() {\n    return (\n      <Toggler\n        className=\"History\"\n        collapsedData={<>{this.props.history.length} items in history</>}\n        isToggled={this.state.showHistory}\n        heading=\"History\"\n        label=\"History\"\n        onToggle={this.toggleHistory}\n        tooltip=\"Toggle history\"\n      >\n        <ListHistory\n          history={this.props.history}\n          updateConfig={this.props.updateConfig}\n          updateData={this.props.updateData}\n        />\n        <ClearHistory clear={this.props.clearHistory} />\n      </Toggler>\n    );\n  }\n}\n","/**\n * @file Table component\n * @author Mattamorphic\n */\nimport './css/Table.css';\n\nimport React from 'react';\n\nexport interface TableRow {\n  [key: string]: string | JSX.Element;\n}\n\ninterface TableProps {\n  className?: string;\n  data: TableRow[];\n}\n\nconst Table: React.FunctionComponent<TableProps> = props => {\n  if (props.data.length === 0) {\n    return <table className={props.className || ''} />;\n  }\n\n  const headers = Object.keys(props.data[0]);\n\n  return (\n    <table className={props.className || ''}>\n      <thead>\n        {headers.map((header: string, i: number) => (\n          <th key={`header_${i}`}>{header}</th>\n        ))}\n      </thead>\n      <tbody>\n        {props.data.map((row: TableRow, i: number) => (\n          <tr key={`tr_${i}`}>\n            {headers.map((header: string, j: number) => (\n              <td key={`tr_${i}_${j}`} data-label={header}>\n                {row[header]}\n              </td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Table;\n","/**\n * @file ResponseHeaders component\n * @author Mattamorphic\n */\n\nimport './css/ResponseHeaders.css';\n\nimport * as utils from '../../../../utils';\n\nimport React from 'react';\nimport Table from '../../../shared/Table';\nimport Toggler from '../../../shared/Toggler';\n\ninterface ResponseHeadersProps {\n  headers: Headers;\n}\n\ninterface ResponseHeadersState {\n  showHeaders: boolean;\n}\n\nexport default class ResponseHeaders extends React.PureComponent<\n  ResponseHeadersProps,\n  ResponseHeadersState\n> {\n  constructor(props: ResponseHeadersProps) {\n    super(props);\n    this.state = {\n      showHeaders: false\n    };\n  }\n\n  parse = (value: string): string | JSX.Element => {\n    if (utils.isStringANumber(value)) {\n      return <span className=\"header-value header-number\">{value}</span>;\n    }\n    if (utils.isStringADate(value)) {\n      return <span className=\"header-value header-date\">{value}</span>;\n    }\n    if (utils.isStringAURL(value)) {\n      return (\n        <span className=\"header-value header-url\">\n          <a href={value}>{value}</a>\n        </span>\n      );\n    }\n    if (utils.isStringBooleanOrNull(value)) {\n      return <span className=\"header-value header-boolean\">{value}</span>;\n    }\n    return <span className=\"header-value header-string\">{value}</span>;\n  };\n\n  toggleHeaders = () => {\n    this.setState(prevState => ({\n      showHeaders: !prevState.showHeaders\n    }));\n  };\n\n  render() {\n    const headerKeys = Array.from(this.props.headers.keys());\n    return (\n      <Toggler\n        className=\"ResponseHeaders\"\n        isToggled={this.state.showHeaders}\n        heading=\"Response Headers\"\n        label=\"Headers\"\n        onToggle={this.toggleHeaders}\n      >\n        <Table\n          className=\"u-max-full-width ResponseHeadersTable\"\n          data={headerKeys.map(key => ({\n            Header: this.parse(key),\n            Value: this.parse(this.props.headers.get(key) || '')\n          }))}\n        />\n      </Toggler>\n    );\n  }\n}\n","/**\n * @file ResponseJson component\n * @author Mattamorphic\n */\nimport './css/ResponseJson.css';\n\nimport * as utils from '../../../../utils';\n\nimport { JsonValueTypes } from '../../../../enums';\nimport React from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport Toggler from '../../../shared/Toggler';\n\ninterface ResponseJsonProps {\n  data: { [key: string]: any };\n}\n\ninterface ResponseJsonState {\n  response: string;\n  showJson: boolean;\n}\n\nexport default class ResponseJson extends React.PureComponent<\n  ResponseJsonProps,\n  ResponseJsonState\n> {\n  constructor(props: ResponseJsonProps) {\n    super(props);\n    this.state = {\n      response: JSON.stringify(props.data, null, 3).replace(\n        utils.regEx.jsonData,\n        this.replacer\n      ),\n      showJson: false\n    };\n  }\n\n  toggleJson = () => {\n    this.setState(prevState => ({\n      showJson: !prevState.showJson\n    }));\n  };\n\n  replacer = (_: string, p1: string, p2: string, p3: string, p4: string) => {\n    const part = { end: p4, indent: p1, key: p2, value: p3 };\n\n    let valueClass = 'json-value';\n    let type = JsonValueTypes.STRING;\n    if (part.value !== undefined && part.value !== null) {\n      if (utils.isStringANumber(part.value)) {\n        valueClass = 'json-number';\n        type = JsonValueTypes.NUMBER;\n      } else if (utils.isStringADate(part.value)) {\n        valueClass = 'json-date';\n        type = JsonValueTypes.DATE;\n      } else if (utils.isStringBooleanOrNull(part.value)) {\n        valueClass = 'json-boolean';\n        type = JsonValueTypes.BOOLEAN;\n      } else if (utils.isStringAURL(part.value)) {\n        valueClass = 'json-url';\n        type = JsonValueTypes.URL;\n      } else {\n        valueClass = 'json-string';\n        type = JsonValueTypes.STRING;\n      }\n    }\n    return ReactDOMServer.renderToString(\n      <>\n        {'\\u00a0'.repeat(part.indent.length)}\n        {part.key && <span className=\"json-key\"> {part.key} </span>}\n        {part.value && (\n          <span className={valueClass}>\n            {type === JsonValueTypes.URL ? (\n              <a href={part.value.replace(utils.regEx.quotes, '')}>\n                {part.value}\n              </a>\n            ) : (\n              part.value\n            )}\n          </span>\n        )}\n        {part.end && <span className=\"json-key\"> {part.end} </span>}\n        <br />\n      </>\n    );\n  };\n\n  render() {\n    return (\n      <Toggler\n        isToggled={this.state.showJson}\n        heading=\"JSON Response\"\n        label=\"Data\"\n        onToggle={this.toggleJson}\n      >\n        <div\n          className=\"ResponseJson\"\n          dangerouslySetInnerHTML={{\n            __html: this.state.response\n          }}\n        />\n      </Toggler>\n    );\n  }\n}\n","/**\n * @file ResponseRaw component\n * @author Mattamorphic\n */\nimport './css/ResponseRaw.css';\n\nimport React from 'react';\nimport Toggler from '../../../shared/Toggler';\n\ninterface ResponseRawProps {\n  data: string;\n}\n\ninterface ResponseRawState {\n  showRaw: boolean;\n}\n\nexport default class ResponseRaw extends React.PureComponent<\n  ResponseRawProps,\n  ResponseRawState\n> {\n  constructor(props: ResponseRawProps) {\n    super(props);\n    this.state = {\n      showRaw: false\n    };\n  }\n\n  toggleRaw = () => {\n    this.setState(prevState => ({\n      showRaw: !prevState.showRaw\n    }));\n  };\n\n  render() {\n    return (\n      <Toggler\n        isToggled={this.state.showRaw}\n        heading=\"Raw Response\"\n        label=\"Raw\"\n        onToggle={this.toggleRaw}\n      >\n        <div className=\"ResponseRaw\">{this.props.data}</div>\n      </Toggler>\n    );\n  }\n}\n","/**\n * @file FetchResponse component\n * @author Mattamorphic\n */\nimport './css/FetchResponse.css';\n\nimport React from 'react';\nimport ResponseHeaders from './responseheaders/ResponseHeaders';\nimport ResponseJson from './responsejson/ResponseJson';\nimport ResponseRaw from './responseraw/ResponseRaw';\n\ninterface FetchResponseProps {\n  data: string;\n  headers: Headers;\n}\n\nconst FetchResponse: React.FunctionComponent<FetchResponseProps> = props => {\n  let json = {};\n  try {\n    json = JSON.parse(props.data);\n  } catch (_) {\n    json = {};\n  }\n\n  return (\n    <div className=\"FetchResponse\">\n      <ResponseHeaders headers={props.headers} />\n      <ResponseRaw data={props.data} />\n      <ResponseJson data={json} />\n    </div>\n  );\n};\n\nexport default FetchResponse;\n","import './css/Loading.css';\n\nimport React from 'react';\n\ninterface LoadingProps {\n  className?: string;\n}\n\nconst Loading: React.FunctionComponent<LoadingProps> = props => {\n  return (\n    <div className={(props.className || '') + ' LoadingContainer'}>\n      <div className=\"Loading\">\n        <div />\n      </div>\n      <div>Loading</div>\n    </div>\n  );\n};\n\nexport default Loading;\n","/**\n * @file Notice component\n * @author Mattamorphic\n */\nimport './css/Notice.css';\n\nimport React from 'react';\n\ninterface NoticeProps {\n  className?: string;\n  heading: string;\n}\n\nconst Notice: React.FunctionComponent<NoticeProps> = props => {\n  return (\n    <div className={(props.className || '') + ' Notice'}>\n      <h4> {props.heading} </h4>\n      <>{props.children}</>\n    </div>\n  );\n};\n\nexport default Notice;\n","/**\n * @file $COMPONENT component\n * @author Mattamorphic\n */\nimport './css/Confirm.css';\n\nimport Button from './Button';\nimport React from 'react';\n\ninterface ConfirmProps {\n  className?: string;\n  label: string;\n  message: string;\n  onConfirm: () => void;\n  onCancel: () => void;\n  isPrimary?: boolean;\n}\n\nconst Confirm: React.FunctionComponent<ConfirmProps> = props => {\n  const onConfirm = () => {\n    const result = window.confirm(props.message);\n    result ? props.onConfirm() : props.onCancel();\n  };\n\n  return (\n    <Button\n      className={props.className || ''}\n      isPrimary={props.isPrimary || false}\n      label={props.label}\n      onClick={onConfirm}\n    />\n  );\n};\n\nexport default Confirm;\n","/**\n * @file Checkbox component\n * @author Mattamorphic\n */\nimport Input from './Input';\nimport { InputTypes } from '../../enums';\nimport React from 'react';\n\ninterface CheckboxProps {\n  className?: string;\n  isDisabled?: boolean;\n  label?: string;\n  isCheckedLabel?: string;\n  isNotCheckedLabel?: string;\n  name?: string;\n  id?: string;\n  isChecked: boolean;\n  onChange: (value: boolean) => void;\n  value?: string;\n}\n\nconst Checkbox: React.FunctionComponent<CheckboxProps> = props => {\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    props.onChange(e.target.checked);\n  };\n\n  const label = props.isChecked\n    ? props.isCheckedLabel || props.label\n    : props.isNotCheckedLabel || props.label;\n\n  return (\n    <div className={props.className || ''}>\n      <Input\n        id={props.id || ''}\n        isChecked={props.isChecked}\n        isDisabled={props.isDisabled || false}\n        name={props.name || ''}\n        onChangeRaw={onChange}\n        type={InputTypes.CHECKBOX}\n        value={props.value || ''}\n      />\n      <span> {label} </span>\n    </div>\n  );\n};\n\nexport default Checkbox;\n","/**\n * @file Proxy component\n * @author Mattamorphic\n */\n\nimport './css/Proxy.css';\n\nimport * as utils from '../../../../utils';\n\nimport Checkbox from '../../../shared/Checkbox';\nimport Input from '../../../shared/Input';\nimport { InputTypes } from '../../../../enums';\nimport Notice from '../../../shared/Notice';\nimport React from 'react';\nimport Toggler from '../../../shared/Toggler';\n\nexport interface ProxyData {\n  url: string;\n  isEnabled: boolean;\n}\n\ninterface ProxyProps {\n  proxy: ProxyData;\n  onUpdateProxy: (data: ProxyData) => void;\n}\n\ninterface ProxyState {\n  showProxySettings: boolean;\n}\n\nexport default class Proxy extends React.PureComponent<ProxyProps, ProxyState> {\n  constructor(props: ProxyProps) {\n    super(props);\n    this.state = {\n      showProxySettings: false\n    };\n  }\n\n  toggleProxySettings = () => {\n    this.setState(prevState => ({\n      showProxySettings: !prevState.showProxySettings\n    }));\n  };\n\n  onUpdateProxyUrl = (url: string) => {\n    this.props.onUpdateProxy({\n      isEnabled: this.props.proxy.isEnabled,\n      url\n    });\n  };\n\n  onUpdateProxyEnabled = (isEnabled: boolean) => {\n    this.props.onUpdateProxy({\n      isEnabled,\n      url: this.props.proxy.url\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <Toggler\n          className=\"Proxy\"\n          collapsedData={\n            <>\n              {this.props.proxy.isEnabled ? (\n                <>\n                  Proxy [<strong>enabled</strong>] through [\n                  <a href={this.props.proxy.url}>{this.props.proxy.url}</a>]\n                </>\n              ) : (\n                <>\n                  Proxy [<strong>disabled</strong>]\n                </>\n              )}\n            </>\n          }\n          isToggled={this.state.showProxySettings}\n          heading=\"Proxy Settings\"\n          label=\"Proxy Settings\"\n          tooltip=\"Toggle proxy settings\"\n          onToggle={this.toggleProxySettings}\n        >\n          <div className=\"row\">\n            <Notice className=\"u-full-width\" heading=\"Proxy Overview\">\n              Requests are proxied through a copy of cors-anywhere <br />\n              This is hosted on: <a href={utils.PROXY}>{utils.PROXY}</a> <br />\n              You can find the code for this at{' '}\n              <a href=\"https://github.com/Mattamorphic/curlify/tree/proxy\">\n                GitHub\n              </a>{' '}\n              <br />\n              If you&apos;d like to use your own proxy, simply replace the URL{' '}\n              <br />\n              This should follow cors-anywhere entry design <br />\n              This proxy forwards request, gets around the cors issue, and\n              allows us to return headers <br />\n              No data is recorded in the proxy\n            </Notice>\n          </div>\n          <div className=\"row\">\n            <Input\n              className=\"six columns u-full-width\"\n              isDisabled={!this.props.proxy.isEnabled}\n              onChange={this.onUpdateProxyUrl}\n              placeholder=\"Proxy Url\"\n              type={InputTypes.URL}\n              value={this.props.proxy.url}\n            />\n            <Checkbox\n              className=\"checkbox six columns u-full-width\"\n              isChecked={this.props.proxy.isEnabled}\n              isCheckedLabel=\"Proxy is enabled\"\n              isNotCheckedLabel=\"Proxy is not enabled\"\n              onChange={this.onUpdateProxyEnabled}\n              value=\"proxy\"\n            />\n          </div>\n        </Toggler>\n      </>\n    );\n  }\n}\n","/**\n * @file Request component\n * @author Mattamorphic\n */\nimport './css/Request.css';\n\nimport Button from '../../shared/Button';\nimport Confirm from '../../shared/Confirm';\nimport React from 'react';\n\nimport Proxy, { ProxyData } from './proxy/Proxy';\n\ninterface RequestProps {\n  shouldConfirm: boolean;\n  incompleteData?: string;\n  hasRun: boolean;\n  proxy: ProxyData;\n  onRequest: () => void;\n  onUpdateProxy: (data: ProxyData) => void;\n}\n\nconst Request: React.FunctionComponent<RequestProps> = props => {\n  const onConfirm = props.onRequest;\n  const onCancel = () => {};\n\n  return (\n    <div className=\"row\">\n      <div className=\"Request\">\n        <Proxy onUpdateProxy={props.onUpdateProxy} proxy={props.proxy} />\n        {props.shouldConfirm ? (\n          <Confirm\n            className=\"u-full-width\"\n            label=\"Test\"\n            message=\"Are you sure?\"\n            onCancel={onCancel}\n            onConfirm={onConfirm}\n          />\n        ) : (\n          <Button\n            className=\"u-full-width\"\n            isPrimary={false}\n            label=\"Test\"\n            onClick={props.onRequest}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Request;\n","/**\n * @file Test component\n * @author Mattamorphic\n */\nimport './css/Test.css';\n\nimport * as utils from '../../utils';\n\nimport { ConfigData } from '../config/Config';\nimport { DataData } from '../data/Data';\nimport FetchResponse from './fetchresponse/FetchResponse';\nimport Loading from '../shared/Loading';\nimport Notice from '../shared/Notice';\nimport { ProxyData } from './request/proxy/Proxy';\nimport React from 'react';\nimport Request from './request/Request';\n\nexport interface ValidatePayloadResult {\n  message: string[];\n  success: boolean;\n}\n\ninterface TestProps {\n  config: ConfigData;\n  data: DataData;\n  proxy: ProxyData;\n  addToHistory: (config: ConfigData, data: DataData, status: number) => void;\n  updateConfig: (data: ConfigData) => void;\n  updateData: (data: DataData) => void;\n  updateProxy: (data: ProxyData) => void;\n  validation: ValidatePayloadResult;\n}\n\ninterface TestState {\n  isLoading: boolean;\n  hasRun: boolean;\n  response: {\n    headers?: Headers;\n    data?: string;\n    destination?: URL;\n    status?: number;\n  };\n}\n\nclass Test extends React.PureComponent<TestProps, TestState> {\n  baseState: TestState;\n\n  constructor(props: TestProps) {\n    super(props);\n    this.state = {\n      // has there been an execution\n      hasRun: false,\n      // is the request executing\n      isLoading: false,\n      // hold the response\n      response: {}\n    };\n    this.baseState = this.state;\n  }\n\n  componentDidUpdate(prevProps: TestProps) {\n    if (utils.hasProxyChanged(prevProps.proxy, this.props.proxy)) {\n      this.setState(this.baseState);\n    }\n  }\n\n  getDestination = (): string => {\n    const destination =\n      this.props.config.domain +\n      this.props.config.endpoint +\n      utils.convertKeyValueArrayToQueryParams(this.props.config.queryParams);\n    return this.props.proxy.isEnabled\n      ? this.props.proxy.url + destination\n      : destination;\n  };\n\n  getFetchData = () => {\n    const fetchData: RequestInit = {\n      body: null,\n      headers: new Headers(\n        this.props.config.headers.map(header => [header.key, header.value])\n      ),\n      method: this.props.config.method\n    };\n\n    if (utils.methodHasPayload(this.props.config.method)) {\n      fetchData.body = JSON.stringify(\n        this.props.data.data[this.props.data.type]\n      );\n    }\n    return fetchData;\n  };\n\n  onTest = async () => {\n    // Update the local state\n    this.setState(\n      {\n        hasRun: true,\n        isLoading: true,\n        response: {}\n      },\n      async () => {\n        // Todo: Run our own proxy service instead of using this.\n        const dest = new URL(this.getDestination());\n        let data = null;\n        let response: Response | null = null;\n        try {\n          response = await fetch(dest.href, this.getFetchData());\n          data = await response.text();\n          this.setState({\n            isLoading: false,\n            response: {\n              data,\n              destination: dest,\n              headers: response.headers as Headers,\n              status: response.status\n            }\n          });\n        } catch (_) {\n          this.setState({\n            isLoading: false\n          });\n        } finally {\n          // Store the request in the session history\n          this.props.addToHistory(\n            this.props.config,\n            this.props.data,\n            response ? response.status : 0\n          );\n        }\n      }\n    );\n  };\n\n  render() {\n    if (!this.props.validation.success) {\n      return (\n        <div className=\"row\">\n          <div className=\"Test Disabled\">\n            {this.props.validation.message.map((string, idx) => (\n              <label key={`validation_${idx}`}> {string} </label>\n            ))}\n          </div>\n        </div>\n      );\n    }\n    if (this.state.isLoading) {\n      return (\n        <div className=\"row\">\n          <Loading />\n        </div>\n      );\n    }\n\n    const proxyMessage = `${\n      this.props.proxy.isEnabled ? 'through Proxy' : ''\n    } to ${this.state.response.destination || this.getDestination()}`;\n\n    return (\n      <>\n        <Request\n          hasRun={this.state.hasRun}\n          onRequest={this.onTest}\n          onUpdateProxy={this.props.updateProxy}\n          proxy={this.props.proxy} // Todo: We need to ensure that everything matches up\n          shouldConfirm={false}\n        />\n        {this.state.hasRun &&\n          (this.state.response.headers && this.state.response.data ? (\n            <>\n              <div className=\"row\">\n                <Notice\n                  className=\"twelve columns u-full-width\"\n                  heading=\"Request complete\"\n                >\n                  Request sent {proxyMessage}\n                </Notice>\n              </div>\n              <div className=\"row\">\n                <FetchResponse\n                  data={this.state.response.data}\n                  headers={this.state.response.headers}\n                />\n              </div>\n            </>\n          ) : (\n            <div className=\"row\">\n              <Notice\n                className=\"twelve columns u-full-width\"\n                heading=\"Request Failed\"\n              >\n                Request couldn&apos;t be sent {proxyMessage}\n              </Notice>\n            </div>\n          ))}\n      </>\n    );\n  }\n}\n\nexport default Test;\n","/**\n * @file App component\n * @author Mattamorphic\n */\n// 'None' imports\nimport './css/App.css';\n\n// 'All' imports\nimport * as utils from './utils';\n\n// 'Single' Imports\nimport Heading from './components/heading/Heading';\nimport Output from './components/output/Output';\nimport { ProxyData } from './components/test/request/proxy/Proxy';\nimport React from 'react';\n\n// 'Multiple' imports\nimport { ColumnCount, DataType, HTTPMethods, OutputType } from './enums';\nimport Config, { ConfigData } from './components/config/Config';\nimport Data, { DataData } from './components/data/Data';\nimport History, { HistoryEntry } from './components/history/History';\nimport Test, { ValidatePayloadResult } from './components/test/Test';\n\ninterface AppProps {}\n\ninterface AppState {\n  config: ConfigData;\n  data: DataData;\n  history: HistoryEntry[];\n  output: OutputState;\n  proxy: ProxyData;\n  validation: ValidatePayloadResult;\n}\n\ninterface OutputState {\n  type: OutputType;\n}\n\nexport default class App extends React.Component<AppProps, AppState> {\n  isStorageAvailable = false;\n\n  constructor(props: AppProps) {\n    super(props);\n    this.state = {\n      config: {\n        domain: 'https://api.github.com',\n        endpoint: '/users/octocat',\n        headers: [],\n        method: HTTPMethods.GET,\n        queryParams: [],\n        urlString: 'https://api.github.com/users/octocat'\n      },\n      data: {\n        data: {\n          form: null,\n          graphQL: { query: 'query {viewer {username}}' },\n          json: { test: 'value' }\n        },\n        type: DataType.JSON\n      },\n      history: utils.getHistory(),\n      output: {\n        type: OutputType.CURL\n      },\n      proxy: {\n        isEnabled: true,\n        url: utils.PROXY\n      },\n      validation: {\n        message: [],\n        success: true\n      }\n    };\n    // Only called once, no need to add to state\n    this.isStorageAvailable = utils.isStorageAvailable();\n  }\n\n  /**\n   * Updates the history in the state, and calls the util function to update history\n   *\n   * @params {ConfigData} config The configuration of the request\n   * @params {DataData}   data   The data payload in the request\n   * @params {number}     status The status code for the request\n   */\n  addToHistory = (config: ConfigData, data: DataData, status: number): void => {\n    this.setState(_ => {\n      utils.addToHistory(config, data, status);\n      return {\n        history: utils.getHistory()\n      };\n    });\n  };\n\n  /**\n   * Clears the history from the local storage\n   */\n  clearHistory = (): void => {\n    utils.clearHistory();\n    this.setState({\n      history: []\n    });\n  };\n\n  /**\n   * Handle state change for the request config\n   *\n   * @params {ConfigData} config The config for the requestt\n   */\n  onConfigChange = (config: ConfigData): void => {\n    this.setState(\n      {\n        config: {\n          domain: config.domain,\n          endpoint: config.endpoint,\n          // Forces array to update the state\n          headers: config.headers.map(header => header),\n          method: config.method,\n          // Forces array to update the state\n          queryParams: config.queryParams.map(qp => qp),\n          urlString: config.urlString\n        }\n      },\n      // Once we've updated the state, validate the request\n      () => this.setState({ validation: this.validatePayload() })\n    );\n  };\n\n  /**\n   * Handle state change for the request payload\n   *\n   * @params {DataData} data The Data for the requestt\n   */\n  onDataChange = (data: DataData): void => {\n    this.setState(\n      {\n        data\n      },\n      // Once we've updated the state, validate the request\n      () => this.setState({ validation: this.validatePayload() })\n    );\n  };\n\n  /**\n   * Handle state change for the request proxy\n   *\n   * @params {ProxyData} proxy The proxy for the requestt\n   */\n  onProxyChange = (proxy: ProxyData): void => {\n    this.setState({\n      proxy\n    });\n  };\n\n  /**\n   * Validate the request config in the state\n   *\n   * @returns {ValidatePayloadResult}\n   */\n  validatePayload = (): ValidatePayloadResult => {\n    const result = {\n      message: [] as string[],\n      success: true\n    };\n    if (!utils.isValidMethod(this.state.config.method)) {\n      result.message.push(\n        `Invalid ${this.state.config.method}, check settings above`\n      );\n      result.success = false;\n    }\n    if (!utils.isValidHeaders(this.state.config.headers)) {\n      result.message.push(`Invalid headers, check settings above`);\n      result.success = false;\n    }\n    if (\n      !utils.isValidURL(this.state.config.domain, this.state.config.endpoint)\n    ) {\n      result.message.push(\n        `Invalid URL ${this.state.config.domain} or ${this.state.config.endpoint}, check settings above`\n      );\n      result.success = false;\n    }\n\n    if (\n      this.state.data.type === DataType.GQL &&\n      !utils.isValidGraphQLString(this.state.data.data.graphQL.query)\n    ) {\n      result.message.push(`Invalid GraphQL string, check settings above`);\n      result.success = false;\n    }\n    return result;\n  };\n\n  render() {\n    const showData = utils.methodHasPayload(this.state.config.method);\n    return (\n      <div className=\"container App\">\n        <div className=\"row\">\n          <Heading imageSrc={process.env.PUBLIC_URL + '/images/banner.png'} />\n        </div>\n        <div className=\"row\">\n          <Config data={this.state.config} updateConfig={this.onConfigChange} />\n        </div>\n        <div className=\"row\">\n          <div className={showData ? ColumnCount.SIX : ColumnCount.TWELVE}>\n            <Output\n              className=\"u-full-width\"\n              config={this.state.config}\n              data={this.state.data}\n              output={this.state.output.type}\n              updateConfig={this.onConfigChange}\n              updateData={this.onDataChange}\n            />\n          </div>\n          {showData && (\n            <div className=\"six columns\">\n              <Data\n                className=\"u-full-width\"\n                data={this.state.data}\n                updateData={this.onDataChange}\n              />\n            </div>\n          )}\n        </div>\n        {this.isStorageAvailable && (\n          <div className=\"row\">\n            <History\n              clearHistory={this.clearHistory}\n              history={this.state.history}\n              updateConfig={this.onConfigChange}\n              updateData={this.onDataChange}\n            />\n          </div>\n        )}\n        <div className=\"row\">\n          <Test\n            addToHistory={this.addToHistory}\n            config={this.state.config}\n            data={this.state.data}\n            proxy={this.state.proxy}\n            updateConfig={this.onConfigChange}\n            updateData={this.onDataChange}\n            updateProxy={this.onProxyChange}\n            validation={this.state.validation}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}