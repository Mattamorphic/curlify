{"version":3,"sources":["enums/index.tsx","components/shared/Select.tsx","components/config/method/Method.tsx","components/data/graphql/GraphQL.tsx","components/config/headers/type/Types.tsx","components/shared/Input.tsx","components/config/headers/value/Value.tsx","components/config/headers/Headers.tsx","components/config/destination/domain/Domain.tsx","components/config/destination/endpoint/Endpoint.tsx","components/config/destination/Destination.tsx","components/config/Config.tsx","components/shared/Button.tsx","components/shared/Copy.tsx","components/shared/Saving.tsx","components/shared/TextArea.tsx","components/data/graphql/type/Type.tsx","components/data/json/Json.tsx","components/data/selector/Selector.tsx","components/data/Data.tsx","components/heading/Heading.tsx","utils/index.ts","components/output/curl/Curl.tsx","components/output/Output.tsx","components/shared/Checkbox.tsx","components/shared/Toggler.tsx","components/shared/Notice.tsx","components/test/request/proxy/Proxy.tsx","components/shared/Confirm.tsx","components/test/request/Request.tsx","components/test/fetchresponse/FetchResponse.tsx","components/shared/Loading.tsx","components/test/Test.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["HTTPMethods","HTTPHeaders","DataType","OutputType","InputTypes","ColumnCount","JsonValueTypes","Select","props","selected","react_default","a","createElement","Fragment","label","className","name","size","style","disabled","isDisabled","multiple","isMultiple","onChange","value","values","map","i","key","concat","GraphQLType","Method","width","shared_Select","e","target","onUpdate","Object","Types","isFullWidth","index","Input","type","TEXT","checked","isChecked","id","Value","shared_Input","Headers","updateType","header","updateValue","addHeader","preventDefault","length","removeHeader","currentTarget","split","pop","undefined","parseInt","filter","includes","onClick","type_Types","toConsumableArray","value_Value","Domain","URL","Endpoint","Destination","domain","endpoint","domain_Domain","charAt","substr","endpoint_Endpoint","Config","headers_Headers","data","headers","push","updateConfig","TWELVE","method_Method","method","TWO","destination_Destination","TEN","Button","isPrimary","Copy","copy","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","navigator","clipboard","writeText","content","stop","apply","this","arguments","shared_Button","Saving","react_transition_group","transitionName","transitionLeave","transitionEnter","transitionEnterTimeout","isSaved","TextArea","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChangeDirect","state","React","Component","Type","GraphQL","updateGraphQL","draft","getDocAndTypeFromGQLString","gql","onUpdateData","query","setState","_","replace","pretty","PrettyMe","shared_Saving","type_Type","shared_Copy","TextArea_TextArea","ref","doc","parse","definitions","operation","print","newProps","PureComponent","Json","updateJson","hasDraft","object","JSON","stringify","Selector","Data","selector_Selector","updateData","Json_Json","json","GQL","GraphQL_GraphQL","graphQL","Heading","src","imageSrc","alt","methodHasPayload","GET","HEAD","PROXY","regEx","url","curlHeader","curlMethod","curlData","newLine","newLineAndTab","multipleSpaces","isValidMethod","string","isValidURL","possUrl","match","isValidHeaders","types","reduce","curr","isValidGraphQLString","Curl","serializerCurl","config","hasNewConfig","hasNewData","getMethod","getHeaders","newData","getData","domainAndEndpoint","getDomainAndEndpoint","FORM","updateCurl","curl","getValue","regex","utils","exec","height","payload","join","keys","parsePayloadString","Output","output","CURL","Curl_Curl","Checkbox","isCheckedLabel","isNotCheckedLabel","CHECKBOX","Toggler","isToggled","onToggle","children","Notice","lines","heading","line","Proxy","toggleProxySettings","prevState","showProxySettings","onUpdateProxyUrl","onUpdateProxy","isEnabled","proxy","onUpdateProxyEnabled","shared_Toggler","shared_Notice","placeholder","shared_Checkbox","Confirm","window","confirm","message","onConfirm","onCancel","Request","onRequest","Proxy_Proxy","shouldConfirm","shared_Confirm","FetchResponse","replacer","p1","p2","p3","p4","part","indent","end","valueClass","STRING","isNaN","Date","toLowerCase","BOOLEAN","DATE","NUMBER","ReactDOMServer","renderToString","repeat","href","toggleHeaders","showHeaders","toggleData","showData","toggleRaw","showRaw","_this2","console","log","Array","from","get","dangerouslySetInnerHTML","__html","Loading","Test","getFetchData","fetchData","body","onTest","_callee2","finalDestination","_context2","isLoading","dest","response","fetch","sent","text","validation","success","shared_Loading","request_Request","updateProxy","FetchResponse_FetchResponse","idx","App","onConfigChange","validatePayload","onDataChange","result","test","form","heading_Heading","process","config_Config","data_Data","output_Output","test_Test","Boolean","location","hostname","ReactDOM","render","App_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.788c503f.chunk.js","sourcesContent":["export enum HTTPMethods {\n  DELETE = \"DELETE\",\n  GET = \"GET\",\n  HEAD = \"HEAD\",\n  PATCH = \"PATCH\",\n  POST = \"POST\",\n  PUT = \"PUT\",\n};\n\nexport enum HTTPHeaders {\n  \"A-IM\" = \"A-IM\",\n  Accept = \"Accept\",\n  \"Accept-Charset\" = \"Accept-Charset\",\n  \"Accept-Datetime\" = \"Accept-Datetime\",\n  \"Accept-Encoding\" = \"Accept-Encoding\",\n  \"Accept-Language\" = \"Accept-Language\",\n  \"Access-Control-Request-Method\" = \"Access-Control-Request-Method\",\n  \"Access-Control-Request-Headers\" = \"Access-Control-Request-Headers\",\n  Authorization = \"Authorization\",\n  Authentication = \"Authentication\",\n  \"Cache-Control\" = \"Cache-Control\",\n  \"Content-Length\" = \"Content-Length\",\n  \"Content-MD5\" = \"Content-MD5\",\n  \"Content-Type\" = \"Content-Type\",\n  Cookie = \"Cookie\",\n  Date = \"Date\",\n  Expect = \"Expect\",\n  Forwarded = \"Forwarded\",\n  From = \"From\",\n  Host = \"Host\",\n  \"HTTP2-Settings\" = \"HTTP2-Settings\",\n  \"If-Match\" = \"If-Match\",\n  \"If-Modified-Since\" = \"If-Modified-Since\",\n  \"If-None-Match\" = \"If-None-Match\",\n  \"If-Range\" = \"If-Range\",\n  \"If-Unmodified-Since\" = \"If-Unmodified-Since\",\n  \"Max-Forwards\" = \"Max-Forwards\",\n  Pragma = \"Pragma\",\n  \"Proxy-Authorization\" = \"Proxy-Authorization\",\n  Range = \"Range\",\n  Referer = \"Referer\",\n  TE = \"TE\",\n  Upgrade = \"Upgrade\",\n  \"User-Agent\" = \"User-Agent\",\n  Via = \"Via\",\n  Warning = \"Warning\",\n}\n\nexport enum DataType {\n  FORM = \"form\",\n  JSON = \"json\",\n  GQL = \"graphQL\",\n}\n\nexport enum OutputType {\n  CURL = \"curl\",\n}\n\nexport enum InputTypes {\n  BUTTON = \"button\",\n  CHECKBOX = \"checkbox\",\n  COLOR = \"color\",\n  DATE = \"date\",\n  DATETIME_LOCAL = \"datetime-local\",\n  EMAIL = \"email\",\n  FILE = \"file\",\n  HIDDEN = \"hidden\",\n  IMAGE = \"image\",\n  MONTH = \"month\",\n  NUMBER = \"number\",\n  PASSWORD = \"password\",\n  RADIO = \"radio\",\n  RANGE = \"range\",\n  RESET = \"reset\",\n  SEARCH = \"search\",\n  SUBMIT = \"submit\",\n  TEL = \"tel\",\n  TEXT = \"text\",\n  TIME = \"time\",\n  URL = \"url\",\n  WEEK = \"week\",\n}\n\nexport enum ColumnCount {\n  ONE = 'one column',\n  TWO = 'two columns',\n  THREE = 'three columns',\n  FOUR = 'four columns',\n  FIVE = 'five columns',\n  SIX = 'six columns',\n  SEVEN = 'seven columns',\n  EIGHT = 'eight columns',\n  NINE = 'nine columns',\n  TEN =  'ten columns',\n  ELEVEN = 'eleven columns',\n  TWELVE = 'twelve columns',\n}\n\nexport enum JsonValueTypes {\n  NUMBER = 'number',\n  DATE = 'date',\n  BOOLEAN = 'boolean',\n  URL = 'url',\n  STRING = 'string',\n}\n","import React from 'react';\n\ninterface selectProps {\n  className?: string;\n  isDisabled?: boolean;\n  label?: string;\n  name?: string;\n  onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n  selected?: string | string[] | null;\n  style?: {[key: string]: string};\n  values: string[];\n  isMultiple?: boolean;\n  size?: number;\n}\n\nconst Select: React.FunctionComponent<selectProps> = (props) => {\n  const selected = props.selected || '';\n  return (\n    <>\n    { props.label && (<label>{props.label}</label>) }\n    <select\n      className={props.className || ''}\n      name={props.name || ''}\n      size={props.size || 0}\n      style={props.style || {}}\n      disabled={props.isDisabled || false}\n      multiple={props.isMultiple || false}\n      onChange={props.onChange || null}\n      value={selected}>\n      <option value=\"\" disabled>Please Select</option>\n      {props.values.map((value: string, i:number) => (\n        <option\n          value={value}\n          key={`${value}_${i}`}>\n          {value}\n        </option>\n      ))}\n    </select>\n    </>\n  );\n}\n\nexport default Select;\n","import React from 'react';\n\nimport Select from '../../shared/Select';\n\nimport './css/Method.css'\n\nimport {\n  ColumnCount,\n  HTTPMethods,\n} from '../../../enums/';\n\ninterface methodProps {\n  onUpdate: (value: HTTPMethods) => void;\n  selected: HTTPMethods;\n  width: ColumnCount;\n};\n\nconst Method: React.FunctionComponent<methodProps> = (props) => {\n\n  const updateSelected = (\n    e: React.ChangeEvent<HTMLSelectElement>,\n  ): void => {\n    const value: HTTPMethods = e.target.value as HTTPMethods;\n    props.onUpdate(value);\n  }\n\n  return (\n    <div className={props.width}>\n      <Select\n        className=\"u-full-width Method\"\n        label=\"HTTP Method\"\n        onChange={updateSelected}\n        selected={props.selected}\n        values={Object.values(HTTPMethods)} />\n    </div>\n  );\n}\n\nexport default Method;\n","import React from 'react';\nimport {parse, print, OperationDefinitionNode} from 'graphql';\n\nimport Button from '../../shared/Button';\nimport Copy from '../../shared/Copy';\nimport Saving from '../../shared/Saving';\nimport TextArea from '../../shared/TextArea';\nimport Type from './type/Type';\n\nimport './css/GraphQL.css';\n\nimport {gqlPayloadType} from '../Data';\n\nexport enum GraphQLType {\n  QUERY = 'query',\n  MUTATION = 'mutation',\n}\n\ninterface ParsedGQL {\n  gql: string;\n  type: GraphQLType;\n}\n\ninterface GraphQLProps {\n  data: gqlPayloadType;\n  onUpdateData: (value: gqlPayloadType) => void;\n}\n\ninterface GraphQLState {\n  draft: string;\n  isSaved: boolean;\n  type: GraphQLType;\n}\n\nexport default class GraphQL extends React.PureComponent<GraphQLProps, GraphQLState> {\n\n  constructor(props: GraphQLProps) {\n    super(props);\n    const gql = GraphQL.getDocAndTypeFromGQLString(props.data.query);\n    this.state = {\n      draft: gql.gql,\n      isSaved: true,\n      type: gql.type,\n    }\n  }\n\n  static getDocAndTypeFromGQLString(\n    gql: string\n  ): ParsedGQL {\n    const doc = parse(gql);\n    const def: OperationDefinitionNode = doc.definitions[0] as OperationDefinitionNode;\n    const type = def.operation as GraphQLType;\n    return {\n      gql: print(doc),\n      type\n    };\n  }\n\n  static getDerivedStateFromProps(newProps: GraphQLProps, state: GraphQLState): GraphQLState {\n    if (newProps.data.query !== state.draft && !state.isSaved) {\n      return state;\n    }\n    try {\n      const gql = GraphQL.getDocAndTypeFromGQLString(newProps.data.query);\n      return {\n        draft: newProps.data.query,\n        isSaved: true,\n        type: gql.type,\n      };\n\n    } catch (e) {\n      return state;\n    }\n  }\n\n  updateGraphQL = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const draft = e.target.value;\n    try {\n      const gql = GraphQL.getDocAndTypeFromGQLString(draft);\n      if (gql.gql !== this.state.draft) {\n        this.props.onUpdateData(\n          // replace any existing operation with an empty string\n          {query: draft}\n        );\n        this.setState({isSaved: true});\n      } else {\n        this.setState({\n          draft,\n          isSaved:false,\n        });\n      }\n    } catch (_) {\n      this.setState({\n        draft,\n        isSaved: false,\n      });\n    }\n\n\n  }\n\n  updateType = (type: GraphQLType): void => {\n    this.props.onUpdateData(\n      {query: type +  ' ' + this.state.draft.replace(this.state.type, '')},\n    );\n  }\n\n  pretty = () => {\n    this.props.onUpdateData(\n      {query: this.state.type + ' ' + GraphQL.PrettyMe(this.state.draft).replace(this.state.type, '')},\n    );\n  }\n\n  static PrettyMe(gql: string): string {\n    try {\n      return print(parse(gql));\n    } catch (_) {\n      return gql;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"GraphQL\">\n        <div className=\"row\">\n          <div className=\"six columns\">\n            <Saving isSaved={this.state.isSaved} label=\"GraphQL\" />\n          </div>\n          <div className=\"two columns\">\n            <Type\n              className=\"u-full-width\"\n              selected={this.state.type}\n              onUpdate={this.updateType} />\n          </div>\n          <div className=\"two columns\">\n            <Button\n              className=\"u-full-width\"\n              label=\"Pretty\"\n              onClick={this.pretty}\n              isDisabled={!this.state.isSaved}\n              isPrimary={false} />\n          </div>\n          <div className=\"two columns\">\n            <Copy\n              className=\"u-pull-right\"\n              content={GraphQL.PrettyMe(this.state.draft)}\n              label={`Copy GQL data` } />\n          </div>\n        </div>\n        <div className=\"row\">\n          <TextArea\n            isFullWidth={true}\n            onChangeDirect={this.updateGraphQL}\n            ref=\"input_gql\"\n            value={this.state.draft} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport Select from '../../../shared/Select';\n\nimport './css/Types.css';\n\nimport {HTTPHeaders} from '../../../../enums';\n\ninterface TypeProps {\n  index: number;\n  isFullWidth: boolean;\n  values: (HTTPHeaders | string)[];\n  selected: HTTPHeaders | string;\n  onUpdate: (value: HTTPHeaders, index: number) => void;\n}\n\nconst Types: React.FunctionComponent<TypeProps> = (props) => {\n  const updateSelected = (\n    e: React.ChangeEvent<HTMLSelectElement>,\n  ): void => {\n    const value: HTTPHeaders = e.target.value as HTTPHeaders;\n    props.onUpdate(value, props.index);\n  }\n\n  return (\n    <Select\n      className={(props.isFullWidth ? 'u-full-width' : '') + ' Types'}\n      onChange={updateSelected}\n      selected={props.selected}\n      values={props.values} />\n  );\n}\n\nexport default Types;\n","// Import React\nimport React from 'react';\n\n// Import Enums\nimport {InputTypes} from '../../enums';\n\n// Define Interfaces\ninterface InputProps {\n  className?: string;\n  isChecked?: boolean\n  isDisabled?: boolean;\n  label?: string;\n  name?: string;\n  id?: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  placeholder?: string;\n  type?: InputTypes;\n  value?: string;\n}\n\n// Input Component\nconst Input: React.FunctionComponent<InputProps> = (props) => (\n  <>\n  { props.label && (<label>{props.label}</label>) }\n  <input\n    type={props.type || InputTypes.TEXT}\n    checked={props.isChecked}\n    className={props.className || ''}\n    name={props.name || ''}\n    id={props.id || ''}\n    value={props.value || ''}\n    disabled={props.isDisabled}\n    onChange={props.onChange}\n     />\n  </>\n);\n\nexport default Input;\n","import React from 'react';\n\nimport Input from '../../../shared/Input'\n\nimport './css/Value.css'\n\ninterface ValueProps {\n  index: number;\n  isFullWidth: boolean;\n  value: string;\n  onUpdate: (value: string, index: number) => void;\n}\n\nconst Value: React.FunctionComponent<ValueProps> = (props) => {\n  const updateValue = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    props.onUpdate(e.target.value, props.index);\n  }\n\n  return (\n    <Input\n      className={(props.isFullWidth ? 'u-full-width' : '') + ' Value'}\n      onChange={updateValue}\n      value={props.value} />\n  );\n}\n\nexport default Value;\n","import React from 'react';\n\nimport Types from './type/Types';\nimport Value from './value/Value';\n\nimport './css/Headers.css';\n\nimport {\n  ColumnCount,\n  HTTPHeaders,\n} from '../../../enums';\n\nexport interface Header {\n  type: HTTPHeaders | string;\n  value: string;\n};\n\ninterface HeadersProps {\n  onUpdate: (value: Header | null, index: number) => void;\n  selected: Header[];\n  width: ColumnCount,\n}\n\n\nconst Headers: React.FunctionComponent<HeadersProps> = (props) => {\n\n  const updateType = (type: HTTPHeaders, index: number): void => {\n    const header = props.selected[index];\n    header.type = type;\n    props.onUpdate(header, index);\n  }\n\n  const updateValue = (value: string, index: number): void => {\n    const header = props.selected[index];\n    header.value = value;\n    props.onUpdate(header, index);\n  }\n\n  const addHeader = (e: React.MouseEvent<HTMLElement>): void => {\n    e.preventDefault();\n    // create a pending header, add this to the end of the index\n    props.onUpdate(\n      {\n        type: '',\n        value: '',\n      },\n      props.selected.length,\n    );\n  }\n\n  const removeHeader = (e: React.MouseEvent<HTMLElement>): void => {\n    e.preventDefault();\n    const index = e.currentTarget.id.split('_').pop();\n\n    if (index === undefined) {\n      // oh no...\n      return;\n    }\n    props.onUpdate(null, parseInt(index));\n  }\n\n  // Don't allow duplicate headers. \n  const selected = props.selected.map(header => header.type);\n  const values = Object.values(HTTPHeaders).filter(header => !selected.includes(header));\n\n  return (\n\n    <div className={props.width + ' Headers'}>\n      <div className=\"row\">\n        <div className=\"twelve rows\">\n          <label> HTTP Headers </label>\n        </div>\n      </div>\n\n        {\n          props\n            .selected\n            .map(\n              (header: Header, index: number) => (\n\n                <div className=\"row\" key={`${header.type}_${index}`}>\n                {\n                  // TODO: selected and values aren't behaving below\n                }\n                  <div className=\"two columns\">\n                    <button\n                      className='u-full-width'\n                      onClick={removeHeader}\n                      id={`remove_${index}`}>\n                      Remove\n                    </button>\n                  </div>\n                  <div className=\"four columns\">\n                    <Types\n                      index={index}\n                      isFullWidth={true}\n                      values={[...values, header.type]}\n                      selected={header.type}\n                      onUpdate={updateType} />\n                  </div>\n                  <div className=\"four columns\">\n                    <Value\n                      index={index}\n                      isFullWidth={true}\n                      value={header.value || ''}\n                      onUpdate={updateValue} />\n                  </div>\n                  <div className=\"two columns\">\n                    <button\n                      className='u-full-width'\n                      onClick={addHeader}>\n                      Add\n                    </button>\n                  </div>\n                </div>\n            )\n          )\n        }\n        {\n          props.selected.length === 0 && (\n            <div className=\"row\">\n              <button\n                className='u-full-width'\n                onClick={addHeader}>\n                Click to add header\n              </button>\n            </div>\n          )\n        }\n    </div>\n  );\n}\n\nexport default Headers;\n","import React from 'react';\n\nimport Input from '../../../shared/Input'\n\nimport './css/Domain.css';\n\nimport {InputTypes} from '../../../../enums';\n\ninterface DomainProps {\n  isFullWidth: boolean;\n  value: string;\n  onUpdate: (value: string) => void;\n}\n\nconst Domain: React.FunctionComponent<DomainProps> = (props) => {\n  const updateValue = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    props.onUpdate(e.target.value);\n  }\n\n  return (\n    <Input\n      className={(props.isFullWidth ? 'u-full-width' : '') + ' Domain'}\n      onChange={updateValue}\n      type={InputTypes.URL}\n      value={props.value} />\n  );\n}\n\nexport default Domain;\n","import React from 'react';\n\nimport Input from '../../../shared/Input'\n\nimport './css/Endpoint.css';\n\ninterface EndpointProps {\n  isFullWidth: boolean;\n  value: string;\n  onUpdate: (value: string) => void;\n}\n\nconst Endpoint: React.FunctionComponent<EndpointProps> = (props) => {\n  const updateValue = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    ;\n    props.onUpdate(e.target.value);\n  }\n\n  ;\n  return (\n    <Input\n      className={(props.isFullWidth ? 'u-full-width' : '') + ' Endpoint'}\n      onChange={updateValue}\n      value={props.value} />\n  );\n}\n\nexport default Endpoint;\n","import React from 'react';\n\nimport Domain from './domain/Domain';\nimport Endpoint from './endpoint/Endpoint';\n\nimport './css/Destination.css';\n\nimport {ColumnCount} from '../../../enums';\n\ntype DomainOrEndpoint = 'domain' | 'endpoint';\n\ninterface DestinationProps {\n  onUpdate: (domain: string, endpoint: string) => void;\n  domain: string;\n  endpoint: string;\n  width: ColumnCount;\n}\n\nconst Destination: React.FunctionComponent<DestinationProps> = (props) => {\n\n  const onUpdate = (value: string, type: DomainOrEndpoint): void => {\n    props.onUpdate(\n      (type === 'domain') ? value : props.domain,\n      (type === 'endpoint') ? value : props.endpoint,\n    );\n  }\n\n  const onUpdateDomain = (domain: string): void => {\n    if (domain.charAt(domain.length-1) === '/') {\n      domain = domain.substr(0, domain.length-1);\n    }\n    onUpdate(domain, 'domain');\n  }\n\n  const onUpdateEndpoint = (endpoint: string): void => {\n    if (endpoint.charAt(0) !== '/') {\n      endpoint = '/' + endpoint;\n    }\n    onUpdate(endpoint, 'endpoint');\n  }\n\n  return (\n    <div className={props.width + ' Destination'}>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n        <label> Destination </label>\n        </div>\n      </div>\n      <div className=\"row\">\n          <div className=\"six columns\">\n            <Domain\n              isFullWidth={true}\n              onUpdate={onUpdateDomain}\n              value={props.domain} />\n          </div>\n          <div className=\"six columns\">\n            <Endpoint\n              isFullWidth={true}\n              onUpdate={onUpdateEndpoint}\n              value={props.endpoint} />\n          </div>\n        </div>\n      </div>\n  );\n}\n\nexport default Destination;\n","import React from 'react';\n\nimport Method from './method/Method';\nimport Headers, { Header } from './headers/Headers';\nimport Destination from './destination/Destination';\n\nimport {\n  ColumnCount,\n  HTTPMethods,\n} from '../../enums';\n\nexport interface ConfigData {\n  method: HTTPMethods;\n  headers: Header[];\n  domain: string;\n  endpoint: string;\n}\n\ninterface ConfigProps {\n  data: ConfigData;\n  updateConfig: (data: ConfigData) => void;\n}\n\nconst Config: React.FunctionComponent<ConfigProps> = (props) => {\n  const updateMethod = (value: HTTPMethods) => {\n\n    const data = props.data;\n    data.method = value;\n    props.updateConfig(data);\n  }\n\n  const updateHeaders = (value: Header | null, index: number): void => {\n\n    const data = props.data;\n    if (!data.headers[index] && value) {\n      data.headers.push(value);\n    } else {\n      if (!value) {\n        delete data.headers[index];\n        ;\n        data.headers = data.headers.filter(header => header);\n        ;\n      } else {\n        data.headers[index] = value;\n      }\n    }\n    props.updateConfig(data);\n  }\n\n  const updateDestination = (domain: string, endpoint: string) => {\n\n    const data = props.data;\n    data.domain = domain;\n    data.endpoint = endpoint;\n    props.updateConfig(data);\n  }\n\n  return (\n    <>\n      <div className=\"row\">\n        <Headers\n          onUpdate={updateHeaders}\n          selected={props.data.headers}\n          width={ColumnCount.TWELVE} />\n      </div>\n      <div className=\"row\">\n      <Method\n        selected={props.data.method}\n        width={ColumnCount.TWO}\n        onUpdate={updateMethod} />\n      <Destination\n        onUpdate={updateDestination}\n        domain={props.data.domain}\n        endpoint={props.data.endpoint}\n        width={ColumnCount.TEN} />\n      </div>\n    </>\n  );\n}\nexport default Config;\n","import React from 'react';\n\ninterface ButtonProps {\n  className?: string;\n  isDisabled?: boolean;\n  isPrimary: boolean;\n  label: string;\n  onClick: () => void;\n}\n\nconst Button: React.FunctionComponent<ButtonProps> = (props) => {\n  const clickHandler = (e: React.MouseEvent) => {\n    e.preventDefault();\n    props.onClick();\n  }\n\n  return (\n    <input\n      type=\"button\"\n      className={(props.isPrimary ? 'button-primary ' : ' ') + props.className || ' '}\n      disabled={props.isDisabled}\n      onClick={clickHandler}\n      value={props.label} />\n  );\n}\n\nexport default Button;\n","import React from 'react';\n\nimport Button from './Button';\n\ninterface CopyProps {\n  className?: string;\n  label?: string;\n  content: string;\n}\n\nconst Copy: React.FunctionComponent<CopyProps> = (props) => {\n\n  const copy = async () => {\n    await navigator.clipboard.writeText(props.content);\n  }\n\n  return (\n    <Button\n      className={props.className || ''}\n      isPrimary={false}\n      label= {props.label || \"Copy\"}\n      onClick={copy} />\n  )\n}\n\nexport default Copy;\n","import React from 'react';\nimport { CSSTransitionGroup } from 'react-transition-group';\n\nimport './css/Saving.css';\n\ninterface SavingProps {\n  className?: string;\n  label?: string;\n  isSaved: boolean;\n}\n\nconst Saving: React.FunctionComponent<SavingProps> = (props) => {\n\n  return (\n    <CSSTransitionGroup\n      transitionName=\"save-notice\"\n      transitionLeave={false}\n      transitionEnter={true}\n      transitionEnterTimeout={500}>\n      <div\n        className={\n          ((props.isSaved) ? 'Saved' : 'NotSaved')\n          +  \" Notice \"\n          + (props.className || '')\n        }\n        key={\"notice-\" + props.isSaved}>\n        {props.isSaved ? `Saved ${props.label}`  : `${props.label} Not Saved`}\n      </div>\n    </CSSTransitionGroup>\n  )\n}\n\nexport default Saving;\n","import React from 'react';\n\ninterface TextAreaProps {\n  className?: string\n  isFullWidth: boolean\n  onChangeDirect?: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  onUpdate?: (value: string) => void;\n  style?: {\n    [key: string]: string,\n  };\n  value: string;\n}\n\ninterface TextAreaState {}\n\nexport default class TextArea extends React.Component<TextAreaProps, TextAreaState> {\n\n  constructor(props: TextAreaProps) {\n    super(props);\n    this.state = {};\n  }\n\n  onUpdate = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    if (this.props.onChangeDirect) {\n      this.props.onChangeDirect(e);\n    } else if (this.props.onUpdate) {\n      this.props.onUpdate(e.target.value);\n    }\n  }\n\n  render () {\n    return (\n      <textarea\n        className={((this.props.isFullWidth) ? 'u-full-width ' : ' ') + this.props.className || '' }\n        onChange={this.onUpdate}\n        style={this.props.style || {}}\n        value={this.props.value}>\n      </textarea>\n    );\n  }\n}\n","import React from 'react';\n\nimport Select from '../../../shared/Select';\n\nimport './css/Type.css';\n\nimport {GraphQLType} from '../GraphQL';\n\ninterface TypeProps {\n  className?: string;\n  selected: GraphQLType;\n  onUpdate: (type: GraphQLType) => void;\n}\n\nconst Type: React.FunctionComponent<TypeProps> = (props) => {\n  const updateSelected = (\n    e: React.ChangeEvent<HTMLSelectElement>,\n  ): void => {\n    const value: GraphQLType = e.target.value as GraphQLType;\n    props.onUpdate(value);\n  }\n\n  return (\n    <Select\n      className={(props.className || '') + \" Type\"}\n      onChange={updateSelected}\n      selected={props.selected}\n      values={Object.values(GraphQLType)} />\n  );\n}\n\nexport default Type\n","/**\n * @file Curl component\n * @author Mattamorphic\n */\nimport React from 'react';\n\n// Imported components\nimport Button from '../../shared/Button';\nimport Copy from '../../shared/Copy';\nimport Saving from '../../shared/Saving';\nimport TextArea from '../../shared/TextArea';\n\n// CSS imports\nimport './css/Json.css';\n\n// Type imports\nimport {payloadType} from '../Data';\n\ninterface JsonProps {\n  data: payloadType;\n  onUpdateData: (value: payloadType) => void;\n}\n\ninterface JsonState {\n  draft: string;\n  hasDraft: boolean;\n}\n\nexport default class Json extends React.PureComponent<JsonProps, JsonState> {\n\n  constructor(props: JsonProps) {\n    super(props);\n    this.state = {\n      draft: JSON.stringify(props.data, null, 2),\n      hasDraft: false,\n    };\n  }\n\n  /**\n   * @function We have to update the state based on the props, this needs removing\n   *\n   * @param {JsonProps} newProps The new received props\n   * @param {JsonState} state    The current state\n   *\n   * @return {JsonState}\n   */\n  static getDerivedStateFromProps(newProps: JsonProps, state: JsonState): JsonState {\n    let draft = '';\n    let hasDraft = state.hasDraft;\n    try {\n      // if we can parse the draft it must be valid\n      JSON.parse(state.draft);\n      draft = hasDraft ? state.draft : JSON.stringify(newProps.data);\n      hasDraft = false;\n    } catch (_) {\n      draft = state.draft;\n      hasDraft = true;\n    }\n    return {\n      hasDraft,\n      draft,\n    };\n  }\n\n  /**\n   * @function Update the data from the json string\n   *\n   * @param {string} value The possible json string\n   */\n  updateJson = (value: string) => {\n    this.setState({\n      draft: value,\n      hasDraft: true\n    });\n    try {\n      const object = JSON.parse(value);\n      this.props.onUpdateData(object);\n    } catch (_) {}\n  }\n\n  /**\n   * @function Pretty print the json in the state\n   */\n  pretty = () => {\n    try {\n      this.setState({\n        draft: JSON.stringify(JSON.parse(this.state.draft), null, 2),\n        hasDraft: true,\n      });\n    } catch (_) {\n      return;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Json\">\n        <div className=\"row\">\n          <div className=\"six columns\">\n            <Saving isSaved={!this.state.hasDraft} label=\"Json\" />\n          </div>\n          <div className=\"four columns\">\n            <Button className=\"u-pull-right\" label=\"Pretty\" onClick={this.pretty} isPrimary={false} />\n          </div>\n          <div className=\"two columns\">\n            <Copy\n              className=\"u-pull-right\"\n              content={this.state.draft}\n              label={`Copy JSON data` } />\n          </div>\n        </div>\n        <div className=\"row\">\n          <TextArea\n            isFullWidth={true}\n            onUpdate={this.updateJson}\n            value={this.state.draft} />\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react';\n\nimport Select from '../../shared/Select';\n\nimport './css/Selector.css';\n\nimport {DataType} from '../../../enums';\n\ninterface SelectorProps {\n  className?: string;\n  selected: DataType;\n  onUpdate: (value: DataType) => void;\n}\n\nconst Selector: React.FunctionComponent<SelectorProps> = (props) => {\n  const updateSelected = (\n    e: React.ChangeEvent<HTMLSelectElement>,\n  ): void => {\n    const value: DataType = e.target.value as DataType;\n    props.onUpdate(value);\n  }\n\n  return (\n    <Select\n      className={(props.className || '') + \" Selector\"}\n      onChange={updateSelected}\n      selected={props.selected}\n      values={Object.values(DataType)} />\n  );\n}\n\nexport default Selector;\n","import React from 'react';\n\nimport GraphQL from './graphql/GraphQL';\nimport Json from './json/Json';\nimport Selector from './selector/Selector';\n\nimport './css/Data.css';\n\nimport {\n  DataType,\n} from '../../enums';\n\nexport type payloadType = {[key: string]: any}\nexport type gqlPayloadType = {query: string}\n\nexport interface DataData {\n  type: DataType;\n  data: {\n    [DataType.JSON]: payloadType;\n    [DataType.GQL]: gqlPayloadType;\n    [DataType.FORM]: null;\n  }\n}\n\ninterface DataProps {\n  data: DataData;\n  updateData: (data: DataData) => void;\n}\n\nconst Data: React.FunctionComponent<DataProps> = (props) => {\n  const updateType = (value: DataType) => {\n    const data = props.data;\n    data.type = value;\n    props.updateData(data);\n  }\n\n  const updateJsonData = (value: payloadType) => {\n    const data = props.data;\n    data.data.json = value;\n    props.updateData(data);\n  }\n\n  const updateGraphQLData = (value: gqlPayloadType) => {\n    const data = props.data;\n    data.data.graphQL = value\n    props.updateData(data);\n  }\n\n  return (\n    <div className=\"Data\">\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n          <label> Data </label>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n          <Selector\n            className=\"u-full-width\"\n            selected={props.data.type}\n            onUpdate={updateType} />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n        {\n          props.data.type === DataType.JSON\n            && (<Json data={props.data.data.json} onUpdateData={updateJsonData} />)\n        }\n        {\n          props.data.type === DataType.GQL\n            && (<GraphQL\n              data={props.data.data.graphQL}\n              onUpdateData={updateGraphQLData} />)\n        }\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default Data;\n","import React from 'react';\n\nimport './css/Heading.css'\n\ninterface HeadingProps {\n  imageSrc: string;\n}\n\nconst Heading: React.FunctionComponent<HeadingProps> = (props) => {\n  return (\n    <div className=\"Heading\">\n      <img src={props.imageSrc} alt=\"curlify logo\" />\n\n    </div>\n  );\n}\n\nexport default Heading;\n","import {parse} from 'graphql';\n\nimport {HTTPHeaders, HTTPMethods} from '../enums';\n\nimport {Header} from '../components/config/headers/Headers';\n\nexport const methodHasPayload = (method: HTTPMethods) => (\n  ![HTTPMethods.GET, HTTPMethods.HEAD]\n    .includes(method)\n)\n\nexport const PROXY = \"https://curlify-proxy.herokuapp.com/\";\n\nexport const regEx = {\n  url: /^((?:http(?:s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+))+([\\w\\-\\._~:\\/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+)$/gim,\n  curlHeader: /(?:-H \")([\\w\\d]{1,})(?:\\s{0,}:\\s{0,})(.+?)(?=\")/gim,\n  curlMethod: /(?:-X\\s{0,})(\\w{3,6})/gim,\n  // Todo: convert to /gms https://github.com/babel/babel/pull/10347\n  curlData: /(?:-d\\s{0,}'|\")({.*})(?=['|\"])/gim,\n  newLine: /[\\r|\\n]/gm,\n  newLineAndTab: /[\\n|\\r|\\t]/gm,\n  multipleSpaces: / +/gm,\n};\n\n\nexport const isValidMethod = (string: string): boolean => (\n  Object\n  .values(HTTPMethods)\n  .includes(string)\n)\n\nexport const isValidURL = (domain: string, endpoint: string): boolean => {\n  const url = domain\n    + ((domain.charAt(domain.length-1) !== '/' && endpoint.charAt(0) !== '/')\n      ? '/'\n      : '')\n    + endpoint;\n\n  const possUrl = (url).match(regEx.url);\n  return (!possUrl || possUrl[0] !== url) ? false : true;\n}\n\nexport const isValidHeaders = (headers: Header[]): boolean => {\n  const types = Object.values(HTTPHeaders)\n  return headers.reduce(\n    (_: boolean, curr: Header) => {\n      return types.includes(curr.type); // TODO: validate the value\n    },\n    true,\n  );\n}\n\nexport const isValidJsonString = (json: string) => {\n  try {\n    JSON.parse(json);\n    return true;\n  } catch (_) {\n    return false;\n  }\n}\n\nexport const isValidGraphQLString = (gql: string) => {\n  try {\n    parse(gql);\n    return true;\n  } catch (_) {\n    return false;\n  }\n}\n","/**\n * @file Curl component\n * @author Mattamorphic\n */\nimport React from 'react';\n\n// Imported components\nimport Copy from '../../shared/Copy';\nimport Saving from '../../shared/Saving';\nimport TextArea from '../../shared/TextArea';\n\n// Resuable helper functions / objects\nimport * as utils from '../../../utils';\n\n// Imported types / interfaces\nimport {ConfigData} from '../../config/Config';\nimport {DataData, payloadType} from '../../data/Data';\nimport {Header} from '../../config/headers/Headers';\n\n// CSS imports\nimport './css/Curl.css';\n\n// Enum imports\nimport {\n  DataType,\n  HTTPHeaders,\n  HTTPMethods,\n} from '../../../enums';\n\ninterface DomainAndEndpoint {\n  domain: string | null;\n  endpoint: string | null;\n}\n\ninterface SerializedCurl {\n  config: ConfigData;\n  data: DataData;\n  hasNewData: boolean;\n  hasNewConfig: boolean;\n}\n\ninterface CurlProps {\n  config: ConfigData;\n  data: DataData;\n  updateConfig: (data: ConfigData) => void;\n  updateData: (data: DataData) => void;\n}\n\ninterface CurlState {\n  draft: string;\n  hasDraft: boolean;\n}\n\nexport default class Curl extends React.Component<CurlProps, CurlState>  {\n\n  constructor(props: CurlProps) {\n    super(props);\n    this.state = {\n      draft: Curl.getValue(props.config, props.data),\n      hasDraft: false,\n    };\n  }\n\n\n  static getDerivedStateFromProps(newProps: CurlProps, state: CurlState): CurlState {\n    const draft = (state.hasDraft)\n      ? state.draft\n      : Curl.getValue(newProps.config, newProps.data);\n\n    return {\n      hasDraft: state.hasDraft,\n      draft,\n    };\n  }\n\n  /**\n   * @function Get the headers from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {Header[] | null}\n   */\n  getHeaders(value: string): Header[] | null {\n    const regex = utils.regEx.curlHeader;\n    const headers = [];\n    let match = null;\n    while (match = regex.exec(value)) {\n      headers.push({\n        type: match[1] as HTTPHeaders,\n        value: match[2] as string,\n      });\n    }\n    if (headers.length === 0) {\n      return null;\n    }\n    return headers;\n  }\n\n  /**\n   * @function Get the method from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {HTTPMethods | null}\n   */\n  getMethod(value: string): HTTPMethods | null {\n    const regex = utils.regEx.curlMethod;\n    if (!value.match(regex)) {\n      return null;\n    }\n    const match = regex.exec(value);\n    if (!match) {\n      return null;\n    }\n    return match[1] as HTTPMethods;\n  }\n\n  /**\n   * @function Get the data from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {payloadType | null}\n   */\n  getData(value: string): payloadType | null {\n    const regex = utils.regEx.curlData;\n    if (!value.match(regex)) {\n      return null;\n    }\n    const match = regex.exec(value);\n    if (!match) {\n      return null;\n    }\n    try {\n      return JSON.parse(match[1]);\n    } catch (_) {\n      return null;\n    }\n  }\n\n  /**\n   * @function Get the domain and endpoint from a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {DomainAndEndpoint | null}\n   */\n  getDomainAndEndpoint(value: string): DomainAndEndpoint | null {\n    const regex = utils.regEx.url;\n    if (!value.match(regex)) {\n      return null;\n    }\n    const match = regex.exec(value);\n    if (!match) {\n      return null;\n    }\n    return {\n      domain: match[1] || null,\n      endpoint: match[2] || null,\n    };\n  }\n\n  /**\n   * @function Serialize a curl string\n   *\n   * @param {string} value A Curl string\n   *\n   * @returns {SerializedCurl}\n   */\n  serializerCurl = (value: string): SerializedCurl => {\n    // Get the current values\n    const config = this.props.config;\n    const data = this.props.data;\n\n    let hasNewConfig = false;\n    let hasNewData = false;\n\n    // Only update if we have a match :)\n\n     // decide which method to use\n    const method = this.getMethod(value);\n\n    // decide which headers to use\n    const headers = this.getHeaders(value);\n\n    // decide which data to use\n    const newData = this.getData(value);\n\n    // decide which domain and endpoint to use\n    const domainAndEndpoint = this.getDomainAndEndpoint(value);\n\n    if (\n      method\n      && method !== config.method\n      && Object.values(HTTPMethods).includes(method)\n    ) {\n      hasNewConfig = true;\n      config.method = method;\n    }\n\n    // Todo - this needs to actually check the header\n    if (headers) {\n      hasNewConfig = true;\n      config.headers = headers;\n    }\n    if (newData && JSON.stringify(newData) !== JSON.stringify(data.data[data.type])) {\n      hasNewData = true;\n      switch (data.type) {\n        case DataType.GQL:\n          data.data.graphQL.query = newData.query;\n          break;\n        case DataType.JSON:\n          data.data.json = newData;\n          break;\n        case DataType.FORM:\n          break;\n      }\n    }\n    if (domainAndEndpoint) {\n      if (domainAndEndpoint.domain && domainAndEndpoint.domain !== config.domain) {\n        hasNewConfig = true;\n        config.domain = domainAndEndpoint.domain;\n      }\n      if (domainAndEndpoint.endpoint && domainAndEndpoint.endpoint !== config.endpoint) {\n        hasNewConfig = true;\n        config.endpoint = domainAndEndpoint.endpoint;\n      }\n    }\n\n    return {\n      config,\n      data,\n      hasNewConfig,\n      hasNewData,\n    };\n  }\n\n  /**\n   * @function Update the data from the curl string\n   *\n   * @param {string} value The curl string\n   */\n  updateCurl = (value: string): void => {\n    const curl = this.serializerCurl(value);\n\n    if (curl.hasNewData || curl.hasNewConfig) {\n      this.setState({draft: value, hasDraft: false}, () => {\n        curl.hasNewData && this.props.updateData(curl.data);\n        curl.hasNewConfig && this.props.updateConfig(curl.config);\n      });\n    }\n    if (!curl.hasNewData && !curl.hasNewConfig) {\n      this.setState({draft: value, hasDraft: true});\n    }\n  }\n\n  /**\n   * @function Pass the config and data into a curl string\n   *\n   * @params {ConfigData} config The Configuration data for the curl request\n   * @params {DataData}   data   The data for the curl request\n   */\n  static getValue(\n    config: ConfigData,\n    data: DataData,\n  ): string {\n    let payload = {};\n    switch (data.type) {\n      case DataType.JSON:\n        payload = data.data.json;\n        break;\n      case DataType.GQL:\n        payload = data.data.graphQL;\n        break;\n      case DataType.FORM:\n        break;\n    }\n    return \"curl -X \" + config.method + \" \\\\ \\n\"\n       + (config.headers.map(header => \"-H \\\"\" + header.type + \": \" + header.value + \"\\\" \\\\ \\n\").join(''))\n       + ((payload && Object.keys(payload).length > 0 && utils.methodHasPayload(config.method))\n         ? \"-d '\" + Curl.parsePayloadString(JSON.stringify(payload)) + \"' \\\\ \\n\" : '')\n       + config.domain + config.endpoint;\n  }\n\n  /**\n   * @function Parse a string remove new line / tab and remove multiple spaces\n   *\n   * @param {string} value\n   */\n  static parsePayloadString(value: string): string {\n    return value.replace(utils.regEx.newLineAndTab, '').replace(utils.regEx.multipleSpaces, ' ');\n  }\n\n  render () {\n    return (\n      <div className=\"Curl\">\n        <div className=\"row\">\n          <TextArea\n            isFullWidth={true}\n            onUpdate={this.updateCurl}\n            style={{\n              height: \"200px\",\n            }}\n            value={this.state.draft} />\n        </div>\n        <div className=\"row\">\n          <div className=\"ten columns\">\n            <Saving isSaved={!this.state.hasDraft} label=\"Curl\" />\n          </div>\n          <div className=\"two columns\">\n            <Copy\n              className=\"u-pull-right\"\n              content={this.state.draft}\n              label={`Copy Curl data` } />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport {ConfigData} from '../config/Config';\nimport Curl from './curl/Curl';\nimport {DataData} from '../data/Data';\n\nimport './css/Output.css';\n\nimport {OutputType} from '../../enums';\n\ninterface OutputProps {\n  config: ConfigData;\n  data: DataData;\n  output: OutputType;\n  updateConfig: (data: ConfigData) => void;\n  updateData: (data: DataData) => void;\n}\n\nconst Output: React.FunctionComponent<OutputProps> = (props) => {\n  return (\n    <div className=\"Output\">\n      {\n        (props.output === OutputType.CURL) && (\n          <Curl\n            config={props.config}\n            data={props.data}\n            updateConfig={props.updateConfig}\n            updateData={props.updateData} />\n        )\n      }\n    </div>\n  );\n}\n\nexport default Output;\n","/**\n * @file Checkbox component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport Input from './Input';\nimport {InputTypes} from '../../enums';\n\ninterface CheckboxProps {\n  className?: string;\n  isDisabled?: boolean;\n  label?: string;\n  isCheckedLabel?: string;\n  isNotCheckedLabel?: string;\n  name?: string;\n  id?: string;\n  isChecked: boolean;\n  onChange: (value: boolean) => void;\n  value?: string;\n}\n\nconst Checkbox: React.FunctionComponent<CheckboxProps> = (props) => {\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    props.onChange(e.target.checked)\n  }\n\n  const label = props.isChecked\n    ? props.isCheckedLabel || props.label\n    : props.isNotCheckedLabel || props.label\n\n  return (\n    <div className={props.className || ''}>\n      <Input\n        type={InputTypes.CHECKBOX}\n        isChecked={props.isChecked}\n        isDisabled={props.isDisabled || false}\n        name={props.name || ''}\n        id={props.id || ''}\n        onChange={onChange}\n        value={props.value || ''} />\n      <span> {label} </span>\n    </div>\n  )\n};\n\nexport default Checkbox;\n","import React from 'react';\n\nimport Button from './Button';\n\ninterface TogglerProps {\n  className?: string;\n  label: string;\n  onToggle: () => void;\n  isToggled: boolean;\n}\n\nconst Toggler: React.FunctionComponent<TogglerProps> = (props) => {\n\n  return (\n    <div className={props.className || ''}>\n      <div className=\"row\">\n      <Button\n        className=\"u-full-width\"\n        isPrimary={false}\n        label= {(!props.isToggled ? 'Show ' : 'Hide ') + props.label}\n        onClick={props.onToggle} />\n      </div>\n      {\n        props.isToggled && (\n          <div className=\"row\">{props.children}</div>\n        )\n      }\n    </div>\n  )\n}\n\nexport default Toggler;\n","/**\n * @file Notice component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport './css/Notice.css';\n\ninterface NoticeProps {\n  className?: string;\n  heading: string;\n  content: string;\n}\n\nconst Notice: React.FunctionComponent<NoticeProps> = (props) => {\n  const lines = props.content.split(\"\\n\");\n\n  return (\n    <div className={(props.className || '') + ' Notice'}>\n      <h4> {props.heading} </h4>\n      {\n        lines.map(line => (<>{line} <br /></>))\n      }\n    </div>\n  )\n};\n\nexport default Notice;\n","/**\n * @file Proxy component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport Checkbox from '../../../shared/Checkbox';\nimport Toggler from '../../../shared/Toggler';\nimport Input from '../../../shared/Input';\nimport Notice from '../../../shared/Notice';\nimport {InputTypes} from '../../../../enums';\n\nimport './css/Proxy.css'\n\nimport * as utils from '../../../../utils';\n\nexport interface ProxyData {\n  url: string,\n  isEnabled: boolean\n}\n\ninterface ProxyProps {\n  proxy: ProxyData;\n  onUpdateProxy: (data: ProxyData) => void;\n}\n\ninterface ProxyState {\n  showProxySettings: boolean;\n}\n\nexport default class Proxy extends React.PureComponent<ProxyProps, ProxyState> {\n\n  constructor(props: ProxyProps) {\n    super(props);\n    this.state = {\n      showProxySettings: true,\n    };\n  }\n\n  toggleProxySettings = () => {\n    this.setState(prevState => ({\n      showProxySettings: !prevState.showProxySettings,\n    }));\n  }\n\n  onUpdateProxyUrl = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.props.onUpdateProxy({\n      url: e.target.value,\n      isEnabled: this.props.proxy.isEnabled,\n    })\n  }\n\n  onUpdateProxyEnabled = (isEnabled: boolean) => {\n    this.props.onUpdateProxy({\n      url: this.props.proxy.url,\n      isEnabled\n    })\n  }\n\n  render() {\n\n    return (\n      <Toggler\n        isToggled={this.state.showProxySettings}\n        className=\"Proxy\"\n        label=\"Proxy Settings\"\n        onToggle={this.toggleProxySettings}>\n        <div className=\"row\">\n          <Notice\n            className=\"twelve columns u-full-width\"\n            heading=\"Proxy Overview\"\n            content={\"Requests are proxied through a copy of cors-anywhere\\n\"\n              + `This is hosted on: ${utils.PROXY}${\"\\n\"}`\n              + \"You can find the code for this at https://github.com/Mattamorphic/curlify/tree/proxy\\n\"\n              + \"If you'd like to use your own proxy, simply replace the URL\\n\"\n              + \"This should follow cors-anywhere entry design\\n\"\n              + \"This proxy forwards request, gets around the cors issue, and allows us to return headers\\n\"\n              + \"No data is recorded in the proxy\\n\"} />\n        </div>\n        <div className=\"row\">\n          <Input\n            className=\"six columns u-full-width\"\n            isDisabled={!this.props.proxy.isEnabled}\n            type={InputTypes.URL}\n            onChange={this.onUpdateProxyUrl}\n            placeholder=\"Proxy Url\"\n            value={this.props.proxy.url} />\n          <Checkbox\n            className=\"checkbox six columns u-full-width\"\n            isChecked={this.props.proxy.isEnabled}\n            isCheckedLabel=\"Proxy is enabled\"\n            isNotCheckedLabel=\"Proxy is not enabled\"\n            onChange={this.onUpdateProxyEnabled}\n            value=\"proxy\" />\n        </div>\n      </Toggler>\n    );\n  }\n}\n","/**\n * @file $COMPONENT component\n * @author Mattamorphic\n */\nimport React from 'react';\n\nimport Button from './Button';\n\nimport './css/Confirm.css';\n\ninterface ConfirmProps {\n  className?: string;\n  label: string;\n  message: string;\n  onConfirm: () => void;\n  onCancel: () => void;\n  isPrimary?: boolean;\n}\n\nconst Confirm: React.FunctionComponent<ConfirmProps> = (props) => {\n\n  const onConfirm = () => {\n    const result = window.confirm(props.message);\n    result ? props.onConfirm() : props.onCancel();\n  }\n\n  return (\n    <Button\n      className={props.className || ''}\n      isPrimary={props.isPrimary || false}\n      label={props.label}\n      onClick={onConfirm} />\n  )\n};\n\nexport default Confirm;\n","import React from 'react';\n\nimport Proxy, {ProxyData} from './proxy/Proxy';\n\nimport './css/Request.css';\n\nimport Button from '../../shared/Button';\nimport Confirm from '../../shared/Confirm';\n\n\ninterface RequestProps {\n  shouldConfirm: boolean;\n  incompleteData?: string;\n  proxy: ProxyData;\n  onRequest: () => void;\n  onUpdateProxy: (data: ProxyData) => void;\n}\n\nconst Request: React.FunctionComponent<RequestProps> = (props) => {\n  const onConfirm = props.onRequest;\n  const onCancel = () => {};\n\n\n  return (\n    <div className=\"row\">\n      <div className=\"Request\">\n        <Proxy proxy={props.proxy} onUpdateProxy={props.onUpdateProxy} />\n        {\n          props.shouldConfirm\n            ? <Confirm\n                className=\"u-full-width\"\n                label=\"Test\"\n                onConfirm={onConfirm}\n                onCancel={onCancel}\n                message=\"Are you sure?\" />\n            :  <Button\n                className=\"u-full-width\"\n                isPrimary={false}\n                label=\"Test\"\n                onClick={props.onRequest} />\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default Request;\n","import React from 'react';\nimport ReactDOMServer from 'react-dom/server';\n\nimport Toggler from '../../shared/Toggler';\n\nimport * as utils from '../../../utils';\n\nimport {JsonValueTypes} from '../../../enums';\n\nimport './css/FetchResponse.css';\n\ninterface FetchResponseProps {\n  headers: Headers,\n  data: string;\n}\n\ninterface FetchResponseState {\n  showHeaders: boolean;\n  showData: boolean;\n  showRaw: boolean;\n}\n\nexport default class FetchResponse extends React.PureComponent<FetchResponseProps, FetchResponseState> {\n\n  constructor(props: FetchResponseProps) {\n    super(props)\n    this.state ={\n      showHeaders: false,\n      showData: false,\n      showRaw: false,\n    };\n  }\n\n\n  replacer = (_: string, p1: string, p2: string, p3: string, p4: string) => {\n    const part = { indent: p1, key: p2, value: p3, end: p4 };\n\n    let valueClass = \"json-value\";\n    let type = JsonValueTypes.STRING;\n    if (part.value !== undefined && part.value !== null) {\n      if (!isNaN(parseInt(part.value))) {\n        valueClass = \"json-number\";\n        type = JsonValueTypes.NUMBER;\n      } else if (!isNaN(Date.parse(part.value.replace(/[T|Z]/, ' ')))) {\n        valueClass = \"json-date\";\n        type = JsonValueTypes.DATE;\n      } else if (['true', 'false', 'null', 'nil', 'undefined'].includes(part.value.toLowerCase())) {\n        valueClass = \"json-boolean\";\n        type = JsonValueTypes.BOOLEAN;\n      } else if (part.value.match(utils.regEx.url)) {\n        valueClass = \"json-url\";\n        type = JsonValueTypes.URL;\n      } else {\n        valueClass = \"json-string\";\n        type = JsonValueTypes.STRING;\n      }\n    }\n    return ReactDOMServer.renderToString(\n      <>\n        {\"\\u00a0\".repeat(part.indent.length)}\n        {part.key && <span className=\"json-key\"> {part.key} </span>}\n        {\n          part.value\n          &&\n            <span className={valueClass}>\n              {\n                type === JsonValueTypes.URL\n                  ? (<a href={part.value.replace(/\"/, '')}>{part.value}</a>)\n                  : part.value\n              }\n            </span>\n        }\n        {part.end && <span className=\"json-key\"> {part.end} </span>}\n        <br />\n      </>\n    );\n  }\n\n  toggleHeaders = () => {\n    this.setState(prevState =>({\n      showHeaders: !prevState.showHeaders,\n    }))\n  }\n\n  toggleData = () => {\n    this.setState(prevState =>({\n      showData: !prevState.showData,\n    }))\n  }\n\n  toggleRaw = () => {\n    this.setState(prevState => ({\n      showRaw: !prevState.showRaw,\n    }))\n  }\n\n  render () {\n    let json = {}\n    try {\n      json = JSON.parse(this.props.data)\n    } catch (_) {\n\n    }\n    console.log(this.props.data);\n    return (\n      <div className=\"FetchResponse\">\n      <Toggler\n        isToggled={this.state.showHeaders}\n        className=\"Headers\"\n        label=\"Headers\"\n        onToggle={this.toggleHeaders}>\n        <table className=\"u-max-full-width\">\n          <thead>\n            <tr>\n              <th> Header </th>\n              <th> Value </th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              Array.from(this.props.headers.keys()).map(\n                (key, index) => (\n                  <tr key={`r_${key}_${index}`}>\n                    <td> {key} </td>\n                    <td> {this.props.headers.get(key)} </td>\n                  </tr>\n                )\n              )\n            }\n          </tbody>\n        </table>\n      </Toggler>\n      <Toggler\n        isToggled={this.state.showRaw}\n        label=\"Raw\"\n        onToggle={this.toggleRaw}>\n          <div className=\"Data json-key\">\n            {this.props.data}\n          </div>\n      </Toggler>\n      <Toggler\n        isToggled={this.state.showData}\n        label=\"Data\"\n        onToggle={this.toggleData}>\n          <div className=\"Data\" dangerouslySetInnerHTML={{__html:\n            JSON.stringify(\n              json,\n              null,\n              3\n            ).replace(\n              /^( *)(\"[^\"]+\": )?(\"[^\"].*\"|[\\w.+-]*)?([{}[\\],]*)?$/mg,\n              this.replacer\n            )\n        }} />\n      </Toggler>\n    </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport './css/Loading.css';\n\ninterface LoadingProps {\n  className?: string;\n}\n\nconst Loading: React.FunctionComponent<LoadingProps> = (props) => {\n  return (\n    <div className={(props.className || '') + \" LoadingContainer\"}>\n      <div className=\"Loading\">\n        <div />\n      </div>\n      <div>\n        Loading\n      </div>\n    </div>\n  );\n}\n\nexport default Loading;\n","import React from 'react';\n\nimport Request from './request/Request';\nimport FetchResponse from './fetchresponse/FetchResponse';\nimport Loading from '../shared/Loading';\nimport Notice from '../shared/Notice';\n\nimport './css/Test.css';\n\nimport {ConfigData} from '../config/Config';\nimport {DataData} from '../data/Data';\nimport {ProxyData} from './request/proxy/Proxy';\n\nimport * as utils from '../../utils';\n\nexport interface ValidatePayloadResult {\n  message: string[];\n  success: boolean;\n}\n\ninterface TestProps {\n  config: ConfigData;\n  data: DataData;\n  proxy: ProxyData;\n  updateConfig: (data: ConfigData) => void;\n  updateData: (data: DataData) => void;\n  updateProxy: (data: ProxyData) => void;\n  validation: ValidatePayloadResult;\n}\n\ninterface TestState {\n  isLoading: boolean;\n  response: {\n    headers?: Headers,\n    data?: string,\n  };\n  finalDestination: string;\n}\n\nclass Test extends React.PureComponent<TestProps, TestState> {\n\n  constructor(props: TestProps) {\n    super(props);\n    this.state = {\n      isLoading: false,\n      response: {},\n      finalDestination: ''\n    };\n  }\n\n  getFetchData = () => {\n    const fetchData: RequestInit = {\n      method: this.props.config.method,\n      body: null,\n      headers: new Headers(\n        this.props.config.headers.map(header => [header.type, header.value]),\n      ),\n    };\n\n    if (utils.methodHasPayload(this.props.config.method)) {\n      fetchData.body = JSON.stringify(this.props.data.data[this.props.data.type]);\n    }\n    return fetchData;\n  }\n\n  onTest = async () => {\n    const finalDestination = ((this.props.proxy.isEnabled) ? this.props.proxy.url : '')\n      + this.props.config.domain\n      + this.props.config.endpoint;\n    this.setState(\n      {isLoading: true, finalDestination},\n      async () => {\n      // Todo: Run our own proxy service instead of using this.\n      const dest = new URL(finalDestination);\n      const response: Response = await fetch(\n        dest.href,\n        this.getFetchData(),\n      );\n      const data = await response.text();\n      this.setState({\n        isLoading: false,\n        response: {\n          headers: response.headers as Headers,\n          data,\n        }\n      })\n      }\n    );\n  }\n\n  render () {\n    if (!this.props.validation.success) {\n      return (\n        <div className=\"row\">\n          <div className=\"Test Disabled\">\n            {\n              this.props.validation.message.map(\n                (string, idx) => (\n                  <label key={`validation_${idx}`}> {string} </label>\n                ),\n              )\n            }\n          </div>\n        </div>\n      )\n    }\n    if (this.state.isLoading) {\n      return (\n        <div className=\"row\">\n          <Loading />\n        </div>\n      );\n    }\n    return (\n      <>\n        <Request\n          proxy={this.props.proxy}\n          onUpdateProxy={this.props.updateProxy}\n          shouldConfirm={false} // Todo: We need to ensure that everything matches up\n          onRequest={this.onTest} />\n        {\n          this.state.response.headers && this.state.response.data &&\n          <>\n            <div className=\"row\">\n              <Notice\n                className=\"twelve columns u-full-width\"\n                heading=\"Request complete\"\n                content={`Request sent ${this.props.proxy.isEnabled ? 'through Proxy' : ''} to ${this.state.finalDestination}`} />\n            </div>\n            <div className=\"row\">\n              <FetchResponse headers={this.state.response.headers} data={this.state.response.data} />\n            </div>\n          </>\n        }\n      </>\n    );\n  };\n}\n\nexport default Test;\n","import React from 'react';\nimport Config, {ConfigData} from './components/config/Config';\nimport Data, {DataData} from './components/data/Data';\nimport Heading from './components/heading/Heading';\nimport Output from './components/output/Output';\nimport {ProxyData} from './components/test/request/proxy/Proxy';\nimport Test, {ValidatePayloadResult} from './components/test/Test';\n\nimport './css/App.css'\n\nimport * as utils from './utils';\n\nimport {\n  DataType,\n  HTTPMethods,\n  OutputType,\n} from './enums';\n\ninterface OutputState {\n  type: OutputType;\n}\n\ninterface AppState {\n  config: ConfigData;\n  data: DataData;\n  output: OutputState;\n  proxy: ProxyData;\n  validation: ValidatePayloadResult;\n}\n\ninterface AppProps {}\n\nexport default class App extends React.Component<AppProps, AppState> {\n\n  onConfigChange = (config: ConfigData): void => {\n    this.setState({\n      config,\n    }, () => this.setState({validation: this.validatePayload()}));\n  }\n\n  onDataChange = (data: DataData): void => {\n    this.setState({\n      data,\n    }, () => this.setState({validation: this.validatePayload()}));\n  }\n\n  onUpdateProxy = (proxy: ProxyData): void => {\n    this.setState({\n      proxy,\n    });\n  }\n\n  constructor(props: AppProps) {\n    super(props);\n    this.state = {\n      config: {\n        method: HTTPMethods.GET,\n        headers: [],\n        domain: 'https://api.github.com',\n        endpoint: '/users/octocat',\n      },\n      data: {\n        type: DataType.JSON,\n        data: {\n          json: {test: \"value\"},\n          graphQL: {query: \"query {viewer {username}}\"},\n          form: null,\n        },\n      },\n      output: {\n        type: OutputType.CURL,\n      },\n      proxy: {\n        url: utils.PROXY,\n        isEnabled: true,\n      },\n      validation: {\n        message: [],\n        success: true,\n      }\n    }\n  }\n\n  validatePayload = (): ValidatePayloadResult => {\n    const result = {\n      message: [] as string[],\n      success: true,\n    };\n    if (!utils.isValidMethod(this.state.config.method)) {\n      result.message.push(\n        `Invalid ${this.state.config.method}, check settings above`,\n      );\n      result.success = false;\n    }\n    if (!utils.isValidHeaders(this.state.config.headers)) {\n      result.message.push(\n        `Invalid headers, check settings above`,\n      );\n      result.success = false;\n    }\n    if (!utils.isValidURL(\n      this.state.config.domain,\n      this.state.config.endpoint,\n    )) {\n      result.message.push(\n        `Invalid URL ${this.state.config.domain} or ${this.state.config.endpoint}, check settings above`,\n      );\n      result.success = false;\n    }\n\n    if (\n      this.state.data.type === DataType.GQL\n      && !utils.isValidGraphQLString(this.state.data.data.graphQL.query)) {\n        result.message.push(\n          `Invalid GraphQL string, check settings above`,\n        );\n        result.success = false;\n    }\n    return result;\n  }\n\n  render () {\n    return (\n      <div className='container App'>\n        <div className=\"row\">\n          <Heading imageSrc={process.env.PUBLIC_URL + '/images/banner.png'} />\n        </div>\n        <div className=\"row\">\n          <Config\n            data={this.state.config}\n            updateConfig={this.onConfigChange} />\n        </div>\n        <div className=\"row\">\n          {\n            utils.methodHasPayload(this.state.config.method) &&\n              (<Data data={this.state.data} updateData={this.onDataChange} />)\n          }\n        </div>\n        <div className=\"row\">\n          <Output\n            config={this.state.config}\n            data={this.state.data}\n            output={this.state.output.type}\n            updateConfig={this.onConfigChange}\n            updateData={this.onDataChange} />\n        </div>\n        <div className=\"row\">\n          <Test\n            validation={this.state.validation}\n            config={this.state.config}\n            data={this.state.data}\n            proxy={this.state.proxy}\n            updateConfig={this.onConfigChange}\n            updateData={this.onDataChange}\n            updateProxy={this.onUpdateProxy} />\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}